================================================================================
REPOSITORY: kaihedrick/DevHive.ReactFrontend
COMMIT: 61fd776d15ed66c91fa7b707e2efe35ff47db670
COMMIT SHORT: 61fd776
GENERATED: 2025-08-25 01:44:15 UTC
TOTAL FILES: 74
SELECTED FILE TYPES: .js, .css, .jsx
================================================================================

*GitHub Repository "kaihedrick/DevHive.ReactFrontend" (Branch: main)*

'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/App.js ---
import React from 'react';
import { Routes, Route, useLocation } from 'react-router-dom';
import Navbar from './components/Navbar';
import Projects from './components/Projects';
import Footer from './components/Footer';
import LoginRegister from './components/LoginRegister.tsx';
import Sprint from './components/Sprint';
import ForgotPassword from './components/ForgotPassword.tsx';
import ProtectedRoute from './components/ProtectedRoute';
import Backlog from './components/Backlog';
import Board from './components/Board';
import Contacts from './components/Contacts';
import Message from './components/Message';
import { getSelectedProject } from './services/projectService';
import ProjectDetails from './components/ProjectDetails';
import CreateProject from './components/CreateProject';
import InviteMembers from './components/InviteMembers';
import AccountDetails from './components/AccountDetails';
import JoinProject from './components/JoinProject';
import CreateSprint from './components/CreateSprint';
import CreateTask from './components/CreateTask';
import EditSprint from './components/EditSprint';
import EditTask from './components/EditTask';
import ResetPassword from './components/ResetPassword.tsx';
import './styles/global.css'; // Import global styles
function App() {
  const location = useLocation();
  const selectedProject = getSelectedProject();

  const hideNavbarRoutes = ['/', '/forgot-password', '/create-project', '/projects', '/join-group', '/account-details'];
  const showNavbar = selectedProject && !hideNavbarRoutes.includes(location.pathname);

  const getBackgroundStyle = () => ({
    background: showNavbar ? "#ffffff" : "linear-gradient(to bottom right, #f5c542, #ff9f1c)",
  });

  return (
    <div
      className={`app-container ${showNavbar ? "has-navbar" : "full-screen"}`}
      style={getBackgroundStyle()}
    >
      {showNavbar && <Navbar />}
      <div className="content">
        <main>
          <Routes>
            <Route path="/" element={<LoginRegister />} />
            <Route path="/forgot-password" element={<ForgotPassword />} />
            <Route path="/create-project" element={<CreateProject />} />
            <Route path="/projects" element={<Projects />} />
            <Route path="/join-group" element={<JoinProject />} />
            <Route path="/reset-password" element={<ResetPassword />} />
            <Route path="/reset-password/:token" component={ResetPassword} />

            <Route path="/project-details" element={<ProtectedRoute><ProjectDetails /></ProtectedRoute>} />
            <Route path="/invite" element={<ProtectedRoute><InviteMembers /></ProtectedRoute>} />
            <Route path="/account-details" element={<ProtectedRoute><AccountDetails /></ProtectedRoute>} />
            <Route path="/sprint" element={<ProtectedRoute><Sprint /></ProtectedRoute>} />
            <Route path="/backlog" element={<ProtectedRoute><Backlog /></ProtectedRoute>} />
            <Route path="/board" element={<ProtectedRoute><Board /></ProtectedRoute>} />
            <Route path="/contacts" element={<ProtectedRoute><Contacts /></ProtectedRoute>} />
            <Route path="/messages" element={<ProtectedRoute><Message /></ProtectedRoute>} />
            <Route path="/create-sprint" element={<ProtectedRoute><CreateSprint /></ProtectedRoute>} />
            <Route path="/create-task" element={<ProtectedRoute><CreateTask /></ProtectedRoute>} />
            <Route path="/edit-sprint/:sprintId" element={<EditSprint />} />
            <Route path="/edit-task/:taskId" element={<EditTask />} />
            <Route path="/messages/:userId/:projectId" element={<Message />} />
          </Routes>
        </main>

        <Footer />
      </div>
    </div>
  );
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/axiosConfig.js ---
import axios from 'axios';

// Force HTTPS for all requests
axios.defaults.baseURL = 'https://api.devhive.it.com/api';

// Add a request interceptor
axios.interceptors.request.use(
  (config) => {
    // Make sure all URLs use HTTPS
    if (config.url && config.url.startsWith('http:')) {
      config.url = config.url.replace('http:', 'https:');
    }
    
    // Change 'authToken' to 'token' to match what's stored in authService.ts
    const token = localStorage.getItem('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default axios;

'''
'''--- src/components/AccountDetails.js ---
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRotateLeft, faCheck, faTimes, faExclamationCircle, faExclamationTriangle } from "@fortawesome/free-solid-svg-icons";
import useAccountDetails from "../hooks/useAccountDetails";
import "../styles/account_details.css";
import { getSelectedProject } from "../services/storageService";
import { fetchProjectMembers } from "../services/projectService";
/**
 * AccountDetails Component
 *
 * Allows users to view and manage account information including:
 * - First name, last name, username, email
 * - Change password
 * - Leave current project (with ownership reassignment if owner)
 * - Logout
 *
 * @hook useAccountDetails - Provides user data and account-related handlers
 * @state showPasswordChange - Toggles visibility of password form
 * @state newPassword - Stores new password input
 * @state confirmPassword - Stores password confirmation input
 * @state passwordError - Tracks password validation or submission errors
 * @state passwordSuccess - Tracks password change success message
 * 
 * @state isEditingUsername - Tracks username edit state
 * @state newUsername - Username input field value
 * @state usernameError - Username update error message
 * @state usernameSuccess - Username update success message
 *
 * @state showLeaveConfirmation - Toggles leave project confirmation section
 * @state projectMembers - Members available for ownership reassignment
 * @state selectedNewOwner - Selected member to reassign ownership to
 * @state reassignError - Reassignment validation or submission error
 *
 * @effect Syncs username field with user context on mount
 * @effect Fetches project members if owner attempts to leave project
 *
 * @function handleUsernameKeyDown - Saves or cancels username edits via Enter or Escape
 * @function submitPasswordChange - Validates and updates password
 * @function confirmLeaveProject - Triggers modal for leaving the project
 * @function handleReassignAndLeave - Reassigns ownership then leaves project
 * @function executeLeaveProject - Leaves the project as non-owner
 *
 * @accessibility All input fields use proper labels or placeholders
 */
const AccountDetails = () => {
  const navigate = useNavigate();
  const {
    user,
    loading,
    error,
    handleGoBack,
    handleLogout,
    handleChangePassword,
    handleLeaveGroup,
    updateUsername,
    getUserProp,
    leaveProjectState,
    reassignOwnershipAndLeave,
  } = useAccountDetails();

  const [showPasswordChange, setShowPasswordChange] = useState(false);
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [passwordError, setPasswordError] = useState("");
  const [passwordSuccess, setPasswordSuccess] = useState("");

  const [isEditingUsername, setIsEditingUsername] = useState(false);
  const [newUsername, setNewUsername] = useState("");
  const [usernameError, setUsernameError] = useState("");
  const [usernameSuccess, setUsernameSuccess] = useState("");

  const [showLeaveConfirmation, setShowLeaveConfirmation] = useState(false);
  const [projectMembers, setProjectMembers] = useState([]);
  const [selectedNewOwner, setSelectedNewOwner] = useState("");
  const [reassignError, setReassignError] = useState("");

  const selectedProjectId = getSelectedProject();
  const hasSelectedProject = !!selectedProjectId;

  useEffect(() => {
    if (user?.Username) {
      setNewUsername(user.Username);
    }
  }, [user]);

  useEffect(() => {
    if (showLeaveConfirmation && hasSelectedProject) {
      fetchMembersForProject(); // Use a renamed function to avoid confusion
    }
  }, [showLeaveConfirmation, hasSelectedProject]);

  const fetchMembersForProject = async () => {
    try {
      const members = await fetchProjectMembers(selectedProjectId); // Use the imported function
      setProjectMembers(members.filter((member) => member.id !== user?.id)); // Exclude the current user
    } catch (err) {
      console.error("‚ùå Error fetching project members:", err);
    }
  };

  const handlePasswordChangeClick = () => {
    setShowPasswordChange(true);
    setNewPassword("");
    setConfirmPassword("");
    setPasswordError("");
    setPasswordSuccess("");
  };

  const submitPasswordChange = async () => {
    // Reset any previous errors/success
    setPasswordError("");
    setPasswordSuccess("");
    
    // Validate passwords
    if (!newPassword || !confirmPassword) {
      setPasswordError("Both fields are required");
      return;
    }
    
    if (newPassword.length < 8) {
      setPasswordError("Password must be at least 8 characters");
      return;
    }
    
    // Check for special character
    const specialCharacterRegex = /[!@#$%^&*(),.?":{}|<>]/;
    if (!specialCharacterRegex.test(newPassword)) {
      setPasswordError("Password must include at least one special character");
      return;
    }
    
    if (newPassword !== confirmPassword) {
      setPasswordError("Passwords don't match");
      return;
    }
    
    try {
      await handleChangePassword(newPassword);
      setPasswordSuccess("Password changed successfully!");
      // Clear fields and hide form after success
      setTimeout(() => {
        setShowPasswordChange(false);
        setPasswordSuccess("");
      }, 2000);
    } catch (err) {
      setPasswordError(err.message || "Failed to change password");
    }
  };

  const handleUsernameClick = () => {
    if (isEditingUsername) return; // Prevent double toggle
    setNewUsername(user?.Username || "");
    setIsEditingUsername(true);
    setUsernameError("");
    setUsernameSuccess("");
  };

  const handleUsernameKeyDown = async (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      
      // Reset any previous errors/success
      setUsernameError("");
      setUsernameSuccess("");

      // Validate username
      if (!newUsername || newUsername.length < 3) {
        setUsernameError("Username must be at least 3 characters");
        return;
      }
      
      // Skip validation if username hasn't changed
      if (newUsername === user?.Username) {
        setIsEditingUsername(false);
        return;
      }
      
      try {
        // Using the updateUsername function from the hook
        await updateUsername(newUsername);
        
        // Show success message
        setUsernameSuccess("Username updated successfully!");
        setIsEditingUsername(false);
        
        // Clear success message after delay
        setTimeout(() => {
          setUsernameSuccess("");
        }, 2000);
      } catch (err) {
        console.error("Username update error:", err);
        setUsernameError(err.message || "Failed to update username");
      }
    } else if (e.key === "Escape") {
      // Allow users to cancel editing with Escape key
      setIsEditingUsername(false);
      setNewUsername(user?.Username || "");
      setUsernameError("");
    }
  };

  const cancelPasswordChange = () => {
    setShowPasswordChange(false);
    setPasswordError("");
  };

  const confirmLeaveProject = () => {
    setShowLeaveConfirmation(true);
  };

  const handleReassignAndLeave = async () => {
    if (!selectedNewOwner) {
      setReassignError("Please select a new project owner.");
      return;
    }

    setReassignError("");
    try {
      await reassignOwnershipAndLeave(selectedProjectId, selectedNewOwner);
      setShowLeaveConfirmation(false);
    } catch (err) {
      setReassignError(err.message || "Failed to reassign ownership.");
    }
  };

  const executeLeaveProject = async () => {
    try {
      await handleLeaveGroup();
      // The hook will handle clearing the selected project
      setShowLeaveConfirmation(false);
    } catch (err) {
      // Error handling is in the hook
    }
  };

  const cancelLeaveProject = () => {
    setShowLeaveConfirmation(false);
  };

  if (loading) return <p className="loading-spinner">Loading account details...</p>;
  if (error) return <p className="error">{error}</p>;

  return (
    <div className="account-details-page">
      <div className="account-container">
        <div className="account-card">
          <div className="back-arrow" onClick={handleGoBack}>
            <FontAwesomeIcon icon={faArrowRotateLeft} />
          </div>

          <h1>Account Details</h1>

          <div className="profile-placeholder">
            {getUserProp("firstName")?.charAt(0) || ""}
            {getUserProp("lastName")?.charAt(0) || ""}
          </div>

          <div className="full-name-display">
            {getUserProp("firstName")} {getUserProp("lastName")}
          </div>

          {isEditingUsername ? (
            <div className="input-group">
              <input 
                type="text" 
                value={newUsername} 
                onChange={(e) => setNewUsername(e.target.value)}
                onKeyDown={handleUsernameKeyDown}
                placeholder="Enter new username"
                autoFocus
                className={usernameError ? "input-error" : ""}
              />
              {usernameError && (
                <div className="error-message">
                  <FontAwesomeIcon icon={faExclamationCircle} className="error-icon" /> {usernameError}
                </div>
              )}
              <small className="helper-text">Press Enter to save or Escape to cancel</small>
            </div>
          ) : (
            <div className="input-group">
              <input 
                type="text" 
                value={getUserProp('username') || ""} 
                onClick={handleUsernameClick}
                readOnly
                className="editable-field"
                placeholder="Username"
              />
              {usernameSuccess && (
                <div className="success-popup-account">
                  <FontAwesomeIcon icon={faCheck} className="success-icon" />
                  {usernameSuccess}
                </div>
                )}
            </div>
          )}

          <input 
            type="email" 
            value={getUserProp('email') || ""} 
            readOnly 
            placeholder="Email" 
          />

          {showPasswordChange ? (
            <div className="password-change-section">
              <input 
                type="password" 
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                placeholder="New Password" 
                className={passwordError ? "input-error" : ""}
              />
              <input 
                type="password" 
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder="Confirm Password" 
                className={passwordError && newPassword === confirmPassword ? "" : (passwordError ? "input-error" : "")}
              />
              
              {passwordError && (
                <div className="error-message">
                  <FontAwesomeIcon icon={faExclamationCircle} className="error-icon" /> {passwordError}
                </div>
              )}
              {passwordSuccess && <div className="success-message">{passwordSuccess}</div>}
              
              <div className="password-actions">
                <button className="confirm-btn" onClick={submitPasswordChange}>
                  <FontAwesomeIcon icon={faCheck} /> Confirm
                </button>
                <button className="cancel-btn" onClick={cancelPasswordChange}>
                  <FontAwesomeIcon icon={faTimes} /> Cancel
                </button>
              </div>
            </div>
          ) : (
            <>
              <input type="password" value="*************" readOnly placeholder="Password" />
              <button className="change-password-btn" onClick={handlePasswordChangeClick}>
                Change Password
              </button>
            </>
          )}

          {/* Leave Project Section */}
          {hasSelectedProject ? (
            <>
              <button
                className="leave-group-btn"
                onClick={confirmLeaveProject}
              >
                Leave Project
              </button>
              {leaveProjectState.error && (
                <div className="error-message">
                  <FontAwesomeIcon icon={faExclamationCircle} /> {leaveProjectState.error}
                </div>
              )}
              {leaveProjectState.success && (
                <div className="success-message">
                  {leaveProjectState.success}
                </div>
              )}
            </>
          ) : (
            <button
              className="leave-group-btn disabled"
              disabled
              title="Join or select a project first"
            >
              Leave Project
            </button>
          )}

          {showLeaveConfirmation && (
            <div className="leave-project-confirmation">
              {leaveProjectState.error === "You are the project owner. Please reassign ownership to another member before leaving." ? (
                <>
                  <div className="warning-message">
                    <FontAwesomeIcon icon={faExclamationTriangle} className="warning-icon" />
                    You are the project owner. Please reassign ownership to another member before leaving.
                  </div>
                  <select
                    value={selectedNewOwner}
                    onChange={(e) => setSelectedNewOwner(e.target.value)}
                    className="dropdown"
                  >
                    <option value="">Select a new owner</option>
                    {projectMembers.map((member) => (
                      <option key={member.id} value={member.id}>
                        {member.username}
                      </option>
                    ))}
                  </select>
                  {reassignError && (
                    <div className="error-message">
                      <FontAwesomeIcon icon={faExclamationCircle} /> {reassignError}
                    </div>
                  )}
                  <div className="confirmation-actions">
                    <button className="confirm-leave-btn" onClick={handleReassignAndLeave}>
                      Reassign and Leave
                    </button>
                    <button className="cancel-btn" onClick={cancelLeaveProject}>
                      Cancel
                    </button>
                  </div>
                </>
              ) : (
                <>
                  <div className="warning-message">
                    <FontAwesomeIcon icon={faExclamationTriangle} className="warning-icon" />
                    Are you sure you want to leave this project? Your tasks will be unassigned.
                  </div>
                  <div className="confirmation-actions">
                    <button className="confirm-leave-btn" onClick={executeLeaveProject}>
                      Yes, Leave Project
                    </button>
                    <button className="cancel-btn" onClick={cancelLeaveProject}>
                      Cancel
                    </button>
                  </div>
                </>
              )}
            </div>
          )}

          <button className="logout-btn" onClick={handleLogout}>Logout</button>
        </div>
      </div>
    </div>
  );
};

export default AccountDetails;

'''
'''--- src/components/Backlog.js ---
import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { fetchProjectMembers } from "../services/projectService";
import { fetchProjectSprints } from "../services/sprintService";
import { fetchProjectTasksWithAssignees, fetchTaskById, editTask } from "../services/taskService";
import { getSelectedProject } from "../services/storageService";
import useBacklogActions from "../hooks/useBacklogActions";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRotateLeft, faCheck, faXmark, faPenToSquare, faPlus, faTimes, faExclamationTriangle, faExclamationCircle } from "@fortawesome/free-solid-svg-icons";
import "../styles/backlog.css";
/**
 * Backlog Component
 *
 * Displays sprint overviews and allows viewing and managing tasks within a selected sprint.
 * Supports task status updates, inline editing, assignee assignment, and sprint navigation.
 *
 * @prop {string} projectId - Optional project ID, falls back to localStorage if not provided.
 *
 * @state sprints - List of project sprints
 * @state selectedSprint - Currently viewed sprint
 * @state tasks - Tasks in the selected sprint
 * @state members - Project members
 * @state loading - Controls loading UI state
 * @state error - Stores and displays error messages
 * @state successMessage - Stores and displays success messages
 * @state isEditingTask - Task ID currently being edited
 * @state editedDescription - Local state for task description edit form
 *
 * @hook useEffect - Loads sprints and members when projectId is available
 * @hook useEffect - Filters tasks by selected sprint
 * @hook useBacklogActions - Custom hook for updating task status
 *
 * @function handleSprintClick - Loads and filters sprint tasks
 * @function handleStatusChange - Updates task status and reflects it in UI
 * @function handleAssigneeChange - Updates task assignee
 * @function handleEditTask - Loads task data for editing
 * @function handleSaveEdit - Submits and saves updated task
 * @function handleCancelEdit - Exits task edit mode
 *
 * @componentCondition - Conditionally renders:
 *   - Sprint overview if no sprint is selected
 *   - Task list if a sprint is selected
 *   - Error/success/loading messages
 *
 * @accessibility - Icons include labels, inputs use associated labels
 */

const Backlog = ({ projectId }) => {
  const navigate = useNavigate();
  const location = useLocation(); // Get current path
  
  const { handleUpdateTaskStatus } = useBacklogActions();

  const [sprints, setSprints] = useState([]);
  const [selectedSprint, setSelectedSprint] = useState(null);
  const [tasks, setTasks] = useState([]);
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);
  const [isEditingTask, setIsEditingTask] = useState(null); // Track which task is being edited
  const [editedDescription, setEditedDescription] = useState(""); // Track the edited description

  const selectedProjectId = projectId || getSelectedProject();

  useEffect(() => {
    if (!selectedProjectId) {
      setError("No Project ID found. Please select a project.");
      setLoading(false);
      return;
    }

    const loadSprintsAndMembers = async () => {
      try {
        setLoading(true);
        const fetchedSprints = await fetchProjectSprints(selectedProjectId);
        const fetchedMembers = await fetchProjectMembers(selectedProjectId);
        setSprints(fetchedSprints || []);
        setMembers(fetchedMembers || []);
      } catch (err) {
        setError(err.message || "An error occurred while fetching data.");
      } finally {
        setLoading(false);
      }
    };

    loadSprintsAndMembers();
  }, [selectedProjectId]);
  

  const handleSprintClick = async (sprint) => {
    setSelectedSprint(sprint);
    setLoading(true);
    try {
      const fetchedTasks = await fetchProjectTasksWithAssignees(selectedProjectId);
      const sprintTasks = fetchedTasks.filter(task => task.sprintID === sprint.id);
      setTasks(sprintTasks);
    } catch (err) {
      setError("Failed to fetch sprint tasks.");
    } finally {
      setLoading(false);
    }
  };

  const handleGoBack = () => {
    setSelectedSprint(null);
  };

  /** ‚úÖ Fetch updated task after change */
  const refreshTask = async (taskId) => {
    try {
      const updatedTask = await fetchTaskById(taskId);
      setTasks((prevTasks) =>
        prevTasks.map((task) => (task.id === taskId ? updatedTask : task))
      );
    } catch (error) {
      console.error("‚ùå Error fetching updated task:", error);
    }
  };

  /** ‚úÖ Handle Status Change */
  const handleStatusChange = async (task, newStatus) => {
    try {
      console.log(`üîÑ Updating status for Task ID: ${task.id} to ${newStatus}`);
      await handleUpdateTaskStatus(task, newStatus);
      refreshTask(task.id);
      
      // Add success message
      const statusText = newStatus === 0 ? 'To Do' : newStatus === 1 ? 'In Progress' : 'Completed';
      setSuccessMessage(`Task moved to ${statusText}`);
      setTimeout(() => setSuccessMessage(null), 3000);
    } catch (error) {
      console.error("‚ùå Error updating task status:", error);
      setError(`Failed to update task status: ${error.message}`);
      setTimeout(() => setError(null), 3000);
    }
  };

  /** ‚úÖ Handle Assignee Change */
  const handleAssigneeChange = async (task, newAssigneeId) => {
    try {
      // Convert "Unassigned" to null
      const updatedAssigneeId = newAssigneeId === "unassigned" ? null : newAssigneeId;

      // Create a complete task object with all required fields
      const updatedTask = {
        ID: task.id, // Ensure task ID is provided (uppercase for backend compatibility)
        Description: task.description,
        AssigneeID: updatedAssigneeId, // Set to null if unassigned
        SprintID: task.sprintID || null,
        Status: task.status,
        DateCreated: task.dateCreated,
      };

      console.log("Updating task with new assignee:", updatedTask);

      // Update the task in the backend
      await editTask(updatedTask);

      // Update the task in the state
      setTasks((prevTasks) =>
        prevTasks.map((t) =>
          t.id === task.id ? { ...t, assigneeID: updatedAssigneeId } : t
        )
      );

      // Show success message
      setSuccessMessage("Task assignee updated");
      setTimeout(() => setSuccessMessage(null), 3000);
    } catch (err) {
      console.error("Error updating task assignee:", err);
      setError(`Failed to update task assignee: ${err.message}`);
      setTimeout(() => setError(null), 3000);
    }
  };

  const handleEditTask = async (taskId) => {
    try {
      const taskData = await fetchTaskById(taskId); // Fetch task details
      setIsEditingTask(taskId); // Set the task being edited
      setEditedDescription(taskData.description); // Pre-fill the description
    } catch (error) {
      console.error("‚ùå Error fetching task details:", error.message);
      alert("Failed to load task details. Please try again.");
    }
  };

  const handleCancelEdit = () => {
    setIsEditingTask(null); // Exit edit mode
    setEditedDescription(""); // Clear the description
  };

  const handleSaveEdit = async (task) => {
    if (!editedDescription.trim()) {
      alert("Task description cannot be empty.");
      return;
    }
  
    try {
      // Ensure all required fields are included
      const updatedTask = {
        ID: task.id, // Ensure task ID is provided (uppercase for backend compatibility)
        Description: editedDescription, // Updated description
        AssigneeID: task.assigneeID || null, // Assignee ID (or null if unassigned)
        SprintID: task.sprintID || null, // Sprint ID (or null if not assigned to a sprint)
        Status: task.status, // Task status
        DateCreated: task.dateCreated, // Original creation date
      };
  
      console.log("Updated Task:", updatedTask); // Debugging: Log the task being sent
  
      await editTask(updatedTask); // Call the API to save the task
      setIsEditingTask(null); // Exit edit mode
      refreshTask(task.id); // Refresh the task to reflect changes
    } catch (error) {
      console.error("‚ùå Error saving task:", error.message);
      alert("Failed to save task. Please try again.");
    }
  };
  // Sort sprints by start date (earliest first)
  const sortedSprints = [...sprints].sort((a, b) => 
    new Date(a.startDate) - new Date(b.startDate)
  );

  // Find next sprint to start (not started and earliest date)
  const nextSprintToStart = sortedSprints.find(sprint => 
    !sprint.isStarted && new Date(sprint.startDate) >= new Date()
  );

  return (
    <div className="backlog-page">
      <div className="backlog-container">
        <h2 className="backlog-header">Backlog</h2>

        {loading ? (
          <div className="alert warning">
            <FontAwesomeIcon icon={faExclamationTriangle} className="alert-icon" />
            Loading backlog...
          </div>
        ) : error ? (
          <div className="alert error">
            <FontAwesomeIcon icon={faExclamationCircle} className="alert-icon" />
            {error}
          </div>
        ) : successMessage ? (
          <div className="alert success">
            <FontAwesomeIcon icon={faCheck} className="alert-icon" />
            {successMessage}
          </div>
        ) : null}

        {selectedSprint ? (
          <div className="sprint-details-container">
            <div className="back-arrow sprint-view" onClick={handleGoBack}>
              <FontAwesomeIcon icon={faArrowRotateLeft} />
            </div>
            <h3>{selectedSprint.name}</h3>
            <p>Duration: {new Date(selectedSprint.startDate).toLocaleDateString()} - {new Date(selectedSprint.endDate).toLocaleDateString()}</p>
            <p>Started: <FontAwesomeIcon icon={selectedSprint.isStarted ? faCheck : faXmark} className={`sprint-status-icon ${selectedSprint.isStarted ? "completed" : "not-started"}`} /></p>
            <p>Completed: <FontAwesomeIcon icon={selectedSprint.isCompleted ? faCheck : faXmark} className={`sprint-status-icon ${selectedSprint.isCompleted ? "completed" : "not-started"}`} /></p>

            <div className="task-list">
              {tasks.length > 0 ? (
                tasks.map((task) => (
                  <div key={task.id} className={`task-card ${task.status === 0 ? "todo" : task.status === 1 ? "in-progress" : "completed"}`}>
                    {isEditingTask === task.id ? (
                      <>
                        {/* Edit Mode */}
                        <div className="task-content">
                          <textarea
                            className="edit-description"
                            value={editedDescription}
                            onChange={(e) => setEditedDescription(e.target.value)}
                            maxLength={255}
                            placeholder="Edit task description"
                          />
                          <span className="char-counter">{editedDescription.length} / 255</span>
                        </div>
                        <div className="task-controls edit-mode">
                          <button className="save-btn" onClick={() => handleSaveEdit(task)}>
                            <FontAwesomeIcon icon={faCheck} />
                          </button>
                          <button className="cancel-btn" onClick={handleCancelEdit}>
                            <FontAwesomeIcon icon={faTimes} />
                          </button>
                        </div>
                      </>
                    ) : (
                      <>
                        {/* View Mode */}
                        <div className="task-content">
                          <span className="task-title">{task.description}</span>
                        </div>
                        <div className="task-controls">
                          <FontAwesomeIcon
                            icon={faPenToSquare}
                            className="edit-task-icon"
                            onClick={() => handleEditTask(task.id)}
                          />
                          <select
                            className={`task-status ${
                              task.status === 0
                                ? "todo"
                                : task.status === 1
                                ? "in-progress"
                                : "completed"
                            }`}
                            value={task.status}
                            onChange={(e) => handleStatusChange(task, parseInt(e.target.value))}
                          >
                            <option value="0">To Do</option>
                            <option value="1">In Progress</option>
                            <option value="2">Completed</option>
                          </select>
                          <select
                            className="task-assignee-dropdown"
                            value={task.assigneeID || "unassigned"}
                            onChange={(e) => handleAssigneeChange(task, e.target.value)}
                          >
                            <option value="unassigned">Unassigned</option>
                            {members.map((member) => (
                              <option key={member.id} value={member.id}>
                                {member.firstName} {member.lastName}
                              </option>
                            ))}
                          </select>
                          <span className="task-date">
                            Date: {new Date(task.dateCreated).toLocaleDateString()}
                          </span>
                        </div>
                        {/* Task Alert */}
                        {task.alert && (
                          <div className={`task-alert ${task.alert.type}`}>
                            {task.alert.message}
                          </div>
                        )}
                      </>
                    )}
                  </div>
                ))
              ) : (
                <div className="alert warning">
                  <FontAwesomeIcon icon={faExclamationTriangle} className="alert-icon" />
                  No tasks in this sprint.
                </div>
              )}
            </div>
            
            {/* Action button container - INSIDE container */}
            <div className="action-button-container">
              <button 
                className="create-task-button" 
                onClick={() => navigate(`/create-task?sprintId=${selectedSprint.id}`)}
              >
                <FontAwesomeIcon icon={faPlus} className="button-icon" /> Create Task
              </button>
            </div>
          </div>
        ) : (
          <>
            <div className="sprint-overview-container">
              {sortedSprints.length > 0 ? (
                sortedSprints.map((sprint) => (
                  <div key={sprint.id} className="sprint-card" onClick={() => handleSprintClick(sprint)}>
                    <div className="edit-sprint-button" onClick={(e) => { e.stopPropagation(); navigate(`/edit-sprint/${sprint.id}`); }}>
                      <FontAwesomeIcon icon={faPenToSquare} />
                    </div>
                    <h3>{sprint.name}</h3>
                    <p>Duration: {new Date(sprint.startDate).toLocaleDateString()} - {new Date(sprint.endDate).toLocaleDateString()}</p>
                    <div className="sprint-status">
                      {sprint.isCompleted ? (
                        <span className="status-completed">Completed</span>
                      ) : sprint.isStarted ? (
                        <span className="status-started">In Progress</span>
                      ) : (
                        <span className="status-not-started">Not Started</span>
                      )}
                    </div>
                  </div>
                ))
              ) : (
                <div className="alert warning">
                  <FontAwesomeIcon icon={faExclamationTriangle} className="alert-icon" />
                  No sprints available.
                </div>
              )}
            </div>
            
            {/* Action button container - INSIDE container */}
            <div className="action-button-container">
              <button 
                className="create-sprint-button" 
                onClick={() => navigate("/create-sprint")}
              >
                <FontAwesomeIcon icon={faPlus} className="button-icon" /> Create Sprint
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default Backlog;

'''
'''--- src/components/Board.js ---
import React, { useRef, useState, useEffect } from 'react';
import { getSelectedProject } from '../services/storageService';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCalendarAlt, faBars } from '@fortawesome/free-solid-svg-icons';
import useBoardActions from '../hooks/useBoardActions';
import '../styles/board.css';
/**
 * Board Component
 *
 * Displays a Kanban-style task board for a selected project and sprint.
 * Supports drag-and-drop task movement across three status columns.
 *
 * @returns {JSX.Element} The full task board with status columns and sprint selector
 *
 * @state localSuccessMessage - Displays temporary success messages
 * @state localErrorMessage - Displays temporary error messages
 *
 * @ref columnRefs - Refs for each task column to highlight drop targets
 *
 * @hook useEffect - Auto-clears success and error messages after a delay
 * @hook useBoardActions - Custom hook for board state, task updates, sprint/task filtering
 *
 * @function handleDragStart - Initiates drag with ghost image and sets current task
 * @function handleDragEnd - Cleans up styles and ghost element
 * @function handleDragOver - Adds visual highlight to valid drop target
 * @function handleDragLeave - Removes highlight from drop target
 * @function handleDrop - Handles logic for moving task to new status
 *
 * @conditionalRender - Renders loading, error, empty sprint, or full board depending on state
 *
 * @accessibility - Columns support drag events, dropdowns allow assignment updates
 */
const Board = () => {
  const projectId = getSelectedProject();
  const {
    sprints,
    selectedSprint,
    tasks,
    members,
    loading,
    error,
    successMessage,
    draggedTask,
    setDraggedTask,
    setError,
    getTasksByStatus,
    formatDate,
    getAssigneeName,
    handleSprintChange,
    handleAssigneeChange,
    handleStatusUpdate,
    setSuccessMessage
  } = useBoardActions(projectId);

  const columnRefs = {
    todo: useRef(null),
    inProgress: useRef(null),
    completed: useRef(null)
  };

  const [localSuccessMessage, setLocalSuccessMessage] = useState('');
  const [localErrorMessage, setLocalErrorMessage] = useState('');

  // Automatically clear success and error messages after 3 seconds
  useEffect(() => {
    if (successMessage) {
      setLocalSuccessMessage(successMessage);
      setTimeout(() => setLocalSuccessMessage(''), 3000);
    }
  }, [successMessage]);

  useEffect(() => {
    if (error) {
      setLocalErrorMessage(error);
      setTimeout(() => setLocalErrorMessage(''), 3000);
    }
  }, [error]);

  // Drag handlers
  const handleDragStart = (e, task) => {
    setDraggedTask(task);
    e.dataTransfer.effectAllowed = 'move';

    // Create a ghost image of the task card
    const ghostElement = e.target.cloneNode(true);
    ghostElement.id = 'drag-ghost';
    ghostElement.style.position = 'absolute';
    ghostElement.style.top = '-1000px';
    ghostElement.style.opacity = '0';
    document.body.appendChild(ghostElement);

    e.dataTransfer.setDragImage(ghostElement, 20, 20);

    // Add a class to the dragged element
    e.target.classList.add('dragging');

    // Required for Firefox
    e.dataTransfer.setData('text/plain', task.id);
  };

  const handleDragEnd = (e) => {
    e.target.classList.remove('dragging');

    // Remove the ghost element
    const ghostElement = document.getElementById('drag-ghost');
    if (ghostElement) {
      ghostElement.remove();
    }

    // Remove all highlighting
    Object.values(columnRefs).forEach(ref => {
      if (ref.current) {
        ref.current.classList.remove('highlight-drop-target');
      }
    });
  };

  const handleDragOver = (e, columnName) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';

    // Highlight current column
    const columnRef = columnRefs[columnName];
    if (columnRef && columnRef.current) {
      columnRef.current.classList.add('highlight-drop-target');
    }

    // Remove highlight from other columns
    Object.entries(columnRefs).forEach(([name, ref]) => {
      if (name !== columnName && ref.current) {
        ref.current.classList.remove('highlight-drop-target');
      }
    });
  };

  const handleDragLeave = (e, columnName) => {
    const columnRef = columnRefs[columnName];
    if (columnRef && columnRef.current) {
      columnRef.current.classList.remove('highlight-drop-target');
    }
  };

  const handleDrop = async (e, statusValue) => {
    e.preventDefault();

    // Reset highlighting
    Object.values(columnRefs).forEach((ref) => {
      if (ref.current) {
        ref.current.classList.remove("highlight-drop-target");
      }
    });

    if (!draggedTask) return;

    // If the task is already in this column, do nothing
    if (draggedTask.status === statusValue) return;

    await handleStatusUpdate(draggedTask.id, statusValue);
    setDraggedTask(null);
  };

  if (!projectId) {
    return (
      <div className="board-page">
        <div className="board-container">
          <div className="error-message">
            No project selected. Please select a project first.
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="board-page">
      <div className="board-container">
        {/* Success and Error Pop-Ups */}
        {localSuccessMessage && (
          <div className="success-popup">{localSuccessMessage}</div>
        )}
        {localErrorMessage && (
          <div className="error-popup">{localErrorMessage}</div>
        )}

        <div className="board-header">
          <h2 className="board-title">Project Board</h2>

          <div className="sprint-selector">
            <label htmlFor="sprint-select">Select Sprint:</label>
            <select 
              id="sprint-select" 
              value={selectedSprint || ''}
              onChange={handleSprintChange}
              disabled={loading || sprints.length === 0}
            >
              {sprints.length === 0 ? (
                <option value="">No sprints available</option>
              ) : (
                sprints.map(sprint => (
                  <option key={sprint.id} value={sprint.id}>
                    {sprint.name}
                  </option>
                ))
              )}
            </select>
          </div>
        </div>

        {loading ? (
          <div className="loading-message">Loading board...</div>
        ) : error ? (
          <div className="error-message">{error}</div>
        ) : !selectedSprint ? (
          <div className="info-message">Please select a sprint to view tasks.</div>
        ) : (
          <div className="board-columns">
            {/* To Do Column */}
            <div className="board-column-wrapper">
              <div className="board-column">
                <div className="board-column-header">
                  <h3>To Do</h3>
                  <div className="task-count">{getTasksByStatus(0).length}</div>
                </div>
                
                <div 
                  className="task-list"
                  ref={columnRefs.todo}
                  onDragOver={(e) => handleDragOver(e, 'todo')}
                  onDragLeave={(e) => handleDragLeave(e, 'todo')}
                  onDrop={(e) => handleDrop(e, 0)}
                >
                  {getTasksByStatus(0).map(task => (
                    <div 
                      key={task.id}
                      className="task-card"
                      draggable
                      onDragStart={(e) => handleDragStart(e, task)}
                      onDragEnd={handleDragEnd}
                    >
                      <div className="task-header">
                        <div className="task-title">{task.description}</div>
                        <div className="task-actions">
                          <FontAwesomeIcon icon={faBars} />
                        </div>
                      </div>
                      <div className="task-content">
                        <div className="task-meta">
                          <div className="task-assignee dropdown">
                            {/* Dropdown to show full names */}
                            <select
                              className="task-assignee-dropdown"
                              value={task.assigneeID || ""}
                              onChange={(e) => handleAssigneeChange(task, e.target.value)}
                            >
                              <option value="">Unassigned</option>
                              {members.map((member) => (
                                <option key={member.id} value={member.id}>
                                  {member.firstName} {member.lastName}
                                </option>
                              ))}
                            </select>
                          </div>
                          <div className="task-date">
                            <FontAwesomeIcon icon={faCalendarAlt} />
                            <span>{formatDate(task.dateCreated)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  {getTasksByStatus(0).length === 0 && (
                    <div className="empty-column-message">
                      No tasks in this column
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* In Progress Column */}
            <div className="board-column-wrapper">
              <div className="board-column">
                <div className="board-column-header">
                  <h3>In Progress</h3>
                  <div className="task-count">{getTasksByStatus(1).length}</div>
                </div>
                
                <div 
                  className="task-list"
                  ref={columnRefs.inProgress}
                  onDragOver={(e) => handleDragOver(e, 'inProgress')}
                  onDragLeave={(e) => handleDragLeave(e, 'inProgress')}
                  onDrop={(e) => handleDrop(e, 1)}
                >
                  {getTasksByStatus(1).map(task => (
                    <div 
                      key={task.id}
                      className="task-card"
                      draggable
                      onDragStart={(e) => handleDragStart(e, task)}
                      onDragEnd={handleDragEnd}
                    >
                      <div className="task-header">
                        <div className="task-title">{task.description}</div>
                        <div className="task-actions">
                          <FontAwesomeIcon icon={faBars} />
                        </div>
                      </div>
                      <div className="task-content">
                        <div className="task-meta">
                          <div className="task-assignee dropdown">
                            {/* Dropdown to show full names */}
                            <select
                              className="task-assignee-dropdown"
                              value={task.assigneeID || ""}
                              onChange={(e) => handleAssigneeChange(task, e.target.value)}
                            >
                              <option value="">Unassigned</option>
                              {members.map((member) => (
                                <option key={member.id} value={member.id}>
                                  {member.firstName} {member.lastName}
                                </option>
                              ))}
                            </select>
                          </div>
                          <div className="task-date">
                            <FontAwesomeIcon icon={faCalendarAlt} />
                            <span>{formatDate(task.dateCreated)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  {getTasksByStatus(1).length === 0 && (
                    <div className="empty-column-message">
                      No tasks in this column
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Completed Column */}
            <div className="board-column-wrapper">
              <div className="board-column">
                <div className="board-column-header">
                  <h3>Completed</h3>
                  <div className="task-count">{getTasksByStatus(2).length}</div>
                </div>
                
                <div 
                  className="task-list"
                  ref={columnRefs.completed}
                  onDragOver={(e) => handleDragOver(e, 'completed')}
                  onDragLeave={(e) => handleDragLeave(e, 'completed')}
                  onDrop={(e) => handleDrop(e, 2)}
                >
                  {getTasksByStatus(2).map(task => (
                    <div 
                      key={task.id}
                      className="task-card"
                      draggable
                      onDragStart={(e) => handleDragStart(e, task)}
                      onDragEnd={handleDragEnd}
                    >
                      <div className="task-header">
                        <div className="task-title">{task.description}</div>
                        <div className="task-actions">
                          <FontAwesomeIcon icon={faBars} />
                        </div>
                      </div>
                      <div className="task-content">
                        <div className="task-meta">
                          <div className="task-assignee dropdown">
                            {/* Dropdown to show full names */}
                            <select
                              className="task-assignee-dropdown"
                              value={task.assigneeID || ""}
                              onChange={(e) => handleAssigneeChange(task, e.target.value)}
                            >
                              <option value="">Unassigned</option>
                              {members.map((member) => (
                                <option key={member.id} value={member.id}>
                                  {member.firstName} {member.lastName}
                                </option>
                              ))}
                            </select>
                          </div>
                          <div className="task-date">
                            <FontAwesomeIcon icon={faCalendarAlt} />
                            <span>{formatDate(task.dateCreated)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  {getTasksByStatus(2).length === 0 && (
                    <div className="empty-column-message">
                      No tasks in this column
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Board;

'''
'''--- src/components/Contacts.js ---
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { fetchProjectMembers } from "../services/projectService";
import { fetchUserById } from "../services/userService";
import { getSelectedProject } from "../services/storageService";
import "../styles/contacts.css";
/**
 * Contacts Component
 *
 * Displays a list of project members excluding the currently logged-in user.
 * Enables navigation to the messaging page when a contact is clicked.
 *
 * @returns {JSX.Element} A styled list of project contacts with avatars and basic info.
 *
 * @state contacts - Stores the filtered list of project members (excluding the current user)
 * @state loading - Indicates whether member data is still being fetched
 * @state error - Stores any error that occurs during fetch operations
 *
 * @hook useEffect - Loads contacts from the selected project on component mount
 * @hook useNavigate - Used to navigate to the messaging page with selected user and project IDs
 *
 * @function loadContacts - Fetches project members and their details, filters out invalid entries
 * @function handleContactClick - Redirects to the messaging route for a specific user
 *
 * @styleOverrides - Injects a style override to apply a consistent secondary background color
 */
const Contacts = () => {
  const navigate = useNavigate();
  const [contacts, setContacts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const loggedInUserId = localStorage.getItem("userId"); // Get logged-in user ID

  useEffect(() => {
    const loadContacts = async () => {
      setLoading(true);
      try {
        const projectId = getSelectedProject();
        if (!projectId) throw new Error("No project selected.");

        console.log(`Fetching members for project: ${projectId}`);
        const members = await fetchProjectMembers(projectId);
        console.log("Project Members Response:", members);

        // Ensure we only extract user IDs
        const memberIds = members.map(member => member.id);
        console.log("Extracted Member IDs:", memberIds);

        // Fetch user details based on IDs
        const membersDetails = await Promise.all(
          memberIds.map(async (userId) => {
            try {
              return await fetchUserById(userId);
            } catch (error) {
              console.error(`Error fetching user details for ${userId}:`, error);
              return null;
            }
          })
        );

        // Filter out null responses and hide logged-in user
        const filteredContacts = membersDetails
          .filter((user) => user !== null && user.id !== loggedInUserId);

        setContacts(filteredContacts);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    loadContacts();
  }, [loggedInUserId]); // Depend on loggedInUserId to reload if it changes

  const handleContactClick = (contactId) => {
    const projectId = getSelectedProject(); // Ensure project ID is used
    navigate(`/messages/${contactId}/${projectId}`); // Navigate to Messages Page with user ID & project ID
  };

  return (
    <>
      {/* This style tag will override the main content background */}
      <style>
        {`
          .content, main, body {
            background-color: var(--bg-secondary) !important;
          }
        `}
      </style>
      
      <div className="contacts-page">
        <div className="contact-container">
          <div className="contact-header">
            <h1>üìá Project Contacts</h1>
            <p>Manage your project contacts here</p>
          </div>

          {loading && <p className="text-muted text-center">Loading contacts...</p>}
          {error && <p className="text-danger text-center">{error}</p>}

          <div className="contact-list">
            {contacts.length > 0 ? (
              contacts.map((contact) => (
                <div 
                  key={contact.id} 
                  className="contact-list-item"
                  onClick={() => handleContactClick(contact.id)}
                >
                  <div className="contact-info">
                    <div className="contact-avatar">
                      {contact.firstName.charAt(0)}{contact.lastName.charAt(0)}
                    </div>
                    <div className="contact-details">
                      <span className="contact-name">{contact.firstName} {contact.lastName}</span>
                      <span className="contact-email">{contact.email}</span>
                      <span className="contact-role">{contact.role}</span>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              !loading && <p className="no-contacts-text">No contacts found.</p>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default Contacts;

'''
'''--- src/components/CreateProject.js ---
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { createProject } from "../services/projectService";
import { getUserId } from "../services/authService";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRotateLeft } from "@fortawesome/free-solid-svg-icons";
import "../styles/create_project.css";
/**
 * CreateProject Component
 * 
 * Form component that allows a logged-in user to create a new project.
 * 
 * @returns {JSX.Element} A project creation form with validation, submission logic, and inline character counters.
 * 
 * @state projectName - Stores the name of the project entered by the user
 * @state projectDescription - Stores the optional description for the project
 * @state error - Stores any error message resulting from form submission or validation
 * 
 * @hook useNavigate - Used to navigate to the projects page upon successful creation
 * 
 * @method handleSubmit - Validates input, calls the createProject service, and handles error or navigation logic
 * 
 * @conditional UI - Renders error messages and character counters for project name and description inputs
 */
const CreateProject = () => {
  const [projectName, setProjectName] = useState("");
  const [projectDescription, setProjectDescription] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!projectName.trim()) {
      setError("Project name is required");
      return;
    }

    try {
      const userId = getUserId();

      if (!userId) {
        setError("You must be logged in to create a project");
        return;
      }

      await createProject({
        name: projectName,
        description: projectDescription,
        projectOwnerID: userId,
      });

      alert("Project created successfully!");
      navigate("/projects");
    } catch (error) {
      console.error("Error creating project:", error);
      setError(error.response?.data || "Failed to create project. Please try again.");
    }
  };

  return (
    <div className="create-project-page">
      <div className="create-project-container">
        <div className="back-arrow" onClick={() => navigate("/projects")}>
          <FontAwesomeIcon icon={faArrowRotateLeft} />
        </div>

        <h1 className="create-project-title">Create Project</h1>

        {error && <div className="error-message">{error}</div>}

        <form onSubmit={handleSubmit}>
          {/* Project Name Input with Counter */}
          <div className="input-container">
            <input
              type="text"
              placeholder="Enter Project Name"
              value={projectName}
              onChange={(e) => setProjectName(e.target.value)}
              maxLength={50}
              required
            />
            <span className="char-counter">{projectName.length} / 50</span>
          </div>

          {/* Project Description Input with Counter */}
          <div className="input-container">
            <textarea
              placeholder="Enter Description"
              value={projectDescription}
              onChange={(e) => setProjectDescription(e.target.value)}
              maxLength={255}
              required
            ></textarea>
            <span className="char-counter">{projectDescription.length} / 255</span>
          </div>

          <button type="submit" className="create-project-btn">
            Create Project
          </button>
        </form>
      </div>
    </div>
  );
};

export default CreateProject;

'''
'''--- src/components/CreateSprint.js ---
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { getSelectedProject } from "../services/storageService";
import { createSprint } from "../services/sprintService";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRotateLeft, faCalendarAlt, faPlay } from "@fortawesome/free-solid-svg-icons";
import "../styles/create_sprint.css";
/**
 * CreateSprint Component
 * 
 * Provides UI and logic to create a new sprint for the currently selected project.
 * 
 * @returns {JSX.Element} Sprint creation form with validation and submission logic
 * 
 * @state sprintName - Sprint title entered by the user
 * @state startDate - Sprint start date (required)
 * @state endDate - Sprint end date (required)
 * @state startImmediately - Whether the sprint should be marked as started upon creation
 * @state loading - Tracks form submission state
 * @state error - Displays error messages to the user
 * 
 * @hook useNavigate - Allows programmatic navigation between routes
 * 
 * @method handleCreateSprintSubmit - Validates input and calls API to create a sprint
 * 
 * @conditional UI - If project is not selected, shows an error message with back navigation
 */

const CreateSprint = () => {
  const navigate = useNavigate();
  const projectId = getSelectedProject();
  
  // State for form inputs
  const [sprintName, setSprintName] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [startImmediately, setStartImmediately] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const handleCreateSprintSubmit = async () => {
    if (!sprintName || !startDate || !endDate) {
      setError("All fields are required.");
      setTimeout(() => setError(null), 3000);
      return;
    }
    
    // Validate end date is after start date
    if (new Date(endDate) <= new Date(startDate)) {
      setError("End date must be after start date.");
      setTimeout(() => setError(null), 3000);
      return;
    }
    
    try {
      setLoading(true);
      
      const sprintData = {
        name: sprintName,
        startDate,
        endDate,
        isCompleted: false,
        isStarted: startImmediately, // Set isStarted based on checkbox
        projectID: projectId,
      };

      await createSprint(sprintData);
      navigate("/backlog");
    } catch (err) {
      setError(err.message || "Failed to create sprint.");
      setTimeout(() => setError(null), 3000);
    } finally {
      setLoading(false);
    }
  };

  if (!projectId) {
    return (
      <div className="create-sprint-page">
        <div className="create-sprint-container">
          <div className="card">
            <div className="back-arrow" onClick={() => navigate("/backlog")}>
              <FontAwesomeIcon icon={faArrowRotateLeft} />
            </div>
            <h2>Error</h2>
            <p>No project selected. Please select a project first.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="create-sprint-page">
      <div className="create-sprint-container">
        <div className="card">
          {/* Back Arrow */}
          <div className="back-arrow" onClick={() => navigate("/backlog")}>
            <FontAwesomeIcon icon={faArrowRotateLeft} />
          </div>
          
          <h2>Create Sprint</h2>

          <input
            type="text"
            placeholder="Enter Sprint Name"
            value={sprintName}
            onChange={(e) => setSprintName(e.target.value)}
          />

          <div className="input-group">
            <label>
              <FontAwesomeIcon icon={faCalendarAlt} className="calendar-icon" /> Start Date
            </label>
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              min={new Date().toISOString().split('T')[0]} // Cannot select dates in the past
            />
          </div>

          <div className="input-group">
            <label>
              <FontAwesomeIcon icon={faCalendarAlt} className="calendar-icon" /> End Date
            </label>
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              min={startDate || new Date().toISOString().split('T')[0]} // End date must be after start date
            />
          </div>

          <div className="checkbox-group">
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={startImmediately}
                onChange={(e) => setStartImmediately(e.target.checked)}
              />
              <FontAwesomeIcon icon={faPlay} className="checkbox-icon" />
              Start sprint immediately
            </label>
          </div>

          <button 
            className="button-primary" 
            onClick={handleCreateSprintSubmit}
            disabled={loading}
          >
            {loading ? "Creating..." : "Create Sprint"}
          </button>

          {error && <div className="error-popup">{error}</div>}
        </div>
      </div>
    </div>
  );
};

export default CreateSprint;

'''
'''--- src/components/CreateTask.js ---
import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { getSelectedProject } from "../services/projectService";
import { fetchProjectMembers } from "../services/projectService";
import { useSprintManagement } from "../hooks/useSprintManagement";
import { useTaskManagement } from "../hooks/useTaskManagement";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRotateLeft, faExclamationTriangle, faSpinner } from "@fortawesome/free-solid-svg-icons";
import "../styles/create_task.css";
/**
 * CreateTask Component
 * 
 * Allows users to create a new task within the selected project and sprint.
 * 
 * @returns {JSX.Element} Form UI for creating a task
 * 
 * @param {string} selectedProjectId - Project ID retrieved from local storage
 * 
 * @state description - Task description input field
 * @state assigneeID - Selected assignee's user ID
 * @state sprintID - Selected sprint ID (may be prefilled from query param)
 * @state members - List of available project members for selection
 * @state errorMessage - UI error messaging shown to the user
 * @state isSubmitting - Flag for disabling form during submission
 * @state membersLoading - Indicates members are being fetched
 * 
 * @hook useSprintManagement - Fetches sprints and sprint-related state from backend
 * @hook useTaskManagement - Provides task creation logic and task-related error handling
 * 
 * @method handleCreateTaskSubmit - Validates and submits the task creation request
 * @method handleKeyDown - Allows form submission via Enter key
 * 
 * @effect Loads project members when component mounts or selectedProjectId changes
 * @effect Handles sprint/task hook-level errors and sets error state
 */
const CreateTask = () => {
  const navigate = useNavigate();
  const location = useLocation();
  
  // Get query parameters (for preselected sprint)
  const queryParams = new URLSearchParams(location.search);
  const preselectedSprintId = queryParams.get('sprintId');
  
  // Form state
  const [description, setDescription] = useState("");
  const [assigneeID, setAssigneeID] = useState("");
  const [sprintID, setSprintID] = useState(preselectedSprintId || "");
  const [members, setMembers] = useState([]);
  const [errorMessage, setErrorMessage] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [membersLoading, setMembersLoading] = useState(false);

  // Get the selected project ID
  const selectedProjectId = getSelectedProject();
  
  // Initialize hooks
  const { 
    sprints, 
    loading: sprintsLoading, 
    error: sprintError 
  } = useSprintManagement(selectedProjectId);
  
  const { 
    handleCreateTask, 
    error: taskError
  } = useTaskManagement(selectedProjectId);
  
  // Handle and display errors from hooks
  useEffect(() => {
    if (sprintError) {
      setErrorMessage(`Sprint error: ${sprintError}`);
      setTimeout(() => setErrorMessage(""), 3000);
    }
  }, [sprintError]);
  
  useEffect(() => {
    if (taskError) {
      setErrorMessage(`Task error: ${taskError}`);
      setTimeout(() => setErrorMessage(""), 3000);
    }
  }, [taskError]);
  
  // Fetch project members
  useEffect(() => {
    if (!selectedProjectId) {
      setErrorMessage("No Project ID found. Please select a project.");
      return;
    }

    const loadMembers = async () => {
      try {
        setMembersLoading(true);
        console.log("üîÑ Fetching project members...");
        const projectMembers = await fetchProjectMembers(selectedProjectId);
        console.log("‚úÖ Members Loaded:", projectMembers);
        
        setMembers(projectMembers || []);
        setErrorMessage("");
      } catch (error) {
        console.error("‚ùå Error loading project members:", error);
        setErrorMessage(`Failed to load project members: ${error.message || "Unknown error"}`);
      } finally {
        setMembersLoading(false);
      }
    };

    loadMembers();
  }, [selectedProjectId]);

  const handleCreateTaskSubmit = async () => {
    // Check if all required fields are filled
    if (!description || !assigneeID || !sprintID) {
      setErrorMessage("All fields are required.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }
    
    try {
      setIsSubmitting(true);
      
      const taskData = {
        description,
        assigneeID,
        sprintID,
        projectID: selectedProjectId
      };
      
      const result = await handleCreateTask(taskData);
      
      if (result.success) {
        // Show success message and redirect
        console.log("‚úÖ Task created successfully!");
        
        // Redirect to backlog with success indicator (similar to CreateSprint)
        navigate(`/backlog?taskCreated=${encodeURIComponent(description.substring(0, 15))}`);
      } else {
        // Display error from result
        setErrorMessage(result.error || "Task creation failed");
        setTimeout(() => setErrorMessage(""), 3000);
      }
    } catch (error) {
      console.error("‚ùå Error in task creation:", error);
      setErrorMessage(error.message || "An unexpected error occurred");
      setTimeout(() => setErrorMessage(""), 3000);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Function to handle form submission via Enter key
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !isSubmitting) {
      handleCreateTaskSubmit();
    }
  };

  if (!selectedProjectId) {
    return (
      <div className="create-task-container">
        <div className="create-task-card">
          <div className="back-arrow" onClick={() => navigate("/backlog")}>
            <FontAwesomeIcon icon={faArrowRotateLeft} />
          </div>
          <h2>Error</h2>
          <p>No project selected. Please select a project first.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="create-task-container">
      {errorMessage && (
        <div className="error-popup">
          <FontAwesomeIcon icon={faExclamationTriangle} className="error-icon" />
          {errorMessage}
        </div>
      )}

      <div className="create-task-card">
        {/* Back Arrow */}
        <div className="back-arrow" onClick={() => navigate("/backlog")}>
          <FontAwesomeIcon icon={faArrowRotateLeft} />
        </div>
        
        <h2>Create Task</h2>

        <div className="form-group">
          <label htmlFor="task-description">Description:</label>
          <input
            id="task-description"
            type="text"
            placeholder="Enter Task Description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            onKeyDown={handleKeyDown}
            disabled={isSubmitting}
          />
        </div>

        <div className="form-group">
          <label htmlFor="task-assignee">Assignee:</label>
          {membersLoading ? (
            <div className="select-loading">
              <FontAwesomeIcon icon={faSpinner} spin /> Loading members...
            </div>
          ) : (
            <select 
              id="task-assignee"
              value={assigneeID} 
              onChange={(e) => setAssigneeID(e.target.value)}
              disabled={members.length === 0 || isSubmitting}
            >
              <option value="">Select Assignee</option>
              {members.map((member) => (
                <option key={member.id} value={member.id}>
                  {member.firstName} {member.lastName}
                </option>
              ))}
            </select>
          )}
          {members.length === 0 && !membersLoading && (
            <div className="helper-text">No team members available for this project</div>
          )}
        </div>

        <div className="form-group">
          <label htmlFor="task-sprint">Sprint:</label>
          {sprintsLoading ? (
            <div className="select-loading">
              <FontAwesomeIcon icon={faSpinner} spin /> Loading sprints...
            </div>
          ) : (
            <select 
              id="task-sprint"
              value={sprintID} 
              onChange={(e) => setSprintID(e.target.value)}
              disabled={sprintsLoading || sprints.length === 0 || isSubmitting}
            >
              <option value="">Select Sprint</option>
              {sprints.map((sprint) => (
                <option key={sprint.id} value={sprint.id}>
                  {sprint.name}
                </option>
              ))}
            </select>
          )}
          {sprints.length === 0 && !sprintsLoading && (
            <div className="helper-text">No sprints available for this project</div>
          )}
        </div>

        <button 
          className="create-task-btn" 
          onClick={handleCreateTaskSubmit}
          disabled={isSubmitting}
        >
          {isSubmitting ? (
            <>
              <FontAwesomeIcon icon={faSpinner} spin /> Creating...
            </>
          ) : (
            "Create Task"
          )}
        </button>
      </div>
    </div>
  );
};

export default CreateTask;

'''
'''--- src/components/EditSprint.js ---
import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { fetchSprintById, editSprint } from "../services/sprintService";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRotateLeft, faCalendarAlt, faPlay, faCheck, faSave } from "@fortawesome/free-solid-svg-icons";
import "../styles/create_sprint.css";
/**
 * EditSprint Component
 * 
 * Allows users to modify sprint metadata, including name, start/end dates, and status.
 * Supports lifecycle transitions such as starting or completing a sprint.
 * 
 * @returns {JSX.Element} Editable form for a single sprint
 * 
 * @param {string} sprintId - Sprint identifier retrieved from route parameters
 * 
 * @state sprintName - Current name of the sprint
 * @state startDate - Start date in ISO format (YYYY-MM-DD)
 * @state endDate - End date in ISO format (YYYY-MM-DD)
 * @state isStarted - Boolean indicating if the sprint has started
 * @state isCompleted - Boolean indicating if the sprint is completed
 * @state projectID - Associated project identifier
 * @state error - Message shown when operations fail
 * @state success - Message shown after successful operations
 * @state loading - Flag indicating loading state during data fetch
 * @state formModified - Tracks whether changes have been made to the form
 * 
 * @method handleUpdateSprint - Submits updated sprint details
 * @method handleStartSprint - Transitions the sprint to "started" state
 * @method handleCompleteSprint - Marks the sprint as complete and redirects to backlog
 * @method useEffect - Loads sprint data on component mount
 * @method getStatusText - Returns current sprint status as a user-friendly string
 */
const EditSprint = () => {
  const navigate = useNavigate();
  const { sprintId } = useParams();

  const [sprintName, setSprintName] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [isStarted, setIsStarted] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [projectID, setProjectID] = useState("");
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [success, setSuccess] = useState(null);
  const [formModified, setFormModified] = useState(false);

  useEffect(() => {
    const loadSprintDetails = async () => {
      try {
        const sprintData = await fetchSprintById(sprintId);
        setSprintName(sprintData.name);
        setStartDate(sprintData.startDate.split("T")[0]);
        setEndDate(sprintData.endDate.split("T")[0]);
        setIsStarted(sprintData.isStarted || false);
        setIsCompleted(sprintData.isCompleted || false);
        setProjectID(sprintData.projectID);
      } catch (err) {
        setError("Failed to load sprint details.");
      } finally {
        setLoading(false);
      }
    };

    loadSprintDetails();
  }, [sprintId]);

  // Track form changes
  const handleNameChange = (e) => {
    setSprintName(e.target.value);
    setFormModified(true);
  };

  const handleStartDateChange = (e) => {
    setStartDate(e.target.value);
    setFormModified(true);
  };

  const handleEndDateChange = (e) => {
    setEndDate(e.target.value);
    setFormModified(true);
  };

  const handleUpdateSprint = async () => {
    if (!sprintName || !startDate || !endDate || !projectID) {
      setError("All fields are required.");
      setTimeout(() => setError(null), 3000);
      return;
    }

    try {
      const updatedSprintData = {
        id: sprintId,
        name: sprintName,
        startDate,
        endDate,
        isStarted,
        isCompleted,
        projectID,
      };

      await editSprint(updatedSprintData);
      setSuccess("Details updated successfully!");
      setFormModified(false);
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err.message || "Failed to update sprint details.");
      setTimeout(() => setError(null), 3000);
    }
  };

  const handleStartSprint = async () => {
    try {
      const updatedSprintData = {
        id: sprintId,
        name: sprintName,
        startDate,
        endDate,
        isStarted: true,
        isCompleted: false,
        projectID,
      };

      await editSprint(updatedSprintData);
      setIsStarted(true);
      setIsCompleted(false);
      setFormModified(false);
      setSuccess("Sprint started successfully!");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err.message || "Failed to start sprint.");
      setTimeout(() => setError(null), 3000);
    }
  };

  const handleCompleteSprint = async () => {
    try {
      const updatedSprintData = {
        id: sprintId,
        name: sprintName,
        startDate,
        endDate,
        isStarted: false,
        isCompleted: true,
        projectID,
      };

      await editSprint(updatedSprintData);
      setIsStarted(false);
      setIsCompleted(true);
      setFormModified(false);
      setSuccess("Sprint completed successfully!");
      setTimeout(() => {
        navigate("/backlog");
      }, 1500);
    } catch (err) {
      setError(err.message || "Failed to complete sprint.");
      setTimeout(() => setError(null), 3000);
    }
  };

  // Get the current sprint status text
  const getStatusText = () => {
    if (isCompleted) return "Completed";
    if (isStarted) return "In Progress";
    return "Not Started";
  };

  return (
    <div className="create-sprint-page">
      <div className="create-sprint-container">
        <div className="card">
          <div className="back-arrow" onClick={() => navigate("/backlog")}>
            <FontAwesomeIcon icon={faArrowRotateLeft} />
          </div>

          <h2>Edit Sprint</h2>

          {loading ? (
            <p className="loading-message">Loading sprint details...</p>
          ) : (
            <>
              <input
                type="text"
                placeholder="Enter Sprint Name"
                value={sprintName}
                onChange={handleNameChange}
                disabled={isCompleted}
              />

              <div className="input-group">
                <label>
                  <FontAwesomeIcon icon={faCalendarAlt} className="calendar-icon" /> Start Date
                </label>
                <input
                  type="date"
                  value={startDate}
                  onChange={handleStartDateChange}
                  disabled={isStarted || isCompleted}
                />
              </div>

              <div className="input-group">
                <label>
                  <FontAwesomeIcon icon={faCalendarAlt} className="calendar-icon" /> End Date
                </label>
                <input
                  type="date"
                  value={endDate}
                  onChange={handleEndDateChange}
                  min={startDate}
                  disabled={isCompleted}
                />
              </div>

              <div className="sprint-status">
                <div className="status-indicator">
                  Status: {getStatusText()}
                </div>
              </div>

              <div className="button-group">
                {/* Only show save changes button if form was modified */}
                {formModified && (
                  <button
                    className="button-primary"
                    onClick={handleUpdateSprint}
                    disabled={isCompleted}
                  >
                    <FontAwesomeIcon icon={faSave} className="button-icon" />
                    Save Changes
                  </button>
                )}

                {/* Status change buttons */}
                {!isStarted && !isCompleted && (
                  <button
                    className="button-success"
                    onClick={handleStartSprint}
                  >
                    <FontAwesomeIcon icon={faPlay} className="button-icon" />
                    Start Sprint
                  </button>
                )}

                {/* Show Complete button if not completed */}
                {!isCompleted && (
                  <button
                    className="button-danger"
                    onClick={handleCompleteSprint}
                  >
                    <FontAwesomeIcon icon={faCheck} className="button-icon" />
                    Complete Sprint
                  </button>
                )}
              </div>
            </>
          )}

          {error && <div className="error-popup">{error}</div>}
          {success && <div className="success-popup">{success}</div>}
        </div>
      </div>
    </div>
  );
};

export default EditSprint;

'''
'''--- src/components/EditTask.js ---
import React, { useState, useEffect } from "react";
import { useNavigate, useParams, useLocation } from "react-router-dom";
import { fetchTaskById, editTask, fetchProjectMembers, fetchProjectSprints, getSelectedProject } from "../services/projectService";
import "../styles/create_task.css"; // Reuse styles from create task
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRotateLeft } from "@fortawesome/free-solid-svg-icons";
/**
 * EditTask Component
 * 
 * Renders a form to edit a task's description, assignee, and sprint.
 * Retrieves the task details, members, and sprints associated with the project.
 * 
 * @returns {JSX.Element} Edit Task form interface
 * 
 * @param {string} taskId - Task ID from route params
 * @param {string} previousPage - Fallback navigation target
 * @param {string|null} sprint - Sprint ID passed from previous navigation state
 * 
 * @state description - Task description
 * @state assigneeID - Selected assignee user ID
 * @state sprintID - Selected sprint ID
 * @state members - List of project members
 * @state sprints - List of project sprints
 * @state errorMessage - User-facing error message
 * @state loading - Flag to control initial loading state
 * 
 * @method handleUpdateTask - Submits the updated task fields to the server
 * @method useEffect - Loads task data, members, and sprints on mount
 */
const EditTask = () => {
  const navigate = useNavigate();
  const { taskId } = useParams(); // Get task ID from URL params
  const location = useLocation(); // Get previous page info
  
  // Get the previous page & sprint
  const previousPage = location.state?.from || "/backlog";
  const sprint = location.state?.sprint || null; // Get sprint if available

  const [description, setDescription] = useState("");
  const [assigneeID, setAssigneeID] = useState("");
  const [sprintID, setSprintID] = useState("");
  const [members, setMembers] = useState([]);
  const [sprints, setSprints] = useState([]);
  const [errorMessage, setErrorMessage] = useState("");
  const [loading, setLoading] = useState(true);

  // Get Project ID (from props or localStorage)
  const selectedProjectId = getSelectedProject();

  useEffect(() => {
    if (!selectedProjectId) {
      setErrorMessage("No Project ID found. Please select a project.");
      setLoading(false);
      return;
    }

    const loadTaskDetails = async () => {
      try {
        // Fetch task details
        const taskData = await fetchTaskById(taskId);
        setDescription(taskData.description);
        setAssigneeID(taskData.assigneeID);
        setSprintID(taskData.sprintID);

        // Fetch project members
        const projectMembers = await fetchProjectMembers(selectedProjectId);
        setMembers(projectMembers || []);

        // Fetch sprints
        const projectSprints = await fetchProjectSprints(selectedProjectId);
        setSprints(projectSprints || []);
      } catch (error) {
        setErrorMessage("Failed to load task details.");
      } finally {
        setLoading(false);
      }
    };

    loadTaskDetails();
  }, [taskId, selectedProjectId]);

  const handleUpdateTask = async () => {
    if (!description || !assigneeID || !sprintID) {
      setErrorMessage("All fields are required!");
      setTimeout(() => setErrorMessage(""), 2000);
      return;
    }

    try {
      const updatedTaskData = {
        id: taskId, // Required for updating
        description,
        assigneeID,
        sprintID,
      };

      await editTask(updatedTaskData);

      // Redirect back to previous page
      navigate(previousPage);
    } catch (error) {
      console.error("‚ùå Error updating task:", error);
      setErrorMessage("Task update failed.");
      setTimeout(() => setErrorMessage(""), 2000);
    }
  };

  return (
    <div className="create-task-container">
        
      {errorMessage && <div className="error-popup">{errorMessage}</div>}

      <div className="create-task-card">
         {/* Back Arrow (Goes back to previous page) */}
         <div className="back-arrow" onClick={() => {
          if (sprint) {
            navigate(previousPage, { state: { sprint } });
          } else {
            navigate(previousPage);
          }
        }}>
          <FontAwesomeIcon icon={faArrowRotateLeft} />
        </div>

        <h2>Edit Task</h2>

        {loading ? (
          <p className="loading-message">Loading task details...</p>
        ) : (
          <>
            <input
              type="text"
              placeholder="Enter Task Description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />

            <label>Assignee:</label>
            <select value={assigneeID} onChange={(e) => setAssigneeID(e.target.value)}>
              <option value="">Select Assignee</option>
              {members.map((member) => (
                <option key={member.id} value={member.id}>
                  {member.firstName} {member.lastName}
                </option>
              ))}
            </select>

            <label>Sprint:</label>
            <select value={sprintID} onChange={(e) => setSprintID(e.target.value)}>
              <option value="">Select Sprint</option>
              {sprints.map((sprint) => (
                <option key={sprint.id} value={sprint.id}>{sprint.name}</option>
              ))}
            </select>

            <button className="create-task-btn" onClick={handleUpdateTask}>
              Update Task
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default EditTask;

'''
'''--- src/components/Footer.js ---
import React from 'react';
import '../styles/footer.css'; 
//exports the footer for every page
const Footer = () => {
  return (
    <footer className="footer">
      <div className="footer-content">
        <p>
          &copy; 2024 <strong>DevHive</strong> | All Rights Reserved | Powered by <strong>React</strong>
        </p>
      </div>
    </footer>
  );
};

export default Footer;

'''
'''--- src/components/InputField.js ---
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';
//outdated component, use InputField.tsx
const InputField = ({ icon, type, name, placeholder, value, onChange, error, emailValidationStatus }) => {
  return (
    <div className="input-container">
      <div className="input">
        <img src={icon} alt="icon" />
        <input
          type={type}
          name={name}
          placeholder={placeholder}
          value={value}
          onChange={onChange}
        />
        {name === "email" && emailValidationStatus === "success" && (
          <FontAwesomeIcon
            icon={faCheckCircle}
            className="success-icon"
          />
        )}
        {name === "email" && emailValidationStatus === "error" && (
          <FontAwesomeIcon
            icon={faTimesCircle}
            className="error-icon"
          />
        )}
      </div>
      {error && <div className="error-message">{error}</div>}
    </div>
  );
};

export default InputField;

'''
'''--- src/components/InviteMembers.js ---
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRotateLeft } from "@fortawesome/free-solid-svg-icons";
import { getSelectedProject } from "../services/storageService";
import "../styles/invite_members.css";
import DevHiveLogo from "./assets/DevHiveLogo.png";
/**
 * InviteMembers Component
 * 
 * Displays the selected project ID as an invite code.
 * Allows users to copy the invite code to their clipboard.
 * Used for sharing with other users to join the project.
 */
const InviteMembers = () => {
  /**
   * useNavigate
   * 
   * Used to navigate back to the previous screen using the history stack
   */
  const navigate = useNavigate();
  /**
   * getSelectedProject
   * 
   * Retrieves the selected project ID (used as invite code) from localStorage
   */
  const inviteCode = getSelectedProject(); // Get project GUID from localStorage
  /**
   * useState - copied
   * 
   * copied: Tracks whether the invite code has been copied to clipboard
   */
  const [copied, setCopied] = useState(false);
  /**
   * handleCopy
   * 
   * Copies the invite code to clipboard and shows a temporary success message
   * 
   * @returns {void}
   */
  const handleCopy = () => {
    navigator.clipboard.writeText(inviteCode);
    setCopied(true);

    // Hide the message after 3 seconds
    setTimeout(() => {
      setCopied(false);
    }, 3000);
  };

  return (
    <div className="invite-members">
      <div className="invite-container">
        {/* Back Arrow */}
        <div className="back-arrow" onClick={() => navigate(-1)}>
          <FontAwesomeIcon icon={faArrowRotateLeft} />
        </div>

        {/* DevHive Logo */}
        <div className="logo">
          <img src={DevHiveLogo} alt="DevHive Logo" />
        </div>

        {/* Invite Code Section */}
        <h2>Invite Code</h2>
        <p>Share with new members</p>

        <input
          type="text"
          value={inviteCode || "No Invite Code Available"}
          readOnly
          className="invite-code"
        />

        <button className="copy-button" onClick={handleCopy}>
          Copy Code
        </button>

        {/* Copy Success Message */}
        {copied && <div className="copy-message">Copied to clipboard! ‚úÖ</div>}
      </div>
    </div>
  );
};

export default InviteMembers;

'''
'''--- src/components/JoinProject.js ---
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRotateLeft } from "@fortawesome/free-solid-svg-icons";
import { joinProject, fetchProjectById, getUserId } from "../services/projectService";
import "../styles/join_project.css";
/**
 * JoinProject Component
 * 
 * Allows authenticated users to join an existing project using a unique project code.
 * Handles validation, API communication, navigation, and error/status feedback.
 * 
 * @returns {JSX.Element} Rendered form for joining a project
 */
const JoinProject = () => {
  /**
   * useNavigate
   * 
   * Provides client-side navigation to switch between routes
   */
  const navigate = useNavigate();
  const userId = getUserId();
  /**
   * useState - projectCode, status, error
   * 
   * projectCode: stores the input value of the join code
   * status: stores informational messages (e.g., "Joining project...")
   * error: stores error messages from failed validations or API calls
   */
  const [projectCode, setProjectCode] = useState("");
  const [status, setStatus] = useState("");
  const [error, setError] = useState("");
  /**
   * handleProjectCodeChange
   * 
   * Updates the local state as the user types the project code
   * 
   * @param {React.ChangeEvent<HTMLInputElement>} e - Input event
   */
  const handleProjectCodeChange = (e) => {
    setProjectCode(e.target.value);
  };
  /**
   * handleJoin
   * 
   * Validates input, checks if the project exists, and attempts to join the project
   * Displays success or error messages based on result
   * 
   * @async
   * @returns {Promise<void>}
   */
  const handleJoin = async () => {
    if (!projectCode) {
      setError("Please enter the project code.");
      return;
    }

    try {
      setStatus("Validating project code...");
      setError("");

      const projectData = await fetchProjectById(projectCode);
      if (!projectData) throw new Error("Invalid project code.");

      setStatus("Joining project...");
      await joinProject(projectCode, userId);

      setStatus("Successfully joined the project!");
      setTimeout(() => navigate("/projects"), 1500);
    } catch (err) {
      setError("Invalid project code or failed to join the project.");
      setStatus("");
    }
  };
  /**
   * handleBack
   * 
   * Navigates back to the main project list
   */
  const handleBack = () => {
    navigate("/projects");
  };

  return (
    <div className="join-project-page">
      <div className="join-project-container">
        <div className="join-project-card">
          {/* Back Arrow */}
          <div className="back-arrow" onClick={handleBack}>
            <FontAwesomeIcon icon={faArrowRotateLeft} />
          </div>

          {/* Title */}
          <h1 className="join-project-title">Join Project</h1>

          {/* Subtitle */}
          <p className="join-project-subtitle">Enter the project code to join</p>

          {/* Input Field */}
          <input
            type="text"
            value={projectCode}
            onChange={handleProjectCodeChange}
            placeholder="Enter Project Code"
            className="project-code-input"
          />

          {/* Join Button */}
          <button className="join-btn" onClick={handleJoin}>
            Join
          </button>

          {/* Status and Error Messages */}
          {status && <p className="status">{status}</p>}
          {error && <p className="error">{error}</p>}
        </div>
      </div>
    </div>
  );
};

export default JoinProject;

'''
'''--- src/components/LoginRegister.js ---
import React, { useMemo } from 'react';
import { useNavigate } from "react-router-dom";
import "../styles/login_register.css";
import DevHiveLogo from "./assets/DevHiveLogo.png"; // Import your logo
import email_icon from "./assets/email.png";
import password_icon from "./assets/password.png";
import user_icon from "./assets/person.png";
import useLoginRegister from "../hooks/useLoginRegister";
import InputField from "./InputField";
import SubmitButton from "./SubmitButton";
//This is the outdated component of LoginRegister.JSX

//this component will be used to render both the login and register pages dynamically by using our useLoginRegister hook
const LoginRegister = () => {
  const navigate = useNavigate(); 
  const {
    action,
    credentials,
    validationErrors,
    error,
    success,
    loading,
    handleChange,
    handleButtonClick,
    emailValidationStatus, // Get the new state variable
  } = useLoginRegister();

  const memoizedEmailValidationStatus = useMemo(() => emailValidationStatus, [emailValidationStatus]);

  console.log("memoizedEmailValidationStatus:", memoizedEmailValidationStatus);

  return (
    <div className="background">
      {/* Logo Section */}
      <div className="logo-container">
        <img src={DevHiveLogo} alt="DevHive Logo" className="devhive-logo" />
        <h1 className="logo-text">DevHive</h1>
      </div>

      {/* Form Section */}
      <div className="container">
        <div className="header">
          <div className="text">{action === "Login" ? "Welcome Back" : "Sign Up"}</div>
          <div className="underline"></div>
        </div>
        {/* Input Fields */}
        <div className="inputs">
          {action === "Sign Up" && (
            <>
              <InputField
                icon={user_icon}
                type="text"
                name="firstName"
                placeholder="First Name"
                value={credentials.firstName}
                onChange={handleChange}
                error={validationErrors.firstName}
              />
              <InputField
                icon={user_icon}
                type="text"
                name="lastName"
                placeholder="Last Name"
                value={credentials.lastName}
                onChange={handleChange}
                error={validationErrors.lastName}
              />
              <InputField
                icon={email_icon}
                type="email"
                name="email"
                placeholder="Email"
                value={credentials.email}
                onChange={handleChange}
                error={validationErrors.email}
                emailValidationStatus={memoizedEmailValidationStatus} // Pass the memoized value
              />
            </>
          )}
          <InputField
            icon={user_icon}
            type="text"
            name="username"
            placeholder="Username"
            value={credentials.username}
            onChange={handleChange}
            error={validationErrors.username}
          />
          <InputField
            icon={password_icon}
            type="password"
            name="password"
            placeholder="Password"
            value={credentials.password}
            onChange={handleChange}
            error={validationErrors.password}
          />
          {action === "Sign Up" && (
            <InputField
              icon={password_icon}
              type="password"
              name="confirmPassword"
              placeholder="Confirm Password"
              value={credentials.confirmPassword}
              onChange={handleChange}
              error={validationErrors.confirmPassword}
            />
          )}
        </div>

        {action === "Login" && (
          <div className="forgot-password">
            <span onClick={() => navigate("/forgot-password")}>Forgot Password?</span>
          </div>
        )}

        {error && <p className="error">{error}</p>}
        {success && <p className="success">{action} successful!</p>}

        <div className="submit-container">
          <SubmitButton
            label="Sign Up"
            isActive={action === "Sign Up"}
            onClick={() => handleButtonClick("Sign Up")}
            disabled={loading}
          />
          <SubmitButton
            label="Login"
            isActive={action === "Login"}
            onClick={() => handleButtonClick("Login")}
            disabled={loading}
          />
        </div>
        {loading && <div className="loading-spinner">Loading...</div>}
      </div>
    </div>
  );
};

export default LoginRegister;

'''
'''--- src/components/Message.js ---
import React, { useState, useEffect, useRef } from "react";
import { useParams } from "react-router-dom";
import { fetchUserById } from "../services/userService.ts";
import { getUserId } from "../services/authService.ts";
import { fetchMessages, sendMessage, subscribeToMessageStream } from "../services/messageService";
import "../styles/message.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faComments, faPaperPlane, faSpinner } from "@fortawesome/free-solid-svg-icons";
/**
 * Message Component
 * 
 * Handles peer-to-peer messaging within a project context.
 * Supports real-time message updates via WebSocket and optimistic UI updates.
 * 
 * @returns {JSX.Element} Rendered chat interface
 */
const Message = () => {
  /**
   * useParams
   * 
   * Extracts `userId` and `projectId` from route parameters for context-aware messaging
   */
  const { userId: toUserID, projectId: projectID } = useParams();
  const [user, setUser] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [sending, setSending] = useState(false);
  const [error, setError] = useState(null);
  const loggedInUserId = getUserId();
  const messagesEndRef = useRef(null);
  const socketRef = useRef(null);
  const messagePollingRef = useRef(null);

  /**
   * formatMessageTime
   * 
   * Converts various datetime formats (Firestore, ISO string, Date) into a human-readable string
   * Used for displaying message timestamps
   * 
   * @param {Date | string | object} dateTime - The original timestamp value
   * @returns {string} Formatted timestamp
   */
  const formatMessageTime = (dateTime) => {
    // First ensure we're working with a valid date
    let date;
    
    if (dateTime instanceof Date) {
      date = dateTime;
    } else if (typeof dateTime === 'object' && dateTime.seconds) {
      // Firestore Timestamp format
      date = new Date(dateTime.seconds * 1000 + (dateTime.nanoseconds || 0) / 1000000);
    } else if (typeof dateTime === 'string') {
      date = new Date(dateTime);
    } else {
      // Fallback to current time
      return "Just now";
    }
    
    if (isNaN(date.getTime())) {
      console.warn("‚ö†Ô∏è Invalid date:", dateTime);
      return "Just now";
    }
    
    const now = new Date();
    const isToday = date.toDateString() === now.toDateString();
    
    // For messages from today, just show the time
    if (isToday) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    // For older messages, show date and time
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  /**
   * useEffect - Load Recipient User
   * 
   * Fetches recipient user data using the provided user ID when component mounts
   * 
   * @dependencies [toUserID]
   */
  useEffect(() => {
    const loadUser = async () => {
      try {
        const userData = await fetchUserById(toUserID);
        setUser(userData);
      } catch (error) {
        console.error("‚ùå Error fetching user:", error);
      }
    };

    loadUser();
  }, [toUserID]);

  /**
   * useEffect - Initial Message Load and Real-Time Subscription
   * 
   * Fetches initial message history and subscribes to new messages via WebSocket.
   * Also sets up a fallback polling interval every 10 seconds.
   * 
   * @dependencies [loggedInUserId, toUserID, projectID]
   */
  useEffect(() => {
    // Clear any existing polling interval
    if (messagePollingRef.current) {
      clearInterval(messagePollingRef.current);
    }

    const loadMessages = async () => {
      try {
        console.log("üîÑ Fetching messages between users:", loggedInUserId, toUserID);
        const fetchedMessages = await fetchMessages(loggedInUserId, toUserID, projectID);
        console.log("‚úÖ Fetched messages:", fetchedMessages.length);
        setMessages(fetchedMessages);
      } catch (error) {
        console.error("‚ùå Error fetching messages:", error);
        setError("Failed to load messages. Please try again.");
      }
    };

    loadMessages();

    // Set up polling as a backup in case WebSocket fails
    messagePollingRef.current = setInterval(() => {
      loadMessages();
    }, 10000); // Poll every 10 seconds

    // Set up WebSocket
    socketRef.current = subscribeToMessageStream(loggedInUserId, projectID, (newMsg) => {
      console.log("üì• Received WebSocket message:", newMsg);
      // Only add the message if it's relevant to this conversation
      if ((newMsg.fromUserID === loggedInUserId && newMsg.toUserID === toUserID) || 
          (newMsg.fromUserID === toUserID && newMsg.toUserID === loggedInUserId)) {
        setMessages(prevMessages => {
          // Check if message already exists to avoid duplicates
          const msgExists = prevMessages.some(m => 
            m.id === newMsg.id || 
            (m.dateCreated === newMsg.dateCreated && m.message === newMsg.message)
          );
          
          if (msgExists) {
            return prevMessages;
          }
          return [...prevMessages, newMsg];
        });
      }
    });

    return () => {
      if (socketRef.current) socketRef.current.close();
      if (messagePollingRef.current) clearInterval(messagePollingRef.current);
    };
  }, [loggedInUserId, toUserID, projectID]);

  /**
   * useEffect - Auto Scroll on Message Update
   * 
   * Automatically scrolls to the bottom of the message list when a new message arrives
   * 
   * @dependencies [messages]
   */
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  /**
   * handleSendMessage
   * 
   * Sends a message using optimistic UI updates.
   * Displays a pending message in the UI until the backend confirms receipt.
   * 
   * @returns {Promise<void>}
   */
  const handleSendMessage = async () => {
    const trimmedMessage = newMessage.trim();
    if (!trimmedMessage || sending) return;

    // Create message object
    const messageData = {
      message: trimmedMessage,
      fromUserID: loggedInUserId,
      toUserID,
      projectID,
    };

    // Create temporary message for optimistic update
    const tempId = `temp-${Date.now()}`;
    const now = new Date();
    const tempMessage = {
      id: tempId,
      message: trimmedMessage,
      Message: trimmedMessage,
      fromUserID: loggedInUserId,
      toUserID,
      projectID,
      DateSent: now, // Use consistent date object format
      pending: true
    };

    // Optimistically add message to UI
    setMessages(prevMessages => [...prevMessages, tempMessage]);
    setNewMessage("");
    setError(null);
    setSending(true);

    try {
      // Send message to API
      await sendMessage(messageData);
      console.log("‚úÖ Message sent successfully");
      
      // Replace the temporary message with the real one from server
      const updatedMessages = await fetchMessages(loggedInUserId, toUserID, projectID);
      
      setMessages(updatedMessages);
    } catch (error) {
      console.error("‚ùå Error sending message:", error);
      
      // Show error and remove pending status from temp message
      setError("Failed to send message. Please try again.");
      setMessages(prevMessages => 
        prevMessages.map(msg => 
          msg.id === tempId 
            ? { ...msg, pending: false, failed: true } 
            : msg
        )
      );
    } finally {
      setSending(false);
    }
  };

  /**
   * handleRetry
   * 
   * Allows retrying failed messages by restoring their text into the input field
   * 
   * @param {Object} failedMsg - The message object that failed to send
   * @returns {void}
   */
  const handleRetry = async (failedMsg) => {
    // Remove the failed message
    setMessages(prevMessages => prevMessages.filter(msg => msg.id !== failedMsg.id));
    
    // Reset the message input
    setNewMessage(failedMsg.message || failedMsg.Message);
    
    // Clear error
    setError(null);
  };

  return (
    <div className="message-page">
      <div className="chat-container">
        <h2 className="chat-header">
          <FontAwesomeIcon icon={faComments} /> Chat with {user?.firstName} {user?.lastName}
        </h2>

        <div className="messages-container">
          {error && <div className="error-message">{error}</div>}
          
          {messages.length > 0 ? (
            messages.map((msg, index) => {
              const isSender = msg.fromUserID === loggedInUserId;
              const isPending = !!msg.pending;
              const hasFailed = !!msg.failed;
              
              return (
                <div
                  key={msg.id || index}
                  className={`message-wrapper ${isSender ? "sent-wrapper" : "received-wrapper"}`}
                >
                  <div className={`message ${isSender ? "sent" : "received"} ${isPending ? "pending" : ""} ${hasFailed ? "failed" : ""}`}>
                    <p className="message-text">{msg.message || msg.Message}</p>
                    <div className="message-meta">
                      {isPending && (
                        <span className="message-status">
                          <FontAwesomeIcon icon={faSpinner} spin /> Sending...
                        </span>
                      )}
                      {hasFailed && (
                        <span className="message-status failed" onClick={() => handleRetry(msg)}>
                          Failed to send. Click to retry.
                        </span>
                      )}
                      <span className="message-time">
                        {msg.DateSent ? formatMessageTime(msg.DateSent instanceof Date ? msg.DateSent : new Date(msg.DateSent)) : "Just now"}
                      </span>
                    </div>
                  </div>
                </div>
              );
            })
          ) : (
            <p className="no-messages">No messages yet.</p>
          )}
          <div ref={messagesEndRef} />
        </div>

        <div className="message-input">
          <input
            type="text"
            className="form-control"
            placeholder="Type a message..."
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
            disabled={sending}
          />
          <button 
            className={`btn btn-primary ${sending ? "sending" : ""}`} 
            onClick={handleSendMessage}
            disabled={sending || !newMessage.trim()}
          >
            {sending ? (
              <>Sending <FontAwesomeIcon icon={faSpinner} spin /></>
            ) : (
              <>Send <FontAwesomeIcon icon={faPaperPlane} /></>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default Message;

'''
'''--- src/components/Navbar.js ---
import React, { useEffect } from "react"; 
import { useNavigate } from 'react-router-dom';
import "../styles/navbar.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faTableColumns, faListCheck, faAddressBook, faUser } from "@fortawesome/free-solid-svg-icons";
import { ReactComponent as HiveIcon } from "./assets/hive-icon.svg";
/**
 * Navbar Component
 * 
 * Renders a responsive navigation bar that adapts between a sidebar layout on desktop
 * and a topbar layout on mobile devices. Includes navigation to main sections of the app.
 * 
 * @component
 * @returns {JSX.Element} Rendered navigation bar
 */
const Navbar = () => {
  const navigate = useNavigate();
  const [isMobile, setIsMobile] = React.useState(window.innerWidth <= 600);
  /**
   * useEffect - Window Resize Listener
   * 
   * Adds an event listener to monitor window resizing and updates `isMobile` state
   * to trigger layout switch between sidebar and topbar
   * 
   * @dependencies []
   */
  useEffect(() => {
    const handleResize = () => {
      const mobile = window.innerWidth <= 600;
      setIsMobile(mobile);
    };
    
    window.addEventListener("resize", handleResize);
    
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  const navItems = [
    { path: "/board", icon: faTableColumns, label: "Board" },
    { path: "/backlog", icon: faListCheck, label: "Backlog" },
    { path: "/contacts", icon: faAddressBook, label: "Contacts" },
    { path: "/account-details", icon: faUser, label: "Account" },
  ];

  return (
    <div className="navbar-wrapper">
      <nav className={`navbar ${isMobile ? 'topbar-mode' : 'sidebar-mode'}`}>
        <div className="navbar-content">
          <div 
            className={`logo-container ${isMobile ? 'mobile-logo' : ''}`} 
            onClick={() => navigate("/projects")}
          >
            <HiveIcon className="logo" />
            {!isMobile && <span className="logo-text">DevHive</span>}
          </div>
          <ul className="navbar-nav">
            {navItems.map((item, index) => (
              <li key={index} className="nav-item">
                <a href={item.path} className="nav-link">
                  <FontAwesomeIcon icon={item.icon} className="nav-icon" />
                  <span className="link-text">{item.label}</span>
                </a>
              </li>
            ))}
          </ul>
        </div>
      </nav>
    </div>
  );
};

export default Navbar;

'''
'''--- src/components/ProjectDetails.js ---
import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPenToSquare, faCrown, faRightFromBracket, faTimes, faCheck } from "@fortawesome/free-solid-svg-icons";
import { useProject } from "../hooks/useProject";
import { useProjectMembers } from "../hooks/useProjectMembers";
import { getSelectedProject, setSelectedProject } from "../services/storageService";
import { editProject } from "../services/projectService";
import "../styles/project_details.css";
/**
 * ProjectDetails Component
 * 
 * Displays detailed information about a specific project, including project name, description,
 * and members. Allows the project owner to edit project details, invite new members, and remove existing ones.
 * 
 * @component
 * @returns {JSX.Element} Rendered project details page
 */
const ProjectDetails = () => {
  /**
   * useParams
   * 
   * Extracts the `projectId` from the route parameters if provided via URL
   */
  const { projectId } = useParams();
  const navigate = useNavigate();
  const storedProjectId = getSelectedProject();
  const finalProjectId = projectId || storedProjectId;
  /**
   * useEffect - On mount
   * 
   * Ensures the selected project ID is stored for global access via `setSelectedProject`
   * 
   * @dependencies [finalProjectId]
   */
  useEffect(() => {
    if (finalProjectId) {
      setSelectedProject(finalProjectId);
    }
    return () => {
      // Optional: Clear selected project on unmount
      // setSelectedProject(null);
    };
  }, [finalProjectId]);
  /**
   * useProject
   * 
   * Fetches and manages the state of the current project's data
   */
  const { project, loading: projectLoading, error: projectError, refreshProject } = useProject(finalProjectId);
    /**
   * useProjectMembers
   * 
   * Fetches and manages the list of members in the current project, including
   * logic to determine if the logged-in user is the project owner
   */
  const { members, loading: membersLoading, error: membersError, isCurrentUserOwner, kickMember } = useProjectMembers(
    finalProjectId,
    project?.projectOwnerID
  );

  const [isEditing, setIsEditing] = useState(false);
  const [editedName, setEditedName] = useState("");
  const [editedDescription, setEditedDescription] = useState("");
  const [kickMemberId, setKickMemberId] = useState(null);
  const [showKickModal, setShowKickModal] = useState(false);

  const loggedInUserId = localStorage.getItem("userId");
  /**
   * handleEditProject
   * 
   * Initializes edit mode and sets temporary state for project name and description
   */
  const handleEditProject = () => {
    setIsEditing(true);
    setEditedName(project.name);
    setEditedDescription(project.description);
  };
  /**
   * handleCancelEdit
   * 
   * Cancels edit mode and resets temporary name and description fields
   */
  const handleCancelEdit = () => {
    setIsEditing(false);
    setEditedName(project.name);
    setEditedDescription(project.description);
  };
  /**
   * handleSaveEdit
   * 
   * Validates and submits project updates to the backend, then refreshes project data
   */
  const handleSaveEdit = async () => {
    if (!project) return;

    try {
      await editProject({
        id: project.id,
        name: editedName,
        description: editedDescription,
        projectOwnerID: project.projectOwnerID,
      });

      await refreshProject();
      setIsEditing(false);
    } catch (error) {
      console.error("‚ùå Failed to update project:", error.message);
    }
  };
  /**
   * handleKickMember
   * 
   * Triggers the display of a modal to confirm the removal of a project member
   */
  const handleKickMember = (memberId) => {
    setKickMemberId(memberId);
    setShowKickModal(true);
  };
  /**
   * confirmKickMember
   * 
   * Executes the member removal and updates the member list
   */
  const confirmKickMember = async () => {
    if (!kickMemberId || !finalProjectId) return;

    try {
      await kickMember(kickMemberId);
      setKickMemberId(null);
      setShowKickModal(false);
    } catch (error) {
      console.error(`‚ùå Failed to remove user ${kickMemberId}:`, error.message);
    }
  };
  /**
   * cancelKickMember
   * 
   * Cancels the kick operation and hides the confirmation modal
   */
  const cancelKickMember = () => {
    setShowKickModal(false);
    setKickMemberId(null);
  };

  if (projectLoading || membersLoading) return <p>Loading project details...</p>;

  return (
    <div className="project-details">
      <div className="edit-buttons">
        {project?.projectOwnerID === loggedInUserId && isEditing ? (
          <>
            <button className="save-btn" onClick={handleSaveEdit}>
              <FontAwesomeIcon icon={faCheck} />
            </button>
            <button className="cancel-btn" onClick={handleCancelEdit}>
              <FontAwesomeIcon icon={faTimes} />
            </button>
          </>
        ) : (
          project?.projectOwnerID === loggedInUserId && (
            <button className="edit-project-btn" onClick={handleEditProject}>
              <FontAwesomeIcon icon={faPenToSquare} />
            </button>
          )
        )}
      </div>

      {!projectError && project && (
        <>
          {isEditing ? (
            <>
              {/* Project Name Input with Counter */}
              <div className="input-container">
                <input
                  className="edit-title"
                  type="text"
                  value={editedName}
                  onChange={(e) => setEditedName(e.target.value)}
                  maxLength={50}
                  placeholder="Enter project name"
                />
                <span className="char-counter">{editedName.length} / 50</span>
              </div>

              {/* Project Description Input with Counter */}
              <div className="input-container">
                <textarea
                  className="edit-description"
                  value={editedDescription}
                  onChange={(e) => setEditedDescription(e.target.value)}
                  maxLength={255}
                  placeholder="Enter project description"
                />
                <span className="char-counter">{editedDescription.length} / 255</span>
              </div>
            </>
          ) : (
            <>
              <h1 className="project-title">{project.name}</h1>
              <div className="project-description">{project.description}</div>
            </>
          )}

          <button className="invite-btn" onClick={() => navigate(`/invite`)}>
            Invite Members
          </button>
        </>
      )}

      <div className="members-section">
        <h3>Members</h3>
        {membersError ? (
          <p className="error">{membersError}</p>
        ) : (
          <ul>
            {members.map((member) => (
              <li key={member.id} className={`member-item ${member.isOwner ? "owner" : ""}`}>
                <div className="member-info">
                  <span className="member-name">
                    {member.isOwner && <FontAwesomeIcon icon={faCrown} className="crown" />}
                    {member.name}
                  </span>
                </div>
                <div className="member-actions">
                  {isEditing && !member.isOwner && isCurrentUserOwner && (
                    <FontAwesomeIcon
                      icon={faRightFromBracket}
                      className="kick-member"
                      onClick={() => handleKickMember(member.id)}
                    />
                  )}
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>

      {showKickModal && (
        <div className="modal-overlay active">
          <div className="modal">
            <h3>Confirm Removal</h3>
            <p>Are you sure you want to remove this member?</p>
            <div className="modal-actions">
              <button className="confirm-btn" onClick={confirmKickMember}>
                <FontAwesomeIcon icon={faCheck} />
              </button>
              <button className="project-details__cancel-btn" onClick={cancelKickMember}>
                <FontAwesomeIcon icon={faTimes} />
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProjectDetails;

'''
'''--- src/components/Projects.js ---
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPenToSquare, faXmark, faTrash } from "@fortawesome/free-solid-svg-icons";
import { useProjects } from "../hooks/useProjects";
import { setSelectedProject } from "../services/storageService";
import "../styles/projects.css";
/**
 * Projects Page Component
 * 
 * Displays a list of projects for the authenticated user, and provides actions 
 * for selecting, editing, and deleting projects. Includes navigation to create, 
 * join, or manage account settings.
 * 
 * @component
 * @returns {JSX.Element} The rendered component
 */
const Projects = () => {
  const [userId, setUserId] = useState(null);
  const [editingProjectId, setEditingProjectId] = useState(null);
  const [deleteProjectId, setDeleteProjectId] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);

  const navigate = useNavigate();
  /**
   * useEffect Hook
   * 
   * Retrieves user ID from localStorage on initial mount. If no user is found, 
   * redirects to the login page.
   * 
   * @dependencies [navigate, userId]
   */
  useEffect(() => {
    const storedUserId = localStorage.getItem("userId");

    if (storedUserId && storedUserId !== userId) {
      setUserId(storedUserId);
    } else if (!storedUserId) {
      navigate("/");
    }
  }, [navigate, userId]);

  const { projects, loading, deleteProject } = useProjects(userId);
  /**
   * handleProjectSelection
   * 
   * @param {Event} e - Click event
   * @param {string} projectId - ID of the selected project
   * Navigates to the project details page and stores the project ID
   */
  const handleProjectSelection = (e, projectId) => {
    if (editingProjectId) return;
    if (e.target.closest(".project-actions")) return;

    setSelectedProject(projectId);
    navigate(`/project-details`);
  };
  /**
   * handleDeleteProject
   * 
   * @param {string} projectId - ID of the project to delete
   * Sets the deleteProjectId and opens the confirmation modal
   */
  const handleDeleteProject = (projectId) => {
    setDeleteProjectId(projectId);
    setShowDeleteModal(true);
  };
  /**
   * confirmDeleteProject
   * 
   * Confirms and deletes the selected project. Refreshes list on success
   */
  const confirmDeleteProject = async () => {
    if (!deleteProjectId) return;

    try {
      console.log(`üóëÔ∏è Confirming deletion of project: ${deleteProjectId}`);
      await deleteProject(deleteProjectId);
      setShowDeleteModal(false);
      setDeleteProjectId(null);
    } catch (error) {
      console.error(`‚ùå Failed to delete project:`, error.message);
    }
  };
  /**
   * cancelDeleteProject
   * 
   * Cancels the delete operation and closes the modal
   */
  const cancelDeleteProject = () => {
    setShowDeleteModal(false);
    setDeleteProjectId(null);
  };
  /**
   * toggleEditMode
   * 
   * @param {string} projectId - ID of the project to edit
   * Toggles edit mode for a specific project
   */
  const toggleEditMode = (projectId) => {
    setEditingProjectId(editingProjectId === projectId ? null : projectId);
  };

  if (loading) return <p className="loading">Loading projects...</p>;

  return (
    <div className="projects-page">
      <div className="projects-container">
        <div className="header">
          <h1>Welcome to DevHive</h1>
          <p>Your Projects:</p>
        </div>

        <div className="projects-list">
          {projects.length > 0 ? (
            projects.map((project) => (
              <ProjectCard
                key={project.id}
                project={project}
                isEditing={editingProjectId === project.id}
                onSelect={handleProjectSelection}
                onEdit={toggleEditMode}
                onDelete={handleDeleteProject}
                loggedInUserId={userId} // Pass user ID to ProjectCard
              />
            ))
          ) : (
            <p>No projects available.</p>
          )}
        </div>

        {/* Action Buttons */}
        <div className="actions">
          <button className="action-btn create-btn" onClick={() => navigate("/create-project")}>
            Create a Project
          </button>
          <button className="action-btn join-btn" onClick={() => navigate("/join-group")}>
            Join a Group
          </button>
          <button className="action-btn account-btn" onClick={() => navigate("/account-details")}>
            Account Details
          </button>
        </div>

        {/* Delete Confirmation Modal */}
        {showDeleteModal && (
          <div className="modal-overlay active">
            <div className="modal">
              <h3>Confirm Deletion</h3>
              <p>Are you sure you want to remove this project?</p>
              <div className="modal-actions">
                <button className="confirm-btn" onClick={confirmDeleteProject}>
                  <FontAwesomeIcon icon={faTrash} />
                </button>
                <button className="cancel-btn" onClick={cancelDeleteProject}>
                  <FontAwesomeIcon icon={faXmark} />
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

/**
 * ProjectCard Component
 * 
 * Displays project information with conditional actions for editing and deleting
 * 
 * @param {Object} props
 * @param {Object} props.project - Project data
 * @param {boolean} props.isEditing - Whether the project is in edit mode
 * @param {Function} props.onSelect - Callback for selecting a project
 * @param {Function} props.onEdit - Callback for toggling edit mode
 * @param {Function} props.onDelete - Callback for deleting a project
 * @param {string} props.loggedInUserId - ID of the currently authenticated user
 * 
 * @returns {JSX.Element} A single project card
 */
const ProjectCard = ({ project, isEditing, onSelect, onEdit, onDelete, loggedInUserId }) => (
  <div
    className={`project-card ${isEditing ? "editing" : ""}`}
    tabIndex="0"
    role="button"
    aria-label={`View project ${project.name}`}
    onClick={(e) => onSelect(e, project.id)}
    onKeyPress={(e) => e.key === "Enter" && onSelect(e, project.id)}
  >
    <h3>{project.name}</h3>
    <p>{project.description}</p>

    {/* Delete button is only visible to project owners */}
    <div className="project-actions">
      {project.projectOwnerID === loggedInUserId && isEditing && (
        <button
          className="delete-btn"
          onClick={(e) => {
            e.stopPropagation();
            onDelete(project.id);
          }}
        >
          <FontAwesomeIcon icon={faTrash} />
        </button>
      )}

      {/* Edit button is only visible to project owners */}
      {project.projectOwnerID === loggedInUserId && (
        <button
          className="edit-btn"
          onClick={(e) => {
            e.stopPropagation();
            onEdit(project.id);
          }}
        >
          <FontAwesomeIcon icon={isEditing ? faXmark : faPenToSquare} />
        </button>
      )}
    </div>
  </div>
);

export default Projects;

'''
'''--- src/components/ProtectedRoute.js ---
import React, { useEffect } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import useAuth from '../hooks/useAuth';
import useRoutePermission from '../hooks/useRoutePermission';

/**
 * ProtectedRoute
 * 
 * React component that guards routes based on authentication and project selection
 * 
 * @param {React.ReactNode} children - Components to render if access is allowed
 * @returns {JSX.Element} Redirect to login or projects if access is denied
 * 
 * @behavior 
 * - Uses useAuth() to check if user is authenticated
 * - Uses useRoutePermission() to check if route is accessible based on project context
 * - Logs route evaluation and redirects when necessary
 * - Preserves original navigation intent using state object when redirecting
 */
const ProtectedRoute = ({ children }) => {
  const location = useLocation();
  const { isAuthenticated } = useAuth();
  const { isRouteAllowed } = useRoutePermission();
  
  // Debug logging
  useEffect(() => {
    console.log("ProtectedRoute - Current path:", location.pathname);
    console.log("ProtectedRoute - isAuthenticated:", isAuthenticated);
    console.log("ProtectedRoute - isRouteAllowed:", isRouteAllowed);
  }, [location.pathname, isAuthenticated, isRouteAllowed]);

  // If not authenticated, redirect to login
  if (!isAuthenticated) {
    console.log("üö´ Not authenticated, redirecting to login from:", location.pathname);
    return <Navigate to="/" state={{ from: location.pathname }} replace />;
  }

  // If authenticated but route not allowed (project required), redirect to projects
  if (!isRouteAllowed) {
    console.log("üîí Route not allowed, redirecting to projects from:", location.pathname);
    return <Navigate to="/projects" replace />;
  }

  // If authenticated and route allowed, render children
  console.log("‚úÖ Access granted to:", location.pathname);
  return children;
};

export default ProtectedRoute;

'''
'''--- src/components/Sprint.js ---
import React from 'react';

const Sprint = () => {
  return (
    <div>
      <h1>Welcome to the Sprint page</h1>
    </div>
  );
};

export default Sprint;

'''
'''--- src/components/SubmitButton.js ---
// Reusable button component for form actions
const SubmitButton = ({ label, isActive, onClick }) => (
    <div
      className={isActive ? "submit" : "submit gray"} //toggle for login and register
      onClick={onClick} // Event handler
    >
      {label} {/* Button label */}
    </div>
  );
  
  export default SubmitButton;
  
'''
'''--- src/config.js ---
//config.js
export const API_BASE_URL = "https://api.devhive.it.com/api"; // Use HTTPS for all API calls
//export const API_BASE_URL = "http://18.119.104.29:5000/api"; // For production

// Add JWT config
export const JWT_CONFIG = {
  issuer: "https://api.devhive.it.com",
  audience: "https://d35scdhidypl44.cloudfront.net/",  // Your frontend domain
  audience: "devhive-clients"  // Your frontend domain
};

export const ENDPOINTS = {
  USER: `${API_BASE_URL}/User`,
  PROJECT: `${API_BASE_URL}/Scrum/Project`,
  VALIDATE_EMAIL: `${API_BASE_URL}/User/ValidateEmail`,
  SPRINT: `${API_BASE_URL}/Scrum/Sprint`,
  TASK: `${API_BASE_URL}/Scrum/Task`,
  MEMBER: `${API_BASE_URL}/Scrum/Project/Members`,
  MESSAGE: `${API_BASE_URL}/Message`,
  UPDATE_PROJECT_OWNER: `${API_BASE_URL}/Scrum/Project/UpdateProjectOwner`,
  PROJECT_USER: `${API_BASE_URL}/Scrum/Projects/User`
};

// StorageKeys enum
export const StorageKeys = {
  AUTH_TOKEN: 'token',
  USER_ID: 'userId',
  SELECTED_PROJECT: 'selectedProjectId'
};
'''
'''--- src/hooks/useAccountDetails.js ---
import { useState, useEffect } from "react";
import { fetchUserById, updateUserProfile } from "../services/userService.ts";
import { getUserId, clearAuth, validateUsername } from "../services/authService.ts";
import { getSelectedProject, clearSelectedProject } from "../services/storageService";
import { leaveProject, isProjectOwner, updateProjectOwner, fetchProjectMembers } from "../services/projectService";
import { useNavigate } from "react-router-dom";
/**
 * useAccountDetails
 *
 * Manages user profile state, username updates, password changes,
 * and project ownership logic.
 *
 * @returns {
*   user: current user object,
*   loading: boolean indicating fetch status,
*   error: error message if failed,
*   updateUsername: function to update username,
*   handleChangePassword: function to update password,
*   handleLeaveGroup: logic to leave or transfer ownership of a project,
*   handleLogout: clears auth and navigates to login,
*   leaveProjectState: status of leave attempt
* }
*/
const useAccountDetails = () => {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [leaveProjectState, setLeaveProjectState] = useState({
    loading: false,
    error: null,
    success: null
  });

  useEffect(() => {
    const fetchUserData = async () => {
      const userId = getUserId();

      if (!userId) {
        console.error("No user ID found, redirecting to login...");
        navigate("/");
        return;
      }

      try {
        console.log("üîç Fetching account details...");
        const userData = await fetchUserById(userId);
        console.log("User data loaded:", userData);
        setUser(userData);
      } catch (err) {
        console.error("‚ùå Error fetching user details:", err.message);
        setError("Failed to load account details.");
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, [navigate]);

  const handleGoBack = () => {
    console.log("üîô Returning to the previous page...");
    navigate(-1);
  };

  const handleLogout = () => {
    console.log("üö™ Logging out...");
    clearAuth();
    navigate("/");
  };

  // Helper to safely get user property regardless of case
  const getUserProp = (propName) => {
    if (!user) return null;
    
    // Try lowercase version first (from API)
    const lowerProp = propName.toLowerCase();
    if (user[lowerProp] !== undefined) return user[lowerProp];
    
    // Then try capitalized version
    if (user[propName] !== undefined) return user[propName];
    
    // Then try uppercase first letter
    const capitalizedProp = propName.charAt(0).toUpperCase() + propName.slice(1).toLowerCase();
    if (user[capitalizedProp] !== undefined) return user[capitalizedProp];
    
    // Finally try all lowercase
    if (user[propName.toLowerCase()] !== undefined) return user[propName.toLowerCase()];
    
    return null;
  };

  // Update the updateUsername function
  const updateUsername = async (newUsername) => {
    // Get user ID regardless of case
    const userId = getUserProp('id');
    
    if (!userId) {
      console.error("User data is not available:", user);
      throw new Error("User data is not available");
    }

    // Get current username regardless of case
    const currentUsername = getUserProp('username');

    // Skip update if username hasn't changed
    if (newUsername === currentUsername) {
      console.log("‚úÖ Username unchanged, skipping update");
      return user;
    }

    try {
      console.log(`üîç Checking if "${newUsername}" is available...`);
      
      // Validate the username
      const isTaken = await validateUsername(newUsername, currentUsername);
      
      if (isTaken) {
        console.log("‚ùå Username is already in use, cannot update");
        throw new Error("Username is already in use");
      }
      
      console.log("‚úÖ Username is available, proceeding with update");
      
      // Build update data - try both camelCase and PascalCase to ensure compatibility
      const updateData = {
        // Include both forms of ID
        id: userId,
        ID: userId,
        // Include both forms of each field
        username: newUsername,
        Username: newUsername,
        email: getUserProp('email'),
        Email: getUserProp('email'),
        firstName: getUserProp('firstName'),
        FirstName: getUserProp('firstName'),
        lastName: getUserProp('lastName'),
        LastName: getUserProp('lastName')
      };
      
      console.log("üì§ Sending update:", updateData);
      
      // Perform the update
      const result = await updateUserProfile(updateData, user);
      console.log("üì• Update successful:", result);
      
      // Update local state
      setUser(result);
      return result;
    } catch (err) {
      console.error("‚ùå Error updating username:", err);
      throw err;
    }
  };

  const handleChangePassword = async (newPassword) => {
    const userId = getUserProp('id');
    
    if (!userId) {
      console.error("User data is not available:", user);
      throw new Error("User data is not available");
    }

    try {
      console.log("üîë Changing password...");

      // Prepare update data maintaining the original casing from the API
      const passwordData = {
        id: userId,
        username: getUserProp('username'),
        email: getUserProp('email'),
        firstName: getUserProp('firstName'),
        lastName: getUserProp('lastName'),
        password: newPassword
      };

      // Send the update request
      const result = await updateUserProfile(passwordData);
      console.log("‚úÖ Password changed successfully");
      
      // Update local state if API returned new data
      if (result) {
        setUser(result);
      }
      
      return true;
    } catch (err) {
      console.error("‚ùå Error changing password:", err);
      throw err;
    }
  };

  const handleLeaveGroup = async () => {
    const selectedProjectId = getSelectedProject();
  
    if (!selectedProjectId) {
      setLeaveProjectState({
        loading: false,
        error: "No project selected. Join or select a project first.",
        success: null
      });
      return;
    }
  
    try {
      setLeaveProjectState({
        loading: true,
        error: null,
        success: null
      });
      
      // Check if the user is the project owner
      const isOwner = await isProjectOwner(selectedProjectId);
      
      if (isOwner) {
        setLeaveProjectState({
          loading: false,
          error: "You are the project owner. Please reassign ownership to another member before leaving.",
          success: null
        });
        return;
      }
      
      // User is not the owner, proceed with leaving
      console.log(`üèÉ Leaving project ${selectedProjectId}...`);
      await leaveProject(selectedProjectId);
      
      // Clear the selected project since we've left it
      clearSelectedProject();
      
      setLeaveProjectState({
        loading: false,
        error: null,
        success: "Successfully left the project."
      });
      
      // Clear success message after a delay
      setTimeout(() => {
        setLeaveProjectState(prev => ({...prev, success: null}));
      }, 3000);
      
    } catch (err) {
      console.error("‚ùå Error leaving project:", err);
      setLeaveProjectState({
        loading: false,
        error: err.message || "Failed to leave the project.",
        success: null
      });
    }
  };

  const reassignOwnershipAndLeave = async (projectId, newOwnerId) => {
    try {
      console.log(`üîÑ Reassigning ownership of project ${projectId} to user ${newOwnerId}...`);
      await updateProjectOwner(projectId, newOwnerId); // Reassign ownership
      console.log("‚úÖ Ownership reassigned successfully. Leaving project...");
      await leaveProject(projectId); // Leave the project after reassignment
      clearSelectedProject(); // Clear the selected project
      setLeaveProjectState({
        loading: false,
        error: null,
        success: "Successfully reassigned ownership and left the project.",
      });
    } catch (err) {
      console.error("‚ùå Error reassigning ownership or leaving project:", err);
      setLeaveProjectState({
        loading: false,
        error: err.message || "Failed to reassign ownership or leave the project.",
        success: null,
      });
    }
  };

  return {
    user,
    loading,
    error,
    handleGoBack,
    handleLogout,
    handleChangePassword,
    handleLeaveGroup,
    updateUsername,
    getUserProp,
    leaveProjectState,
    reassignOwnershipAndLeave
  };
};

export default useAccountDetails;
'''
'''--- src/hooks/useAuth.js ---
import { useState, useEffect } from 'react';
import { getAuthToken } from '../services/authService.ts';

/**
 * useAuth
 *
 * Custom React hook to manage authentication state.
 * Checks for presence of auth token in localStorage and updates state accordingly.
 * Subscribes to storage events to reflect changes across tabs/windows.
 *
 * @returns {Object} 
 *   isAuthenticated - Boolean indicating if the user is authenticated.
 */
function useAuth() {
  const [isAuthenticated, setIsAuthenticated] = useState(!!getAuthToken());
  
  useEffect(() => {
    const checkAuthStatus = () => {
      const token = getAuthToken();
      setIsAuthenticated(!!token);
    };
    
    const handleStorageChange = (e) => {
      if (e.key === 'token') {
        checkAuthStatus();
      }
    };
    
    window.addEventListener('storage', handleStorageChange);
    
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);
  
  return { isAuthenticated };
}

// Only use default export for simplicity
export default useAuth;
'''
'''--- src/hooks/useBacklogActions.js ---
import { useNavigate } from "react-router-dom";
import { editTask } from "../services/projectService";
/**
 * useBacklogActions
 *
 * Custom React hook providing reusable handler functions for backlog actions.
 * Includes navigation and task update utilities.
 *
 * @returns {Object}
 *   handleCreateTask - Navigates to the create task page.
 *   handleCreateSprint - Navigates to the create sprint page.
 *   handleEditTask - Navigates to the edit task page for a given task ID.
 *   handleUpdateTaskStatus - Updates the status of a given task.
 *   handleUpdateTaskAssignee - Updates the assignee of a given task.
 */
const useBacklogActions = () => {
  const navigate = useNavigate();

  // ‚úÖ Navigate to Create Task Page
  const handleCreateTask = () => {
    navigate("/create-task");
  };

  // ‚úÖ Navigate to Create Sprint Page
  const handleCreateSprint = () => {
    navigate("/create-sprint");
  };

  // ‚úÖ Navigate to Edit Task Page
  const handleEditTask = (taskId) => {
    navigate(`/edit-task/${taskId}`);
  };

  // ‚úÖ Update Task Status
  const handleUpdateTaskStatus = async (task, newStatus) => {
    try {
      console.log(`üîÑ Updating status for Task ID: ${task.id} to ${newStatus}`);
      await editTask({ ...task, status: newStatus });
      console.log(`‚úÖ Task ${task.id} status updated successfully`);
    } catch (error) {
      console.error(`‚ùå Error updating task status:`, error.message);
      alert("Failed to update task status. Please try again.");
    }
  };

  // Update Task Assignee
  const handleUpdateTaskAssignee = async (task, newAssigneeId) => {
    try {
      console.log(`üîÑ Updating assignee for Task ID: ${task.id} to User ID: ${newAssigneeId}`);
      await editTask({ ...task, assigneeID: newAssigneeId });
      console.log(`‚úÖ Task ${task.id} assignee updated successfully`);
    } catch (error) {
      console.error(`‚ùå Error updating task assignee:`, error.message);
      alert("Failed to update task assignee. Please try again.");
    }
  };

  return {
    handleCreateTask,
    handleCreateSprint,
    handleEditTask,
    handleUpdateTaskStatus,
    handleUpdateTaskAssignee,
  };
};

export default useBacklogActions;

'''
'''--- src/hooks/useBoardActions.js ---
import { useState, useEffect } from 'react';
import { fetchProjectSprints } from '../services/sprintService';
import { fetchSprintTasks, updateTaskStatus, editTask } from '../services/taskService';
import { fetchProjectMembers } from '../services/projectService';
/**
 * useBoardActions
 *
 * Custom hook to manage board-related logic for the project Kanban board.
 *
 * @param {string} projectId - The ID of the project to load sprints and tasks for.
 * @returns {Object} Hook state and actions
 *   sprints - List of sprints for the project.
 *   selectedSprint - Currently selected sprint ID.
 *   tasks - List of tasks for the selected sprint.
 *   members - Project members available for task assignment.
 *   loading - Boolean indicating whether data is being loaded.
 *   error - Error message string, if any.
 *   successMessage - Status message for UI feedback.
 *   draggedTask - The task currently being dragged.
 *   setDraggedTask - Function to update the dragged task state.
 *   setError - Function to update the error state.
 *   getTasksByStatus - Function to return tasks filtered by status.
 *   formatDate - Formats ISO string into a human-readable date.
 *   getAssigneeName - Returns the full name of a task assignee.
 *   handleSprintChange - Callback to handle sprint dropdown changes.
 *   handleAssigneeChange - Assigns or unassigns a task to a user.
 *   handleStatusUpdate - Updates the status of a task after drag-and-drop.
 *   setSuccessMessage - Function to update the success message state.
 */
const useBoardActions = (projectId) => {
  const [sprints, setSprints] = useState([]);
  const [selectedSprint, setSelectedSprint] = useState(null);
  const [tasks, setTasks] = useState([]);
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [draggedTask, setDraggedTask] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);

  // Fetch sprints and members on component mount
  useEffect(() => {
    if (!projectId) {
      setError("No project selected. Please select a project first.");
      setLoading(false);
      return;
    }

    const loadSprintsAndMembers = async () => {
      try {
        setLoading(true);
        const [fetchedSprints, fetchedMembers] = await Promise.all([
          fetchProjectSprints(projectId),
          fetchProjectMembers(projectId)
        ]);
        
        setSprints(fetchedSprints || []);
        setMembers(fetchedMembers || []);
        
        // Set the first sprint as selected by default if available
        if (fetchedSprints && fetchedSprints.length > 0) {
          setSelectedSprint(fetchedSprints[0].id);
          await loadTasks(fetchedSprints[0].id);
        } else {
          setLoading(false);
        }
      } catch (err) {
        setError("Failed to load data: " + err.message);
        setLoading(false);
      }
    };

    loadSprintsAndMembers();
  }, [projectId]);

  // Load tasks when selected sprint changes
  const loadTasks = async (sprintId) => {
    if (!sprintId) return;
    
    try {
      setLoading(true);
      const fetchedTasks = await fetchSprintTasks(sprintId);
      
      setTasks(fetchedTasks || []);
      setLoading(false);
    } catch (err) {
      setError("Failed to load tasks: " + err.message);
      setLoading(false);
    }
  };

  // Handle sprint selection change
  const handleSprintChange = async (e) => {
    const sprintId = e.target.value;
    setSelectedSprint(sprintId);
    await loadTasks(sprintId);
  };

  // Handle assignee change
  const handleAssigneeChange = async (task, newAssigneeId) => {
    try {
      console.log("Task being updated:", task);
      
      // Convert empty string to null for unassigned
      const assigneeValue = newAssigneeId === "" ? null : newAssigneeId;
      
      // Create a complete task object with all required fields and proper casing
      const updatedTask = {
        ID: task.id,
        Description: task.description,
        AssigneeID: assigneeValue, // Use the converted value
        DateCreated: task.dateCreated,
        Status: task.status,
        SprintID: task.sprintID
      };
      
      console.log("Sending to backend:", updatedTask);
      
      // Update the task in the backend
      await editTask(updatedTask);
      
      // Update the task in the state - CORRECTLY this time
      setTasks(prevTasks => 
        prevTasks.map(t => 
          t.id === task.id 
            ? { ...t, assigneeID: assigneeValue } // Use assigneeValue here
            : t
        )
      );
      
      // Show success message
      setSuccessMessage(assigneeValue ? "Task assigned" : "Task unassigned");
      setTimeout(() => setSuccessMessage(null), 3000);
    } catch (err) {
      console.error("‚ùå Error updating task assignee:", err);
      setError(`Failed to update task assignee: ${err.message}`);
      setTimeout(() => setError(null), 3000);
    }
  };

  // Handle task status update (when dropped in a column)
  const handleStatusUpdate = async (taskId, newStatus) => {
    try {
      // Update task status in the backend
      await updateTaskStatus(taskId, newStatus);
      
      // Update task status in the state
      setTasks(prevTasks => 
        prevTasks.map(task => 
          task.id === taskId 
            ? { ...task, status: newStatus } 
            : task
        )
      );
      
      // Show success message
      const statusText = newStatus === 0 ? 'To Do' : newStatus === 1 ? 'In Progress' : 'Completed';
      setSuccessMessage(`Task moved to ${statusText}`);
      setTimeout(() => setSuccessMessage(null), 3000);
      
      return true;
    } catch (err) {
      setError(`Failed to update task status: ${err.message}`);
      setTimeout(() => setError(null), 3000);
      return false;
    }
  };

  // Filter tasks by status
  const getTasksByStatus = (status) => {
    return tasks.filter((task) => task.status === status);
  };

  // Format date from ISO string
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  // Find member name by ID
  const getAssigneeName = (assigneeId) => {
    if (!assigneeId) return 'Unassigned';
    const member = members.find(m => m.id === assigneeId);
    return member ? `${member.firstName} ${member.lastName}` : 'Unknown';
  };

  return {
    sprints,
    selectedSprint,
    tasks,
    members,
    loading,
    error,
    successMessage,
    draggedTask,
    setDraggedTask,
    setError,
    getTasksByStatus,
    formatDate,
    getAssigneeName,
    handleSprintChange,
    handleAssigneeChange,
    handleStatusUpdate,
    setSuccessMessage,
  };
};

export default useBoardActions;
'''
'''--- src/hooks/useLoginRegister.js ---
import { useState, useCallback, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { login, register, validateEmail } from "../services/authService";
/**
 * useLoginRegister
 *
 * Custom hook to handle login and registration logic.
 *
 * @returns {object} - The current state and handlers for login/register forms.
 *
 * @property {string} action - Current form mode: "Login" or "Sign Up".
 * @property {object} credentials - Form fields including email, username, password, etc.
 * @property {object} validationErrors - Object mapping field names to validation error messages.
 * @property {string} error - General error message.
 * @property {boolean} success - Flag indicating if the last operation was successful.
 * @property {boolean} loading - Flag indicating if an async operation is in progress.
 * @property {function} handleChange - Input field change handler with debounced email validation.
 * @property {function} handleButtonClick - Handles form submit or switching between login/register.
 * @property {string|null} emailValidationStatus - Validation result: "success", "error", or null.
 */
const useLoginRegister = () => {
  const [action, setAction] = useState("Login");
  const [credentials, setCredentials] = useState({
    email: "",
    username: "",
    password: "",
    confirmPassword: "",
    firstName: "",
    lastName: "",
  });
  const [validationErrors, setValidationErrors] = useState({});
  const [error, setError] = useState("");
  const [success, setSuccess] = useState(false);
  const [loading, setLoading] = useState(false);
  const [emailValidationStatus, setEmailValidationStatus] = useState(null); // null, "success", "error"
  const [validatingEmail, setValidatingEmail] = useState(false); // Track email validation state
  
  const debounceTimeout = useRef(null); // Debounce timeout reference

  const navigate = useNavigate();

  // Memoized validation function
  const validateFields = useCallback(() => {
    const errors = {};
    const specialCharacterRegex = /[!@#$%^&*(),.?":{}|<>]/;

    if (action === "Login") {
      if (!credentials.username) errors.username = "Username is required";
      if (!credentials.password) errors.password = "Password is required";
    } else {
      if (!credentials.firstName) errors.firstName = "First Name is required";
      if (!credentials.lastName) errors.lastName = "Last Name is required";
      if (!credentials.email) {
        errors.email = "Email is required";
      } else if (!credentials.email.includes("@")) {
        errors.email = "Email must contain '@'";
      }
      if (!credentials.username) errors.username = "Username is required";
      if (!credentials.password) {
        errors.password = "Password is required";
      } else if (credentials.password.length < 8) {
        errors.password = "Password must be at least 8 characters";
      } else if (!specialCharacterRegex.test(credentials.password)) {
        errors.password = "Password must include at least one special character";
      }
      if (!credentials.confirmPassword) {
        errors.confirmPassword = "Confirm Password is required";
      } else if (credentials.password !== credentials.confirmPassword) {
        errors.confirmPassword = "Passwords do not match";
      }
    }

    return errors;
  }, [action, credentials]);

  // Memoized email validation
  const validateEmailField = useCallback(async (email) => {
    if (!email || validatingEmail) {
      return; // Prevent validation if email is empty or already validating
    }

    const isValidEmailFormat = email.includes("@");
    console.log("isValidEmailFormat:", isValidEmailFormat);

    try {
      setValidatingEmail(true); // Set validating state to true
      const result = await validateEmail(email);
      console.log("validateEmail result:", result);

      if (result === false && isValidEmailFormat) {
        setEmailValidationStatus((prevState) => { // Use callback function
          console.log("Setting emailValidationStatus to success");
          return "success";
        });
        setValidationErrors(prev => ({ ...prev, email: "" }));
        console.log("emailValidationStatus set to success");
      } else {
        setEmailValidationStatus((prevState) => { // Use callback function
          console.log("Setting emailValidationStatus to error");
          return "error";
        });
        setValidationErrors(prev => ({ ...prev, email: "Email is already in use." }));
        console.log("emailValidationStatus set to error");
      }
    } catch (err) {
      console.error("‚ùå Error validating email:", err);
      setError("Error validating email. Please try again.");
      setEmailValidationStatus("error");
    } finally {
      setValidatingEmail(false); // Set validating state to false
    }
  }, [validateEmail, validatingEmail]);
  

  // Memoized input change handler with debounce
  const handleChange = useCallback((e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({ ...prev, [name]: value }));
    setValidationErrors(prev => ({ ...prev, [name]: "" }));

    if (name === "email" && action === "Sign Up" && value) {
      clearTimeout(debounceTimeout.current); // Clear previous timeout
      debounceTimeout.current = setTimeout(() => {
        validateEmailField(value);
      }, 600); // 600ms delay
    }
  }, [action, validateEmailField]);

  // Memoized action handler
  const handleAction = useCallback(async () => {
    const errors = validateFields();
    if (Object.keys(errors).length > 0) {
      setValidationErrors(errors);
      return;
    }

    setLoading(true);
    try {
      if (action === "Login") {
        const response = await login({
          username: credentials.username,
          password: credentials.password,
        });
          localStorage.setItem("authToken", response.token);
          setSuccess(true);
          setError("");
          navigate("/projects");
      } else {
        await register(credentials);
          setSuccess(true);
          setError("");
          setAction("Login");
          setCredentials({
            email: "",
            username: "",
            password: "",
            confirmPassword: "",
            firstName: "",
            lastName: "",
          });
      }
    } catch (err) {
        setError(err.response?.data || "‚ùå An error occurred. Please try again.");
        setSuccess(false);
    } finally {
        setLoading(false);
    }
  }, [action, credentials, validateFields, navigate]);

  // Memoized button click handler
  const handleButtonClick = useCallback((buttonAction) => {
    if (action !== buttonAction) {
      setAction(buttonAction);
      setSuccess(false);
      setError("");
      setValidationErrors({});
    } else {
      handleAction();
    }
  }, [action, handleAction]);

  return {
    action,
    credentials,
    validationErrors,
    error,
    success,
    loading,
    handleChange,
    handleButtonClick,
    emailValidationStatus, // Expose the new state variable
  };
};

export default useLoginRegister;

'''
'''--- src/hooks/useMessages.js ---
import { useState, useEffect, useRef } from "react";
import { fetchMessages, sendMessage, subscribeToMessageStream } from "../services/messageService";
import { getUserId } from "../services/authService.ts";

/**
 * useMessages
 *
 * Custom React hook for managing messaging state and real-time updates within a project.
 *
 * @param {string} toUserID - ID of the recipient user.
 * @param {string} projectID - ID of the current project.
 * @returns {object} Messaging state and handlers.
 *
 * @property {Array} messages - List of messages between users in the selected project.
 * @property {string} newMessage - Current message input value.
 * @property {function} setNewMessage - Setter for newMessage input.
 * @property {function} handleSendMessage - Sends the new message and refreshes the message list.
 * @property {RefObject} messagesEndRef - Ref to auto-scroll to the bottom of the message list.
 */
function useMessages(toUserID, projectID) {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const loggedInUserId = getUserId();
  const messagesEndRef = useRef(null);

  // Fetch messages on mount and subscribe to real-time updates
  useEffect(() => {
    const loadMessages = async () => {
      try {
        const fetchedMessages = await fetchMessages(loggedInUserId, toUserID, projectID);
        setMessages(fetchedMessages);
      } catch (error) {
        console.error("‚ùå Error fetching messages:", error);
      }
    };

    loadMessages();

    const socket = subscribeToMessageStream(loggedInUserId, projectID, (newMsg) => {
      setMessages((prevMessages) => [...prevMessages, newMsg]);
    });

    return () => {
      if (socket) socket.close();
    };
  }, [loggedInUserId, toUserID, projectID]);

  // Auto-scroll to the bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Handle sending a new message
  const handleSendMessage = async () => {
    const trimmedMessage = newMessage.trim();
    if (!trimmedMessage) return;

    const messageData = {
      message: trimmedMessage,
      fromUserID: loggedInUserId,
      toUserID,
      projectID,
    };

    try {
      await sendMessage(messageData);
      const updatedMessages = await fetchMessages(loggedInUserId, toUserID, projectID);
      setMessages(updatedMessages);
      setNewMessage("");
    } catch (error) {
      console.error("‚ùå Error sending message:", error);
    }
  };

  return {
    messages,
    newMessage,
    setNewMessage,
    handleSendMessage,
    messagesEndRef,
  };
}

// Make sure there's a clear default export
export default useMessages;
'''
'''--- src/hooks/useNavigation.js ---
import { useNavigate } from 'react-router-dom';
/**
 * useNavigation
 *
 * Custom hook to simplify navigation using React Router's `useNavigate` hook.
 *
 * @returns {Function} A function that accepts a path string and navigates to it.
 *
 * @example
 * const navigateTo = useNavigation();
 * navigateTo("/dashboard");
 */
export const useNavigation = () => {
  const navigate = useNavigate();

  return (path) => {
    navigate(path);
  };
};

'''
'''--- src/hooks/useProject.js ---
import { useState, useCallback, useEffect } from 'react';
import { fetchProjectById } from '../services/projectService';
/**
 * useProject
 *
 * Custom hook to manage project data retrieval and state.
 *
 * @param {string} projectId - The ID of the project to fetch.
 * @returns {Object} An object containing:
 *  - project: The fetched project data.
 *  - loading: Boolean indicating loading state.
 *  - error: Any error encountered during fetch.
 *  - refreshProject: Function to re-fetch the project data.
 *
 * @example
 * const { project, loading, error, refreshProject } = useProject("abc123");
 */
export const useProject = (projectId) => {
  const [project, setProject] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchProject = useCallback(async () => {
    if (!projectId) {
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      const data = await fetchProjectById(projectId);
      setProject(data);
      setError(null);
    } catch (err) {
      setError(err.message || "Failed to load project");
      console.error('‚ùå Error fetching project:', err);
    } finally {
      setLoading(false);
    }
  }, [projectId]);

  const refreshProject = useCallback(() => {
    return fetchProject();
  }, [fetchProject]);

  useEffect(() => {
    fetchProject();
  }, [fetchProject]);

  return {
    project,
    loading,
    error,
    refreshProject
  };
};
'''
'''--- src/hooks/useProjectMembers.js ---
import { useState, useCallback, useEffect } from 'react';
import { fetchProjectMembers, removeMemberFromProject } from '../services/projectService';
import { fetchUserById } from '../services/userService';
/**
 * useProjectMembers
 *
 * Custom hook for managing and retrieving project members.
 *
 * @param {string} projectId - The ID of the project to retrieve members for.
 * @param {string} projectOwnerID - The ID of the user who owns the project.
 * @returns {Object} An object containing:
 *  - members: Array of project members with name and ownership flag.
 *  - loading: Boolean indicating loading state.
 *  - error: Any error encountered during fetch.
 *  - isCurrentUserOwner: Boolean indicating if the logged-in user is the project owner.
 *  - kickMember: Function to remove a member from the project.
 *
 * @example
 * const { members, loading, error, isCurrentUserOwner, kickMember } = useProjectMembers(projectId, ownerId);
 */
export const useProjectMembers = (projectId, projectOwnerID) => {
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isCurrentUserOwner, setIsCurrentUserOwner] = useState(false);

  const fetchMembers = useCallback(async () => {
    if (!projectId) {
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      const loggedInUserId = localStorage.getItem('userId'); // Get the logged-in user's ID
      const membersData = await fetchProjectMembers(projectId);

      // Format member data with full names
      const formattedMembers = await Promise.all(
        membersData.map(async (member) => {
          const userData = await fetchUserById(member.id);
          return {
            id: member.id,
            name: `${userData.firstName} ${userData.lastName}`,
            isOwner: member.id === projectOwnerID, // Explicitly check if the member is the project owner
          };
        })
      );

      // Sort members to ensure the owner is always at the top
      const sortedMembers = formattedMembers.sort((a, b) => {
        if (a.isOwner) return -1; // Owner comes first
        if (b.isOwner) return 1;
        return a.name.localeCompare(b.name); // Sort others alphabetically
      });

      setMembers(sortedMembers);
      setIsCurrentUserOwner(loggedInUserId === projectOwnerID); // Check if the logged-in user is the owner
      setError(null);
    } catch (err) {
      setError(err.message);
      console.error('‚ùå Error fetching members:', err);
    } finally {
      setLoading(false);
    }
  }, [projectId, projectOwnerID]);

  const kickMember = useCallback(
    async (memberId) => {
      try {
        await removeMemberFromProject(projectId, memberId);
        await fetchMembers();
      } catch (err) {
        setError(err.message);
        console.error('‚ùå Error kicking member:', err);
      }
    },
    [projectId, fetchMembers]
  );

  useEffect(() => {
    fetchMembers();
  }, [fetchMembers]);

  return {
    members,
    loading,
    error,
    isCurrentUserOwner, // Return whether the current user is the owner
    kickMember,
  };
};

'''
'''--- src/hooks/useProjectSprints.js ---
import { useState, useCallback, useEffect } from 'react';
import * as projectService from '../services/projectService';
/**
 * useProjectSprints
 *
 * Custom React hook for managing and interacting with sprints in a given project.
 *
 * @param {string} projectId - The ID of the project for which sprints should be fetched and managed.
 *
 * @returns {Object} An object containing:
 *  - sprints: An array of sprints associated with the project.
 *  - loading: Boolean indicating whether sprint data is currently being loaded.
 *  - error: Any error encountered during sprint operations.
 *  - refreshSprints: Function to re-fetch the list of sprints.
 *  - createSprint: Function to create a new sprint and refresh the sprint list.
 *
 * @example
 * const { sprints, loading, error, refreshSprints, createSprint } = useProjectSprints("project123");
 */
export const useProjectSprints = (projectId) => {
  const [sprints, setSprints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchSprints = useCallback(async () => {
    if (!projectId) return;
    
    try {
      setLoading(true);
      const data = await projectService.fetchProjectSprints(projectId);
      setSprints(data);
      setError(null);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [projectId]);

  const createSprint = useCallback(async (sprintData) => {
    try {
      await projectService.createSprint({ ...sprintData, projectID: projectId });
      await fetchSprints(); // Refresh sprints after creation
    } catch (err) {
      setError(err.message);
    }
  }, [projectId, fetchSprints]);

  useEffect(() => {
    fetchSprints();
  }, [fetchSprints]);

  return { sprints, loading, error, refreshSprints: fetchSprints, createSprint };
};
'''
'''--- src/hooks/useProjects.js ---
import { useState, useEffect, useCallback } from 'react';
import { 
  fetchUserProjects, 
  deleteProject as deleteProjectAPI, 
  fetchProjectById 
} from "../services/projectService";
/**
 * useProjects
 *
 * Custom hook for fetching and managing a list of projects associated with the current user.
 *
 * @returns {Object} An object containing:
 *  - projects: Array of user projects.
 *  - loading: Boolean indicating loading state.
 *  - error: Any error encountered during fetch.
 *  - deleteProject: Function to delete a project by its ID.
 *
 * @example
 * const { projects, loading, error, deleteProject } = useProjects();
 */
const useProjects = (userId) => {
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadProjects = async () => {
      try {
        setLoading(true);
        const data = await fetchUserProjects();
        setProjects(data);
        setError(null);
      } catch (err) {
        setError(err.message);
        console.error('Failed to load projects:', err);
      } finally {
        setLoading(false);
      }
    };

    // We only need to check if user is logged in to load projects
    // The userId from props is no longer needed as we get it from authService
    loadProjects();
  }, []);

  const deleteProject = async (projectId) => {
    try {
      await deleteProjectAPI(projectId);
      setProjects(prev => prev.filter(p => p.id !== projectId));
    } catch (err) {
      setError(err.message);
      console.error('Failed to delete project:', err);
      throw err;
    }
  };

  return {
    projects,
    loading,
    error,
    deleteProject
  };
};
/**
 * useProject
 *
 * Custom hook for fetching and managing a single project by ID.
 *
 * @param {string} projectId - The ID of the project to fetch.
 * @returns {Object} An object containing:
 *  - project: Project details.
 *  - loading: Boolean indicating loading state.
 *  - error: Any error encountered during fetch.
 *  - refreshProject: Function to manually re-fetch project data.
 *
 * @example
 * const { project, loading, error, refreshProject } = useProject("abc123");
 */
const useProject = (projectId) => {
  const [project, setProject] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchProject = useCallback(async () => {
    if (!projectId) {
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      const data = await fetchProjectById(projectId);
      setProject(data);
      setError(null);
    } catch (err) {
      setError(err.message);
      console.error('‚ùå Error fetching project:', err);
    } finally {
      setLoading(false);
    }
  }, [projectId]);

  const refreshProject = useCallback(() => {
    return fetchProject();
  }, [fetchProject]);

  useEffect(() => {
    fetchProject();
  }, [fetchProject]);

  return {
    project,
    loading,
    error,
    refreshProject
  };
};

export { useProjects, useProject };

'''
'''--- src/hooks/useRoutePermission.js ---
import { useLocation } from 'react-router-dom';
import { useMemo } from 'react';
import { getSelectedProject } from '../services/authService.ts';

/**
 * useRoutePermission
 *
 * Custom hook to determine route access permissions based on the presence of a selected project.
 *
 * @returns {Object} Route access state including:
 *  - selectedProject: The ID of the currently selected project from local storage.
 *  - isRouteAllowed: Boolean indicating if the current route is accessible.
 *
 * This hook is typically used to guard routes in apps where certain views require a selected project context.
 *
 * @example
 * const { isRouteAllowed } = useRoutePermission();
 * if (!isRouteAllowed) navigate("/projects");
 */
const useRoutePermission = () => {
  const location = useLocation();
  
  // Routes that are accessible without a selected project
  const allowedWithoutProject = [
    "/projects", 
    "/account",
    "/account-details",
    "/join-project",
    "/create-project",
    "/forgot-password",
    "/reset-password"
  ];

  // Get selected project and calculate if the route is allowed
  const { selectedProject, isRouteAllowed } = useMemo(() => {
    const selectedProject = getSelectedProject();
    const basePath = '/' + location.pathname.split('/')[1];
    
    const pathIsAllowed = allowedWithoutProject.includes(basePath);
    const isRouteAllowed = !!selectedProject || pathIsAllowed;
    
    return { selectedProject, isRouteAllowed };
  }, [location.pathname]);

  return { 
    selectedProject,
    isRouteAllowed
  };
};

export { useRoutePermission };
export default useRoutePermission;
'''
'''--- src/hooks/useSprintManagement.js ---
import { useState, useCallback, useEffect } from 'react';
import { 
  fetchProjectSprints,
  createSprint,
  editSprint,
  startSprint,
  completeSprint,
  checkSprintDateOverlap,
  getDisabledDates
} from '../services/sprintService';
/**
 * useSprintManagement
 *
 * Custom hook for managing sprints in a given project.
 *
 * @param {string} projectId - The ID of the project whose sprints are being managed
 * @returns {Object} Sprint state and handler functions
 *
 * @property {Array} sprints - List of all sprints in the project
 * @property {Array} sortedSprints - Sprints sorted by start date
 * @property {Object|null} selectedSprint - Currently selected sprint
 * @property {Function} setSelectedSprint - Setter for selectedSprint
 * @property {Object|null} nextSprintToStart - The next sprint eligible to be started
 * @property {Object|null} activeSprint - Currently active sprint
 * @property {boolean} loading - Loading state
 * @property {string|null} error - Error state message
 * @property {Function} fetchSprints - Manually fetch all sprints for the project
 * @property {Function} handleCreateSprint - Create a new sprint
 * @property {Function} handleUpdateSprint - Update an existing sprint
 * @property {Function} handleStartSprint - Mark a sprint as started
 * @property {Function} handleCompleteSprint - Mark a sprint as completed
 * @property {Function} validateSprintDates - Check for valid start/end dates and overlap
 * @property {Function} getSprintDisabledDates - Get date strings to disable in a date picker
 */
export const useSprintManagement = (projectId) => {
  const [sprints, setSprints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedSprint, setSelectedSprint] = useState(null);

  // Sort sprints by start date (earliest first)
  const sortedSprints = sprints.length > 0 
    ? [...sprints].sort((a, b) => new Date(a.startDate) - new Date(b.startDate))
    : [];

  // Find next sprint to start (not started and earliest date)
  const nextSprintToStart = sortedSprints.find(sprint => 
    !sprint.isStarted && new Date(sprint.startDate) >= new Date()
  );

  // Active sprint (started but not completed)
  const activeSprint = sortedSprints.find(sprint => 
    sprint.isStarted && !sprint.isCompleted
  );

  const fetchSprints = useCallback(async () => {
    if (!projectId) {
      setLoading(false);
      return;
    }
    
    try {
      setLoading(true);
      const data = await fetchProjectSprints(projectId);
      setSprints(data || []);
      setError(null);
    } catch (err) {
      // Check if this is an auth error (401)
      if (err.response && err.response.status === 401) {
        console.error("Authentication error when fetching sprints:", err);
        setError("Your session has expired. Please log in again.");
        // Optionally redirect to login page or show a login modal
      } else {
        setError(err.message || "Failed to load sprints");
        console.error("Error fetching sprints:", err);
      }
      setSprints([]);
    } finally {
      setLoading(false);
    }
  }, [projectId]);

  const handleCreateSprint = async (sprintData) => {
    try {
      setLoading(true);
      await createSprint({ ...sprintData, projectID: projectId });
      await fetchSprints(); // Refresh sprints after creation
      return { success: true };
    } catch (err) {
      // Check if this is an auth error
      if (err.response && err.response.status === 401) {
        setError("Your session has expired. Please log in again.");
      } else {
        setError(err.message || "Failed to create sprint");
      }
      console.error("Error creating sprint:", err);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateSprint = async (sprintData) => {
    try {
      setLoading(true);
      await editSprint(sprintData);
      await fetchSprints(); // Refresh sprints after update
      return { success: true };
    } catch (err) {
      setError(err.message || "Failed to update sprint");
      console.error("Error updating sprint:", err);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  const handleStartSprint = async (sprintId) => {
    try {
      setLoading(true);
      await startSprint(sprintId);
      await fetchSprints(); // Refresh sprints after starting
      return { success: true };
    } catch (err) {
      setError(err.message || "Failed to start sprint");
      console.error("Error starting sprint:", err);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  const handleCompleteSprint = async (sprintId) => {
    try {
      setLoading(true);
      await completeSprint(sprintId);
      await fetchSprints(); // Refresh sprints after completing
      return { success: true };
    } catch (err) {
      setError(err.message || "Failed to complete sprint");
      console.error("Error completing sprint:", err);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  // Check if dates overlap with existing sprints
  const validateSprintDates = (startDate, endDate, currentSprintId = null) => {
    // Validate that end date is after start date
    if (new Date(endDate) <= new Date(startDate)) {
      return { valid: false, error: "End date must be after start date" };
    }
    
    // Check for date overlaps with existing sprints
    if (checkSprintDateOverlap(startDate, endDate, sprints, currentSprintId)) {
      return { valid: false, error: "Sprint dates overlap with existing sprints" };
    }
    
    return { valid: true };
  };

  // Get disabled dates for date picker
  const getSprintDisabledDates = (currentSprintId = null) => {
    return getDisabledDates(sprints, currentSprintId);
  };

  useEffect(() => {
    fetchSprints();
  }, [fetchSprints]);

  return {
    sprints,
    sortedSprints,
    selectedSprint,
    setSelectedSprint,
    nextSprintToStart,
    activeSprint,
    loading,
    error,
    fetchSprints,
    handleCreateSprint,
    handleUpdateSprint,
    handleStartSprint,
    handleCompleteSprint,
    validateSprintDates,
    getSprintDisabledDates
  };
};
'''
'''--- src/hooks/useTaskManagement.js ---
import { useState, useCallback, useEffect } from 'react';
import { 
  fetchProjectTasksWithAssignees,
  fetchSprintTasks,
  fetchTaskById,
  createTask,
  editTask,
  updateTaskStatus,
  updateTaskAssignee
} from '../services/taskService';
/**
 * useTaskManagement
 *
 * Custom React hook for managing tasks at the project or sprint level.
 *
 * @param {string} projectId - The ID of the current project
 * @param {string|null} sprintId - Optional sprint ID for fetching sprint-specific tasks
 * @returns {Object} Task state and operations
 *
 * @property {Array} tasks - Full list of tasks
 * @property {Array} todoTasks - Tasks with status = 0 (To Do)
 * @property {Array} inProgressTasks - Tasks with status = 1 (In Progress)
 * @property {Array} completedTasks - Tasks with status = 2 (Completed)
 * @property {Object|null} selectedTask - The currently selected task
 * @property {Function} setSelectedTask - Setter for selectedTask
 * @property {boolean} loading - Indicates whether data is being loaded
 * @property {string|null} error - Error message, if any
 * @property {Function} clearError - Clears the current error state
 * @property {Function} fetchTasks - Loads tasks for a sprint or the full project
 * @property {Function} refreshTask - Refreshes a specific task by ID
 * @property {Function} handleCreateTask - Creates a new task
 * @property {Function} handleUpdateTask - Updates an existing task
 * @property {Function} handleUpdateTaskStatus - Changes the status of a task
 * @property {Function} handleUpdateTaskAssignee - Assigns or reassigns a task to a user
 * @property {Function} validateTaskData - Validates task form data
 */
export const useTaskManagement = (projectId, sprintId = null) => {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedTask, setSelectedTask] = useState(null);

  // Tasks categorized by status
  const todoTasks = tasks.filter(task => task.status === 0);
  const inProgressTasks = tasks.filter(task => task.status === 1);
  const completedTasks = tasks.filter(task => task.status === 2);

  const clearError = () => {
    setError(null);
  };

  const fetchTasks = useCallback(async () => {
    if (!projectId) {
      setLoading(false);
      return;
    }
    
    try {
      setLoading(true);
      let data;
      
      if (sprintId) {
        // Fetch tasks for specific sprint
        data = await fetchSprintTasks(sprintId);
      } else {
        // Fetch all project tasks
        data = await fetchProjectTasksWithAssignees(projectId);
      }
      
      setTasks(data || []);
      setError(null);
    } catch (err) {
      // Check if this is an auth error (401)
      if (err.response && err.response.status === 401) {
        console.error("Authentication error when fetching tasks:", err);
        setError("Your session has expired. Please log in again.");
        // Optionally redirect to login page or show a login modal
      } else {
        setError(err.message || "Failed to load tasks");
        console.error("Error fetching tasks:", err);
      }
      setTasks([]);
    } finally {
      setLoading(false);
    }
  }, [projectId, sprintId]);

  const refreshTask = async (taskId) => {
    try {
      console.log(`üîÑ Refreshing task: ${taskId}`);
      const updatedTask = await fetchTaskById(taskId);
      
      setTasks(prevTasks =>
        prevTasks.map(task => (task.id === taskId ? updatedTask : task))
      );
      
      console.log(`‚úÖ Task refreshed: ${taskId}`);
      return { success: true };
    } catch (err) {
      const errorMessage = err.message || `Failed to refresh task ${taskId}`;
      console.error(`‚ùå ${errorMessage}`, err);
      return { success: false, error: errorMessage };
    }
  };

  const handleCreateTask = async (taskData) => {
    try {
      setLoading(true);
      setError(null);
      
      if (!taskData.description) {
        throw new Error("Task description is required");
      }
      
      if (!taskData.sprintID) {
        throw new Error("Sprint selection is required");
      }
      
      console.log("üîÑ Creating new task:", taskData);
      
      // Add additional fields
      const fullTaskData = {
        ...taskData,
        dateCreated: new Date().toISOString(),
        status: 0, // Default status: To Do
        projectID: projectId // Ensure project ID is included
      };
      
      await createTask(fullTaskData);
      console.log("‚úÖ Task created successfully");
      
      await fetchTasks(); // Refresh tasks after creation
      return { success: true };
    } catch (err) {
      const errorMessage = err.message || "Failed to create task";
      console.error(`‚ùå Error creating task: ${errorMessage}`, err);
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateTask = async (taskData) => {
    try {
      setLoading(true);
      setError(null);
      
      if (!taskData.id) {
        throw new Error("Task ID is required for updating");
      }
      
      console.log(`üîÑ Updating task: ${taskData.id}`, taskData);
      
      await editTask(taskData);
      console.log(`‚úÖ Task ${taskData.id} updated successfully`);
      
      await fetchTasks(); // Refresh tasks after update
      return { success: true };
    } catch (err) {
      const errorMessage = err.message || "Failed to update task";
      console.error(`‚ùå Error updating task: ${errorMessage}`, err);
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateTaskStatus = async (taskId, newStatus) => {
    try {
      console.log(`üîÑ Updating task ${taskId} status to ${newStatus}`);
      
      // Change this line to check for 0, 1, and 2
      if (![0, 1, 2].includes(Number(newStatus))) {
        throw new Error(`Invalid status value: ${newStatus}`);
      }
      
      await updateTaskStatus(taskId, newStatus);
      console.log(`‚úÖ Task ${taskId} status updated to ${newStatus}`);
      
      await refreshTask(taskId);
      return { success: true };
    } catch (err) {
      const errorMessage = err.message || "Failed to update task status";
      console.error(`‚ùå Error updating task status: ${errorMessage}`, err);
      return { success: false, error: errorMessage };
    }
  };

  const handleUpdateTaskAssignee = async (taskId, newAssigneeId) => {
    try {
      console.log(`üîÑ Updating task ${taskId} assignee to ${newAssigneeId}`);
      
      if (!newAssigneeId) {
        throw new Error("Assignee ID is required");
      }
      
      await updateTaskAssignee(taskId, newAssigneeId);
      console.log(`‚úÖ Task ${taskId} assignee updated to ${newAssigneeId}`);
      
      await refreshTask(taskId);
      return { success: true };
    } catch (err) {
      const errorMessage = err.message || "Failed to update task assignee";
      console.error(`‚ùå Error updating task assignee: ${errorMessage}`, err);
      return { success: false, error: errorMessage };
    }
  };

  // Validate task data before creation or update
  const validateTaskData = (taskData) => {
    if (!taskData.description || taskData.description.trim() === '') {
      return { valid: false, error: "Task description is required" };
    }
    
    if (!taskData.sprintID) {
      return { valid: false, error: "Sprint selection is required" };
    }
    
    return { valid: true };
  };

  useEffect(() => {
    fetchTasks();
  }, [fetchTasks]);

  return {
    tasks,
    todoTasks,
    inProgressTasks,
    completedTasks,
    selectedTask,
    setSelectedTask,
    loading,
    error,
    clearError,
    fetchTasks,
    refreshTask,
    handleCreateTask,
    handleUpdateTask,
    handleUpdateTaskStatus,
    handleUpdateTaskAssignee,
    validateTaskData
  };
};
'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import "./styles/global.css"; // Import Global Styles
import App from './App';
import reportWebVitals from './reportWebVitals';
import 'bootstrap/dist/css/bootstrap.min.css';
import './axiosConfig';
import { BrowserRouter } from 'react-router-dom';
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);
// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/services/authService.js ---
//authService.js
import { api, handleApiError } from '../utils/apiClient';
import { ENDPOINTS } from '../config';

/**
 * @function getAuthToken
 * @description Retrieves the authentication token from localStorage.
 * @returns {string | null} - The stored JWT token or null if not found.
 */
export const getAuthToken = () => localStorage.getItem('token');
/**
 * @function getUserId
 * @description Retrieves the user ID from localStorage.
 * @returns {string | null} - The stored user ID or null if not found.
 */
export const getUserId = () => localStorage.getItem('userId');
/**
 * @function storeAuthData
 * @description Stores the JWT token and user ID in localStorage.
 * @param {string} token - The authentication token.
 * @param {string} userId - The user's ID.
 */
export const storeAuthData = (token, userId) => {
  localStorage.setItem('token', token);
  localStorage.setItem('userId', userId);
};
/**
 * @function clearAuth
 * @description Clears the stored authentication token and user ID from localStorage.
 */
export const clearAuth = () => {
  localStorage.removeItem('token');
  localStorage.removeItem('userId');
};

/**
 * @function validateEmail
 * @description Checks if an email is already registered.
 * @param {string} email - The email to validate.
 * @returns {Promise<boolean>} - True if the email is taken, false otherwise.
 */
export const validateEmail = async (email) => {
  try {
    const response = await api.post(ENDPOINTS.VALIDATE_EMAIL,  JSON.stringify(email), {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.status === 200) {
      return false; // Email is available
    } else {
      return true; // Email is already in use
    }
  } catch (error) {
    if (error.response && error.response.status === 409) {
      return true; // Email is already in use
    } else {
      console.error("‚ùå Error validating email:", error);
      throw error;
    }
  }
};
/**
 * @function login
 * @description Sends login credentials and stores token on success.
 * @param {Object} credentials - The user credentials (email and password).
 * @returns {Promise<Object>} - The login response data.
 */
export const login = async (credentials) => {
  try {
    // Transform PascalCase to camelCase for backend compatibility
    const loginPayload = {
      username: credentials.Username || credentials.username,
      password: credentials.Password || credentials.password
    };
    
    const response = await api.post(`${ENDPOINTS.USER}/ProcessLogin`, loginPayload);
    const { token, userId } = response.data;

    if (token && userId) {
      storeAuthData(token, userId);
      console.log('‚úÖ Login successful');
    }
    return response.data;
  } catch (error) {
    // Error is already normalized by the interceptor
    throw error;
  }
};
/**
 * @function register
 * @description Registers a new user with the provided data.
 * @param {Object} userData - The registration data.
 * @returns {Promise<Object>} - The registration response data.
 */
export const register = async (userData) => {
  try {
    const response = await api.post(ENDPOINTS.USER, userData);
    return response.data;
  } catch (error) {
    throw handleApiError(error, 'registering user'); // Throw the error
  }
};

/**
 * @function requestPasswordReset
 * @description Sends a password reset request for the specified email.
 * @param {string} email - The user's email address.
 */
export const requestPasswordReset = async (email) => {
  try {
    // Send the email as a raw JSON string, not as an object
    await api.post(`${ENDPOINTS.USER}/RequestPasswordReset`, JSON.stringify(email), {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    console.log('‚úÖ Password reset email sent');
  } catch (error) {
    console.error("‚ùå Error requesting password reset:", error);
    throw error;
  }
};
/**
 * @function resetPassword
 * @description Submits the new password and reset token for update.
 * @param {Object} resetData - The reset data including token and new password.
 */
export const resetPassword = async (resetData) => {
  try {
    await api.post(`${ENDPOINTS.USER}/ResetPassword`, resetData);
    console.log('‚úÖ Password reset successful');
  } catch (error) {
    console.error("‚ùå Error resetting password:", error);
    throw error;
  }
};
'''
'''--- src/services/messageService.js ---
// MessageService.js
// This module handles message-related API calls and WebSocket communication for real-time messaging in DevHive.

import axios from "axios";
// Import the centralized config
import { API_BASE_URL } from '../config';

// Use the imported base URL
const MESSAGE_API_URL = `${API_BASE_URL}/Message`;

let socket = null;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 5;
let heartbeatInterval = null;

/**
 * Sends a new message to the backend.
 *
 * @param {Object} message - The message object containing user and project data.
 * @param {string} message.message - The text content of the message.
 * @param {string} message.fromUserID - The sender's user ID.
 * @param {string} message.toUserID - The recipient's user ID.
 * @param {string} message.projectID - The project context for the message.
 * @returns {Promise<Object>} - The response object from the backend.
 * @throws {Error} - Throws an error if the request fails.
 */
// In src/services/messageService.js
export const sendMessage = async (message) => {
    try {
        const token = getAuthToken();
        const payload = {
            Message: message.message,
            FromUserID: message.fromUserID,
            ToUserID: message.toUserID,
            ProjectID: message.projectID,
        };

        console.log("üì§ Sending message:", payload);

        const response = await axios.post(`${MESSAGE_API_URL}/Send`, payload, {
            headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
            },
        });

        console.log("‚úÖ Message sent successfully:", response.data);
        return response.data;
    } catch (error) {
        // More detailed error logging
        console.error("‚ùå Error sending message:", error.response?.status, error.response?.data || error.message);
        
        // More user-friendly error message based on status code
        if (error.response?.status === 500) {
            throw new Error("Server error - The messaging service is currently unavailable. Our team has been notified.");
        } else if (error.response?.status === 401 || error.response?.status === 403) {
            throw new Error("Authentication error - Please try logging out and back in.");
        } else {
            throw new Error(`Failed to send message: ${error.response?.data?.message || error.message}`);
        }
    }
};

/**
 * Fetches messages exchanged between two users in a given project.
 *
 * @param {string} fromUserID - Sender user ID.
 * @param {string} toUserID - Receiver user ID.
 * @param {string} projectID - Project ID in which the messages exist.
 * @returns {Promise<Array>} - An array of processed message objects.
 * @throws {Error} - Throws an error if fetching messages fails.
 */

export const fetchMessages = async (fromUserID, toUserID, projectID) => {
    try {
        const token = getAuthToken();
        const apiUrl = `${MESSAGE_API_URL}/Retrieve/${encodeURIComponent(fromUserID)}/${encodeURIComponent(toUserID)}/${encodeURIComponent(projectID)}`;

        const response = await axios.get(apiUrl, {
            headers: { Authorization: `Bearer ${token}` },
        });

        const processedMessages = response.data.map(msg => {
            const tsObj = msg.dateSent ?? msg.DateSent;
            return {
                ...msg,
                DateSent: convertFirestoreTimestamp(tsObj)
            };
        });

        return processedMessages;
    } catch (error) {
        if (error.response?.status === 404) {
            return [];
        }
        console.error("Error retrieving messages:", error.response?.data || error.message);
        throw error;
    }
};

/**
 * Converts a Firestore timestamp or other common timestamp formats to a JavaScript Date object.
 *
 * @param {Object|string|Date} timestamp - The timestamp to convert.
 * @returns {Date} - A JavaScript Date object.
 */

const convertFirestoreTimestamp = (timestamp) => {
    if (!timestamp) return new Date();

    const secs = timestamp.seconds ?? timestamp.Seconds ?? timestamp._seconds ?? 0;
    const nanos = timestamp.nanoseconds ?? timestamp.Nanoseconds ?? timestamp._nanoseconds ?? 0;

    if (secs) return new Date(secs * 1000 + nanos / 1e6);
    if (typeof timestamp === 'string') return new Date(timestamp);
    if (timestamp instanceof Date) return timestamp;
    return new Date();
};

/**
 * Sends a heartbeat message to the server to keep the WebSocket connection alive.
 *
 * @param {WebSocket} ws - The WebSocket connection instance.
 */
const sendHeartbeat = (ws) => {
    if (ws && ws.readyState === WebSocket.OPEN) {
        try {
            ws.send(JSON.stringify({ type: "ping" }));
            console.log("üíì Sent heartbeat to keep WebSocket connection alive");
        } catch (error) {
            console.error("‚ùå Failed to send heartbeat:", error);
        }
    }
};

// Helper function to build WebSocket URL
const buildWebSocketUrl = (userId) => {
    if (!userId) {
        console.error("‚ùå Missing userId for WebSocket URL");
        return null;
    }

    // Always use secure WebSocket (wss) for production
    const host = process.env.REACT_APP_API_HOST || 'api.devhive.it.com';
    
    // Format URL in the required pattern: wss://your-domain/ws/messages?userId={userId}
    const wsUrl = `wss://${host}/ws/messages?userId=${userId}`;
    
    console.log(`üîå Configured WebSocket URL: ${wsUrl}`);
    return wsUrl;
};

/**
 * Subscribes a user to a WebSocket message stream for real-time updates.
 *
 * @param {string} userId - The ID of the user subscribing to messages.
 * @param {string} projectID - The ID of the current project.
 * @param {Function} onMessageReceived - Callback to invoke when a new message is received.
 * @returns {WebSocket|null} - The WebSocket instance or null if connection fails.
 */
export const subscribeToMessageStream = (userId, projectID, onMessageReceived) => {
    if (!userId || !projectID) {
        console.error("‚ùå Missing userId or projectID for WebSocket.");
        return null;
    }

    // Close existing connection if any
    if (socket && socket.readyState !== WebSocket.CLOSED) {
        console.log("üîÑ Closing existing WebSocket connection before creating a new one");
        socket.close();
    }
    
    // Clear any existing heartbeat interval
    if (heartbeatInterval) {
        clearInterval(heartbeatInterval);
        heartbeatInterval = null;
    }

    try {
        console.log('üîÑ Attempting to connect to WebSocket...');
        const wsUrl = buildWebSocketUrl(userId);
        
        console.log(`üîå Connecting to WebSocket at: ${wsUrl}`);
        socket = new WebSocket(wsUrl);

        socket.onopen = () => {
            console.log(`‚úÖ WebSocket connection established for user ${userId} in project ${projectID}`);
            // Reset reconnect attempts on successful connection
            reconnectAttempts = 0;
            
            // Send initialization message
            try {
                socket.send(JSON.stringify({ 
                    type: "init", 
                    userId: userId, 
                    projectId: projectID 
                }));
                console.log("üì§ Sent initialization message to WebSocket server");
            } catch (error) {
                console.error("‚ùå Failed to send initialization message:", error);
            }
            
            // Start heartbeat to keep connection alive
            heartbeatInterval = setInterval(() => sendHeartbeat(socket), 30000);
        };

        socket.onmessage = (event) => {
            try {
                console.log("üì© Raw WebSocket message received:", event.data);
                const message = JSON.parse(event.data);
                
                // Ignore heartbeat responses
                if (message.type === "pong") {
                    console.log("üíì Received heartbeat response");
                    return;
                }
                
                // Handle camel case / pascal case field names
                const tsObj = message.dateSent ?? message.DateSent;
                
                // Convert Firestore timestamp to JS Date
                if (tsObj) {
                    message.DateSent = convertFirestoreTimestamp(tsObj);
                }

                console.log("üì® Processed WebSocket message:", message);
                onMessageReceived(message);
            } catch (error) {
                console.error("‚ùå Error parsing WebSocket message:", error);
            }
        };

        socket.onerror = (error) => {
            console.error("‚ùå WebSocket error:", error);
            
            // Clear heartbeat on error
            if (heartbeatInterval) {
                clearInterval(heartbeatInterval);
                heartbeatInterval = null;
            }
        };

        socket.onclose = (event) => {
            console.log(`üëã WebSocket closed: Code: ${event.code}, Reason: ${event.reason || "No reason provided"}`);
            
            // Clear heartbeat on close
            if (heartbeatInterval) {
                clearInterval(heartbeatInterval);
                heartbeatInterval = null;
            }
            
            // Implement exponential backoff for reconnection
            if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
                const delay = Math.min(30000, 1000 * Math.pow(1.5, reconnectAttempts));
                reconnectAttempts++;
                
                console.log(`‚è±Ô∏è Attempting to reconnect (${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}) in ${(delay/1000).toFixed(1)}s...`);
                
                setTimeout(() => {
                    // Only attempt reconnection if the page is visible
                    if (document.visibilityState !== 'hidden') {
                        console.log(`üîÑ Attempting reconnection #${reconnectAttempts}...`);
                        subscribeToMessageStream(userId, projectID, onMessageReceived);
                    } else {
                        console.log("üì± Page not visible, delaying reconnection attempt");
                    }
                }, delay);
            } else {
                console.error(`‚ùå Maximum WebSocket reconnection attempts (${MAX_RECONNECT_ATTEMPTS}) reached. Please refresh the page to reconnect.`);
            }
        };

        return socket;
    } catch (error) {
        console.error("‚ùå Error establishing WebSocket connection:", error);
        return null;
    }
};

/**
 * Retrieves the stored JWT token from localStorage.
 *
 * @returns {string|null} - The stored JWT token or null if not found.
 */
export const getAuthToken = () => {
  return localStorage.getItem("token");
};

/**
 * Retrieves the user ID from localStorage.
 *
 * @returns {string|null} - The current user's ID or null if not found.
 */
export const getUserId = () => {
  const userId = localStorage.getItem("userId");
  if (!userId) {
    console.warn("User ID not found in localStorage.");
  }
  return userId;
};

'''
'''--- src/services/projectService.js ---
import axios from "axios";
import { fetchUserById } from "./userService"; 
import { api, handleApiError, createAuthenticatedRequest } from '../utils/apiClient';
import { ENDPOINTS, API_BASE_URL } from '../config';
import { StorageKeys } from '../config';

/**
 * Fetches all projects associated with the currently authenticated user.
 *
 * @returns {Promise<Array>} - A list of project objects.
 * 
 * @throws {Error} - If the user ID is not found or the API call fails.
 *
 * @example
 * const projects = await fetchUserProjects();
 */

// In projectService.js
export const fetchUserProjects = async () => {
  try {
    const userId = getUserId();

    if (!userId) {
      console.error("‚ùå No user ID found. Please log in again.");
      throw new Error("User ID is missing. Please log in again.");
    }

    console.log(`üì° Fetching projects for user: ${userId}`);
    
    // Check the token before making the API call
    const token = getAuthToken();
    if (!token) {
      console.error("‚ùå No auth token found. Please log in again.");
      throw new Error("Authentication token is missing. Please log in again.");
    }
    
    // DEBUGGING: Log the FULL token (remove in production) to verify its format
    console.log("üîë FULL TOKEN:", token);
    console.log("üîë TOKEN LENGTH:", token.length);
    // Check if token already includes "Bearer" prefix
    if (token.startsWith("Bearer ")) {
      console.warn("‚ö†Ô∏è Token already includes 'Bearer' prefix!");
    }

    console.log(`üì° Full API URL: ${ENDPOINTS.PROJECT_USER}/${userId}`);

    // Make direct axios call with explicit headers
    const response = await axios.get(`${ENDPOINTS.PROJECT_USER}/${userId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      // Add timeout and additional options for better diagnostics
      timeout: 10000, // 10 seconds
      validateStatus: status => status < 500 // Don't throw on 4xx errors
    });

    console.log("‚úÖ Projects fetched:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching user projects:", error.response?.data || error.message);
    
    // More detailed error information
    if (error.response) {
      console.error("üìä Status:", error.response.status);
      console.error("üìÑ Headers:", JSON.stringify(error.response.headers, null, 2));
      console.error("üìù Data:", error.response.data);
      
      if (error.response.status === 401) {
        console.error("üîí Authentication failed. Token may be invalid or expired.");
        // Clear invalid token and redirect to login
        localStorage.removeItem(StorageKeys.AUTH_TOKEN);
        localStorage.removeItem(StorageKeys.USER_ID);
        window.location.href = "/";
      }
    }
    
    throw handleApiError(error, 'fetching user projects');
  }
};

/**
 * Fetches a single project by its ID.
 *
 * @param {string} projectId - The ID of the project to retrieve.
 * @returns {Promise<Object>} - The project data object.
 * 
 * @throws {Error} - If the project cannot be retrieved.
 *
 * @example
 * const project = await fetchProjectById("project123");
 */

export const fetchProjectById = async (projectId) => {
  try {
    const response = await api.get(`${ENDPOINTS.PROJECT}/${projectId}`);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error fetching project:', error);
    throw error;
  }
};

/**
 * Checks whether the currently logged-in user is the owner of the specified project.
 *
 * @param {string} projectId - The ID of the project to check.
 * @returns {Promise<boolean>} - True if the user is the project owner, false otherwise.
 *
 * @example
 * const isOwner = await isProjectOwner("project123");
 */

export const isProjectOwner = async (projectId) => {
  try {
    const project = await fetchProjectById(projectId);
    const currentUserId = getUserId();

    return project.projectOwnerID === currentUserId; // Returns true if user is the owner
  } catch (error) {
    console.error("‚ùå Error checking project ownership:", error);
    return false; // Default to false on error
  }
};

/**
 * Fetches all members associated with a specific project.
 *
 * @param {string} projectId - The ID of the project whose members should be retrieved.
 * @returns {Promise<Array>} - A list of member objects.
 *
 * @throws {Error} - If the request fails.
 *
 * @example
 * const members = await fetchProjectMembers("project123");
 */

export const fetchProjectMembers = async (projectId) => {
  try {
    const response = await api.get(`${ENDPOINTS.PROJECT}/Members/${projectId}`);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error fetching project members:', error);
    throw error;
  }
};

/**
 * Stores the selected project ID in localStorage for state persistence.
 *
 * @param {string} projectId - The project ID to be saved.
 *
 * @example
 * setSelectedProject("project123");
 */

export const setSelectedProject = (projectId) => {
  localStorage.setItem(StorageKeys.SELECTED_PROJECT, projectId);
};
/**
 * Sets the currently selected project ID for the session.
 *
 * @param {string} projectId - The ID of the project to select.
 * @returns {boolean} - Returns true if the project was successfully selected, false otherwise.
 *
 * @example
 * const success = await selectProject("project123");
 */

export const selectProject = async (projectId) => {
  try {
    setSelectedProject(projectId);
    return true;
  } catch (error) {
    console.error("‚ùå Error selecting project:", error);
    return false;
  }
};

/**
 * Retrieves the currently selected project ID from localStorage.
 *
 * @returns {string|null} - The stored project ID or null if not found.
 *
 * @example
 * const projectId = getSelectedProject();
 */

export const getSelectedProject = () => {
  try {
    return localStorage.getItem(StorageKeys.SELECTED_PROJECT);
  } catch (error) {
    console.error('Error getting selected project:', error);
    return null;
  }
};

/**
 * Removes the selected project ID from localStorage.
 *
 * @example
 * clearSelectedProject();
 */

export const clearSelectedProject = () => {
  localStorage.removeItem(StorageKeys.SELECTED_PROJECT);
};

/**
 * Retrieves the stored authentication token from localStorage.
 *
 * @returns {string|null} - JWT token or null if not found.
 *
 * @example
 * const token = getAuthToken();
 */

export const getAuthToken = () => {
  return localStorage.getItem(StorageKeys.AUTH_TOKEN);
};

/**
 * Retrieves the current user ID from localStorage.
 *
 * @returns {string|null} - The user ID or null if not found.
 * Logs a warning if the user ID is missing.
 *
 * @example
 * const userId = getUserId();
 */
export const getUserId = () => {
  const userId = localStorage.getItem(StorageKeys.USER_ID);
  if (!userId) {
    console.warn("Warning: User ID not found in localStorage.");
  }
  return userId;
};
/**
 * Creates a new project in the system.
 *
 * @param {Object} projectData - Data for the new project.
 * @param {string} projectData.name - Name of the project.
 * @param {string} projectData.projectOwnerID - ID of the project owner.
 * @param {string} [projectData.description] - Optional description of the project.
 * @returns {Promise<Object>} - The created project object from the backend.
 *
 * @throws Will throw an error if required fields are missing or the API request fails.
 */

export const createProject = async (projectData) => {
  try {
    const token = getAuthToken();
    
    if (!projectData.name || !projectData.projectOwnerID) {
      throw new Error("Project name and owner ID are required");
    }
    
    // Create a proper project object matching the backend model
    const project = {
      id: "", // This will be generated by the backend
      name: projectData.name,
      description: projectData.description || "",
      projectOwnerID: projectData.projectOwnerID
    };
    
    console.log("Creating project:", project);
    
    const response = await axios.post(`${API_BASE_URL}/Scrum/Project/`, project, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    
    console.log("Project created successfully:", response);
    return response.data;
  } catch (error) {
    console.error("Error creating project:", error);
    throw error;
  }
};
/**
 * Joins an existing project as a team member.
 *
 * @param {string} projectId - ID of the project to join.
 * @param {string} userId - ID of the user joining the project.
 * @returns {Promise<Object>} - Confirmation data from the backend.
 *
 * @throws Will throw an error if parameters are missing or the API request fails.
 */

export const joinProject = async (projectId, userId) => {
  try {
    const token = getAuthToken(); // Retrieve JWT token for authorization

    if (!projectId || !userId) {
      throw new Error("Project ID or User ID is missing.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Project/${projectId}/${userId}`; 

    console.log(`üöÄ Sending POST request to: ${apiUrl}`);

    const response = await axios.post(apiUrl, {}, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    console.log("‚úÖ Successfully joined project:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error joining project:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Leaves the specified project as the current user.
 *
 * @param {string} projectId - ID of the project to leave.
 * @returns {Promise<Object>} - Confirmation response from the API.
 *
 * @throws Will throw an error if user or project ID is missing, or if the API call fails.
 *         If the user is the project owner, an additional validation message is returned.
 */

export const leaveProject = async (projectId) => {
  try {
    const token = getAuthToken();
    const userId = getUserId();

    if (!projectId || !userId) {
      throw new Error("‚ùå Project ID or User ID is missing.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Project/Leave`; // Corrected URL to match the format

    console.log("üöÄ Sending request to leave project:", projectId);
    console.log("üì§ Payload:", { ProjectID: projectId, UserID: userId });

    const response = await axios.post(
      apiUrl,
      { ProjectID: projectId, UserID: userId },
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );

    console.log("‚úÖ Successfully left project:", response.data);

    // Clear selected project since we've left it
    clearSelectedProject();

    return response.data;
  } catch (error) {
    console.error("‚ùå Error leaving project:", error.response?.data || error.message);

    // Check for specific error message from backend indicating user is project owner
    if (
      error.response?.data &&
      typeof error.response.data === "string" &&
      error.response.data.includes("project owner")
    ) {
      throw new Error("You are the project owner. Please reassign ownership before leaving the project.");
    }

    throw new Error(error.response?.data || "Failed to leave the project.");
  }
};

/**
 * Updates an existing project's details. Only the project owner can perform this action.
 *
 * @param {Object} project - The project object to update.
 * @param {string} project.id - Unique identifier of the project to be edited.
 * @param {string} [project.name] - New name for the project.
 * @param {string} [project.description] - Optional updated description.
 * @param {string} [project.projectOwnerID] - ID of the current or new project owner.
 * @returns {Promise<Object>} - The updated project object returned from the backend.
 *
 * @throws Will throw an error if the user is not the project owner, if required fields are missing,
 *         or if the update operation fails.
 */
export const editProject = async (project) => {
  try {
    const token = getAuthToken();

    if (!project || !project.id) {
      throw new Error("Project data is invalid or missing.");
    }

    const isOwner = await isProjectOwner(project.id);
    if (!isOwner) {
      throw new Error("‚ùå You are not the project owner. Editing is not allowed.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Project`;

    console.log("üîÑ Sending update request to:", apiUrl);
    console.log("üì§ Payload:", project);

    const response = await axios.put(apiUrl, project, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    console.log("üì© Server Response:", response.data);

    if (response.status !== 200) {
      throw new Error(`Unexpected response status: ${response.status}`);
    }

    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating project:", error);
    throw error;
  }
};

/**
 * Update the project owner.
 * @param {string} projectId - The ID of the project.
 * @param {string} newOwnerId - The ID of the new project owner.
 * @returns {Promise<string>} - Success message from the API.
 */
export const updateProjectOwner = async (projectId, newOwnerId) => {
  try {
    const token = getAuthToken();

    if (!projectId || !newOwnerId) {
      throw new Error("Project ID and new owner ID are required.");
    }

    const apiUrl = ENDPOINTS.UPDATE_PROJECT_OWNER; // Use the endpoint from config
    console.log(`üöÄ Updating project owner for project ${projectId} to user ${newOwnerId}`);
    console.log(`üì° Full API URL: ${apiUrl}`);

    const response = await axios.put(
      apiUrl,
      { ProjectID: projectId, NewOwnerID: newOwnerId },
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );

    console.log("‚úÖ Project owner updated successfully:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating project owner:", error.response?.data || error.message);
    if (error.response?.status === 404) {
      throw new Error("The endpoint was not found. Please verify the API URL.");
    }
    throw new Error(error.response?.data || "Failed to update project owner.");
  }
};
// Function to remove a member from a project (Only for project owner)
export const removeMemberFromProject = async (projectId, memberId) => {
  try {
    const response = await axios.delete(
      `${ENDPOINTS.MEMBER}/${projectId}/${memberId}`,
      createAuthenticatedRequest()
    );
    return response.data;
  } catch (error) {
    console.error('‚ùå Error removing member:', error.response?.data || error.message);
    throw error;
  }
};

// Function to delete a project (Only for project owner)
export const deleteProject = async (projectId) => {
  try {
    await api.delete(`${ENDPOINTS.PROJECT}/${projectId}`);
  } catch (error) {
    return handleApiError(error, 'deleting project');
  }
};
//======================================End of Project Service===========================================//

//===================================Beginning of Sprint Service=========================================//
// Function to create a new sprint for a project
export const createSprint = async (sprintData) => {
  try {
    const token = getAuthToken();

    if (!sprintData || !sprintData.projectID) {
      throw new Error("‚ùå Sprint data is missing or project ID is not provided.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Sprint/`;

    console.log("üöÄ Sending POST request to create sprint:", apiUrl);
    console.log("üì§ Sprint Payload:", sprintData);

    const response = await axios.post(apiUrl, sprintData, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    console.log("‚úÖ Sprint successfully created:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error creating sprint:", error.response?.data || error.message);
    throw error;
  }
};

// Function to create a new task in a sprint
export const createTask = async (taskData) => {
  try {
    const token = getAuthToken();

    if (!taskData || !taskData.sprintID) {
      throw new Error("‚ùå Task data is missing or Sprint ID is not provided.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Task/`;

    console.log("üöÄ Sending POST request to create task:", apiUrl);
    console.log("üì§ Task Payload:", taskData);

    const response = await axios.post(apiUrl, taskData, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    console.log("‚úÖ Task successfully created:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error creating task:", error.response?.data || error.message);
    throw error;
  }
};

// Function to edit/update an existing sprint
export const editSprint = async (sprintData) => {
  try {
    const token = getAuthToken();

    // Validate sprint data
    if (!sprintData || !sprintData.id || !sprintData.projectID) {
      throw new Error("‚ùå Sprint data is missing or Sprint ID/Project ID is not provided.");
    }

    // Ensure dates are in ISO format
    const formattedSprintData = {
      id: sprintData.id,
      name: sprintData.name,
      startDate: new Date(sprintData.startDate).toISOString(), // Ensure correct date format
      endDate: new Date(sprintData.endDate).toISOString(),
      isCompleted: sprintData.isCompleted ?? false,
      isStarted: sprintData.isStarted ?? false,
      projectID: sprintData.projectID,
    };

    const apiUrl = `${API_BASE_URL}/Scrum/Sprint/`; 

    console.log("üöÄ Sending PUT request to update sprint:", apiUrl);
    console.log("üì§ Sprint Payload:", formattedSprintData);

    // Send the request with the correct payload
    const response = await axios.put(apiUrl, formattedSprintData, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    console.log("‚úÖ Sprint successfully updated:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating sprint:", error.response?.data || error.message);
    throw error;
  }
};

// Function to edit/update an existing task
export const editTask = async (taskData) => {
  try {
    const token = getAuthToken();

    if (!taskData || !taskData.id) {
      throw new Error("‚ùå Task data is missing or Task ID is not provided.");
    }

    // Format task data for the API - using PascalCase keys as expected by the backend
    const formattedTaskData = {
      ID: taskData.id,                                 // Use uppercase ID
      Description: taskData.description,               // Use PascalCase
      AssigneeID: taskData.assigneeID === '' ? null : taskData.assigneeID, // Convert empty string to null
      SprintID: taskData.sprintID || null,             // Ensure SprintID is present or null
      Status: Number(taskData.status),                 // Ensure status is a number (0, 1, or 2)
      DateCreated: taskData.dateCreated                // Keep the original date format
    };

    // Validate status is only 0, 1, or 2
    if (![0, 1, 2].includes(Number(formattedTaskData.Status))) {
      throw new Error(`Invalid status value: ${formattedTaskData.Status}. Must be 0, 1, or 2.`);
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Task/`; 

    console.log("üöÄ Sending PUT request to update task:", apiUrl);
    console.log("üì§ Task Payload:", formattedTaskData);

    const response = await axios.put(apiUrl, formattedTaskData, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    console.log("‚úÖ Task successfully updated:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating task:", error.response?.data || error.message);
    throw error;
  }
};

// Function to fetch all tasks for a given sprint
export const fetchSprintTasks = async (sprintId) => {
  try {
    const token = getAuthToken();

    if (!sprintId) {
      throw new Error("‚ùå Sprint ID is required.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Sprint/Tasks/${sprintId}`; 

    console.log("üöÄ Fetching tasks for sprint:", sprintId);

    const response = await axios.get(apiUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log("‚úÖ Retrieved sprint tasks:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching sprint tasks:", error.response?.data || error.message);
    throw error;
  }
};
// Function to fetch all tasks for a given project
export const fetchProjectTasks = async (projectId) => {
  try {
    const token = getAuthToken();

    if (!projectId) {
      throw new Error("‚ùå Project ID is required.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Project/Tasks/${projectId}`; 

    console.log("üöÄ Fetching tasks for project:", projectId);

    const response = await axios.get(apiUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log("‚úÖ Retrieved project tasks:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching project tasks:", error.response?.data || error.message);
    throw error;
  }
};
/**
 * Fetches all tasks for a given project and appends assignee initials to each task.
 * This is especially useful for displaying avatar labels or tags in UI components.
 *
 * @param {string} projectId - The unique identifier for the project whose tasks should be fetched.
 * @returns {Promise<Array>} A list of task objects, each with an `assigneeInitials` field added.
 *
 * Notes:
 * - If a task is unassigned (`assigneeID` is null or undefined), the field will be set to "Unassigned".
 * - If user lookup fails, a default of "??" is used for initials.
 * - Uses `Promise.all()` to parallelize user fetch calls, improving overall performance.
 * - Assumes `fetchUserById` returns an object with `firstName` and `lastName` properties.
 */
export const fetchProjectTasksWithAssignees = async (projectId) => {
  try {
    const tasks = await fetchProjectTasks(projectId);
    
    // Fetch each user's initials from `fetchUserById`
    const tasksWithAssignees = await Promise.all(tasks.map(async (task) => {
      if (!task.assigneeID) {
        return { ...task, assigneeInitials: "Unassigned" };
      }

      try {
        const user = await fetchUserById(task.assigneeID);
        const initials = `${user.firstName.charAt(0)}${user.lastName.charAt(0)}`;
        return { ...task, assigneeInitials: initials };
      } catch (error) {
        console.error(`Error fetching user for task ${task.id}:`, error);
        return { ...task, assigneeInitials: "??" }; // Default initials in case of error
      }
    }));

    return tasksWithAssignees;
  } catch (error) {
    console.error("‚ùå Error fetching tasks with assignees:", error);
    throw error;
  }
};

/**
 * Updates the status of a specific task using its ID.
 * This function is typically used in task boards or sprint views where drag-and-drop
 * or status dropdowns trigger a status update.
 *
 * @param {string} taskId - The unique identifier of the task to update.
 * @param {number} newStatus - The new status to assign to the task (0 = Pending, 1 = In Progress, 2 = Completed).
 * @returns {Promise<Object>} - The updated task data from the API.
 *
 * Best Practices:
 * - Validates taskId and status before making the API call.
 * - Only allows status codes explicitly defined (0, 1, 2).
 * - Uses token-based authentication via headers.
 * - Returns parsed response data for flexible frontend usage.
 */
export const updateTaskStatus = async (taskId, newStatus) => {
  try {
    const token = getAuthToken();

    if (!taskId) throw new Error("‚ùå Task ID is required.");
    
    // Ensure status is only 0, 1, or 2 (not 3)
    if (![0, 1, 2].includes(Number(newStatus))) {
      throw new Error(`‚ùå Invalid task status: ${newStatus}. Must be 0, 1, or 2.`);
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Task/${taskId}/Status`;

    console.log(`üöÄ Updating task ${taskId} status to ${newStatus}`);

    const response = await axios.put(apiUrl, { status: Number(newStatus) }, {
      headers: { Authorization: `Bearer ${token}` },
    });

    console.log("‚úÖ Task status updated successfully:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating task status:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Updates the assignee for a specific task in the project management system.
 *
 * @param {string} taskId - The ID of the task to update.
 * @param {string} newAssigneeId - The ID of the user to assign the task to.
 * @returns {Promise<Object>} - The updated task data from the server.
 *
 * @throws Will throw an error if the task ID or assignee ID is missing.
 * @throws Will throw an error if the API request fails.
 *
 * @example
 * await updateTaskAssignee("task123", "user456");
 */

export const updateTaskAssignee = async (taskId, newAssigneeId) => {
  try {
    const token = getAuthToken();

    if (!taskId) throw new Error("‚ùå Task ID is required.");
    if (!newAssigneeId) throw new Error("‚ùå Assignee ID is required.");

    const apiUrl = `${API_BASE_URL}/Scrum/Task/${taskId}/Assignee`;

    console.log(`üöÄ Updating task ${taskId} assignee to user ${newAssigneeId}`);

    const response = await axios.put(apiUrl, { assigneeID: newAssigneeId }, {
      headers: { Authorization: `Bearer ${token}` },
    });

    console.log("‚úÖ Task assignee updated successfully:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating task assignee:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Fetches all sprints associated with a given project.
 *
 * @param {string} projectId - The ID of the project whose sprints are to be retrieved.
 * @returns {Promise<Array>} - A promise that resolves to an array of sprint objects.
 *
 * @throws {Error} - Throws an error if the project ID is missing or if the API request fails.
 *
 * @example
 * const sprints = await fetchProjectSprints("project123");
 */

export const fetchProjectSprints = async (projectId) => {
  try {
    const token = getAuthToken();

    if (!projectId) {
      throw new Error("‚ùå Project ID is required.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Project/Sprints/${projectId}`; 

    console.log("üöÄ Fetching sprints for project:", projectId);

    const response = await axios.get(apiUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log("‚úÖ Retrieved project sprints:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching project sprints:", error.response?.data || error.message);
    throw error;
  }
};
/**
 * Fetches detailed information for a specific sprint by its ID.
 *
 * @param {string} sprintId - The unique identifier of the sprint to retrieve.
 * @returns {Promise<Object>} - A promise that resolves to the sprint object.
 *
 * @throws {Error} - Throws an error if the sprint ID is not provided or if the request fails.
 *
 * @example
 * const sprint = await fetchSprintById("sprint456");
 */

export const fetchSprintById = async (sprintId) => {
  try {
    const token = getAuthToken();

    if (!sprintId) {
      throw new Error("‚ùå Sprint ID is required.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Sprint/${sprintId}`; 

    console.log("üöÄ Fetching sprint details for:", sprintId);

    const response = await axios.get(apiUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log("‚úÖ Retrieved sprint details:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching sprint:", error.response?.data || error.message);
    throw error;
  }
};
/**
 * Fetches detailed information for a specific task by its ID.
 *
 * @param {string} taskId - The unique identifier of the task to retrieve.
 * @returns {Promise<Object>} - A promise that resolves to the task object.
 *
 * @throws {Error} - Throws an error if the task ID is not provided or if the request fails.
 *
 * @example
 * const task = await fetchTaskById("task789");
 */

export const fetchTaskById = async (taskId) => {
  try {
    const token = getAuthToken();

    if (!taskId) {
      throw new Error("‚ùå Task ID is required.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Task/${taskId}`; 

    console.log("üöÄ Fetching task details for:", taskId);

    const response = await axios.get(apiUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log("‚úÖ Retrieved task details:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching task:", error.response?.data || error.message);
    throw error;
  }
};
/**
 * Deletes a task by its ID.
 *
 * @param {string} taskId - The ID of the task to delete.
 * @returns {Promise<Object>} - The server response confirming deletion.
 *
 * @throws {Error} - If the task ID is not provided or the API call fails.
 *
 * @example
 * await deleteTask("task123");
 */

export const deleteTask = async (taskId) => {
  try {
    const token = getAuthToken();

    if (!taskId) {
      throw new Error("‚ùå Task ID is required.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Task/${taskId}`; 

    console.log("üöÄ Sending DELETE request for task:", taskId);

    const response = await axios.delete(apiUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log(`‚úÖ Successfully deleted task: ${taskId}`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error deleting task:", error.response?.data || error.message);
    throw error;
  }
};
/**
 * Deletes a sprint by its ID.
 *
 * @param {string} sprintId - The ID of the sprint to delete.
 * @returns {Promise<Object>} - The server response confirming deletion.
 *
 * @throws {Error} - If the sprint ID is not provided or the API call fails.
 *
 * @example
 * await deleteSprint("sprint456");
 */

export const deleteSprint = async (sprintId) => {
  try {
    const token = getAuthToken();

    if (!sprintId) {
      throw new Error("‚ùå Sprint ID is required.");
    }

    const apiUrl = `${API_BASE_URL}/Scrum/Sprint/${sprintId}`; 

    console.log("üöÄ Sending DELETE request for sprint:", sprintId);

    const response = await axios.delete(apiUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log(`‚úÖ Successfully deleted sprint: ${sprintId}`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error deleting sprint:", error.response?.data || error.message);
    throw error;
  }
};

'''
'''--- src/services/sprintService.js ---
import axios from "axios";
import { API_BASE_URL } from '../config';
import { useState, useCallback, useEffect } from 'react';
import { getAuthToken } from './projectService'; 

/**
 * Fetch all sprints for a specific project.
 * @param {string} projectId - The ID of the project to retrieve sprints for.
 * @returns {Promise<Array>} - An array of sprint objects.
 */
export const fetchProjectSprints = async (projectId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!projectId) {
      throw new Error("‚ùå Project ID is required.");
    }

    console.log("üöÄ Fetching sprints for project:", projectId);
    
    const response = await axios.get(`${API_BASE_URL}/Scrum/Project/Sprints/${projectId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log("‚úÖ Retrieved project sprints:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching project sprints:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Fetch a single sprint by its ID.
 * @param {string} sprintId - The unique ID of the sprint.
 * @returns {Promise<Object>} - The sprint object retrieved from the API.
 */
export const fetchSprintById = async (sprintId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!sprintId) {
      throw new Error("‚ùå Sprint ID is required.");
    }

    console.log("üöÄ Fetching sprint details for:", sprintId);
    
    const response = await axios.get(`${API_BASE_URL}/Scrum/Sprint/${sprintId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log("‚úÖ Retrieved sprint details:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching sprint:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Create a new sprint associated with a given project.
 * @param {Object} sprintData - Data for the new sprint, including projectID.
 * @returns {Promise<Object>} - The newly created sprint.
 */
export const createSprint = async (sprintData) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!sprintData || !sprintData.projectID) {
      throw new Error("‚ùå Sprint data is missing or project ID is not provided.");
    }

    console.log("üöÄ Creating new sprint for project:", sprintData.projectID);
    console.log("üì¶ Sprint data:", sprintData);
    
    const response = await axios.post(`${API_BASE_URL}/Scrum/Sprint/`, sprintData, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log("‚úÖ Sprint created successfully:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error creating sprint:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Edit an existing sprint's data.
 * @param {Object} sprintData - Sprint data including an existing sprint ID.
 * @returns {Promise<Object>} - The updated sprint object.
 */
export const editSprint = async (sprintData) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!sprintData || !sprintData.id) {
      throw new Error("‚ùå Sprint data is missing or Sprint ID is not provided.");
    }
    
    // Format dates properly if they are provided as Date objects
    const formattedData = {
      ...sprintData,
      startDate: typeof sprintData.startDate === 'object' 
        ? sprintData.startDate.toISOString() 
        : sprintData.startDate,
      endDate: typeof sprintData.endDate === 'object' 
        ? sprintData.endDate.toISOString() 
        : sprintData.endDate
    };

    console.log("üöÄ Updating sprint:", formattedData.id);
    console.log("üì¶ Updated sprint data:", formattedData);
    
    const response = await axios.put(`${API_BASE_URL}/Scrum/Sprint/`, formattedData, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log("‚úÖ Sprint updated successfully:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating sprint:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Delete a sprint by its ID.
 * @param {string} sprintId - The ID of the sprint to delete.
 * @returns {Promise<Object>} - Response from the delete operation.
 */
export const deleteSprint = async (sprintId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!sprintId) {
      throw new Error("‚ùå Sprint ID is required.");
    }

    console.log("üöÄ Deleting sprint:", sprintId);
    
    const response = await axios.delete(`${API_BASE_URL}/Scrum/Sprint/${sprintId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log(`‚úÖ Sprint ${sprintId} deleted successfully`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error deleting sprint:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Start a sprint by marking its `isStarted` field to true.
 * @param {string} sprintId - The ID of the sprint to start.
 * @returns {Promise<Object>} - The updated sprint object.
 */
export const startSprint = async (sprintId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!sprintId) {
      throw new Error("‚ùå Sprint ID is required.");
    }

    console.log("üöÄ Starting sprint:", sprintId);
    
    // Since there's no dedicated endpoint for this in your backend,
    // we'll update the sprint with isStarted=true
    const sprint = await fetchSprintById(sprintId);
    
    if (!sprint) {
      throw new Error("‚ùå Sprint not found.");
    }
    
    const updateData = {
      ...sprint,
      isStarted: true
    };
    
    const response = await editSprint(updateData);

    console.log(`‚úÖ Sprint ${sprintId} started successfully`);
    return response;
  } catch (error) {
    console.error("‚ùå Error starting sprint:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Complete a sprint by marking its `isCompleted` field to true.
 * @param {string} sprintId - The ID of the sprint to complete.
 * @returns {Promise<Object>} - The updated sprint object.
 */
export const completeSprint = async (sprintId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!sprintId) {
      throw new Error("‚ùå Sprint ID is required.");
    }

    console.log("üöÄ Completing sprint:", sprintId);
    
    // Since there's no dedicated endpoint for this in your backend,
    // we'll update the sprint with isCompleted=true
    const sprint = await fetchSprintById(sprintId);
    
    if (!sprint) {
      throw new Error("‚ùå Sprint not found.");
    }
    
    const updateData = {
      ...sprint,
      isCompleted: true
    };
    
    const response = await editSprint(updateData);

    console.log(`‚úÖ Sprint ${sprintId} completed successfully`);
    return response;
  } catch (error) {
    console.error("‚ùå Error completing sprint:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Fetch only the active (in-progress) sprints for a given project.
 * @param {string} projectId - The ID of the project.
 * @returns {Promise<Array>} - Array of active sprints.
 */

export const fetchActiveProjectSprints = async (projectId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!projectId) {
      throw new Error("‚ùå Project ID is required.");
    }

    console.log("üöÄ Fetching active sprints for project:", projectId);
    
    const response = await axios.get(`${API_BASE_URL}/Scrum/Project/Sprints/Active/${projectId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log("‚úÖ Retrieved active project sprints:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching active project sprints:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Retrieve all tasks associated with a sprint.
 * @param {string} sprintId - The ID of the sprint.
 * @returns {Promise<Array>} - Array of task objects.
 */
export const fetchSprintTasks = async (sprintId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!sprintId) {
      throw new Error("‚ùå Sprint ID is required.");
    }

    console.log("üöÄ Fetching tasks for sprint:", sprintId);
    
    const response = await axios.get(`${API_BASE_URL}/Scrum/Sprint/Tasks/${sprintId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log("‚úÖ Retrieved sprint tasks:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching sprint tasks:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * Check for overlapping sprint dates against existing sprints.
 * @param {Date|string} newStart - Proposed start date.
 * @param {Date|string} newEnd - Proposed end date.
 * @param {Array} existingSprints - Array of existing sprints.
 * @param {string|null} [currentSprintId] - Sprint ID to exclude from check.
 * @returns {boolean} - True if overlap is found, false otherwise.
 */
export const checkSprintDateOverlap = (newStart, newEnd, existingSprints, currentSprintId = null) => {
  const start = new Date(newStart);
  const end = new Date(newEnd);
  
  return existingSprints.some(sprint => {
    // Skip current sprint when editing
    if (currentSprintId && sprint.id === currentSprintId) {
      return false;
    }
    
    const sprintStart = new Date(sprint.startDate);
    const sprintEnd = new Date(sprint.endDate);
    
    // Check if date ranges overlap
    return (
      (start >= sprintStart && start <= sprintEnd) || // New start date falls within existing sprint
      (end >= sprintStart && end <= sprintEnd) || // New end date falls within existing sprint
      (start <= sprintStart && end >= sprintEnd) // New sprint completely encompasses existing sprint
    );
  });
};

/**
 * Calculate all disabled dates between sprints.
 * @param {Array} existingSprints - Array of sprint objects.
 * @param {string|null} [currentSprintId] - Sprint ID to exclude from check.
 * @returns {string[]} - Array of ISO date strings that are disabled.
 */
export const getDisabledDates = (existingSprints, currentSprintId = null) => {
  const disabledDates = [];
  
  existingSprints.forEach(sprint => {
    // Skip current sprint when editing
    if (currentSprintId && sprint.id === currentSprintId) {
      return;
    }
    
    const start = new Date(sprint.startDate);
    const end = new Date(sprint.endDate);
    
    // Add all dates between start and end (inclusive) to disabledDates
    let current = new Date(start);
    while (current <= end) {
      disabledDates.push(new Date(current).toISOString().split('T')[0]);
      current.setDate(current.getDate() + 1);
    }
  });
  
  return disabledDates;
};

/**
 * React hook to fetch and manage a single sprint.
 * @param {string} sprintId - The sprint ID to track.
 * @returns {Object} - Contains sprint data, loading state, error, and a refresh function.
 */

export const useSprint = (sprintId) => {
  const [sprint, setSprint] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchSprint = useCallback(async () => {
    if (!sprintId) {
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      const data = await fetchSprintById(sprintId);
      setSprint(data);
      setError(null);
    } catch (err) {
      setError(err.message);
      console.error('‚ùå Error fetching sprint:', err);
    } finally {
      setLoading(false);
    }
  }, [sprintId]);

  useEffect(() => {
    fetchSprint();
  }, [fetchSprint]);

  return { sprint, loading, error, refreshSprint: fetchSprint };
};

/**
 * React hook to manage project-level sprint state and actions.
 * @param {string} projectId - The project ID to track.
 * @returns {Object} - Contains sprints, loading, error, and CRUD functions.
 */
export const useProjectSprints = (projectId) => {
  const [sprints, setSprints] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchSprints = useCallback(async () => {
    if (!projectId) {
      setLoading(false);
      return;
    }
    
    try {
      setLoading(true);
      const data = await fetchProjectSprints(projectId);
      setSprints(data || []);
      setError(null);
    } catch (err) {
      setError(err.message);
      console.error('‚ùå Error fetching project sprints:', err);
    } finally {
      setLoading(false);
    }
  }, [projectId]);

  // Function to refresh after creating a sprint
  const createNewSprint = useCallback(async (sprintData) => {
    try {
      await createSprint({ ...sprintData, projectID: projectId });
      await fetchSprints(); // Refresh sprints after creation
      return { success: true };
    } catch (err) {
      setError(err.message);
      console.error('‚ùå Error creating sprint:', err);
      return { success: false, error: err.message };
    }
  }, [projectId, fetchSprints]);

  // Function to refresh after updating a sprint
  const updateSprint = useCallback(async (sprintData) => {
    try {
      await editSprint(sprintData);
      await fetchSprints(); // Refresh sprints after update
      return { success: true };
    } catch (err) {
      setError(err.message);
      console.error('‚ùå Error updating sprint:', err);
      return { success: false, error: err.message };
    }
  }, [fetchSprints]);

  // Function to delete a sprint
  const removeSprint = useCallback(async (sprintId) => {
    try {
      await deleteSprint(sprintId);
      await fetchSprints(); // Refresh sprints after deletion
      return { success: true };
    } catch (err) {
      setError(err.message);
      console.error('‚ùå Error deleting sprint:', err);
      return { success: false, error: err.message };
    }
  }, [fetchSprints]);

  useEffect(() => {
    fetchSprints();
  }, [fetchSprints]);

  return { 
    sprints, 
    loading, 
    error, 
    refreshSprints: fetchSprints, 
    createSprint: createNewSprint,
    updateSprint,
    deleteSprint: removeSprint
  };
};

/**
 * Validate sprint start and end dates and check for overlap.
 * @param {string|Date} startDate - Sprint start date.
 * @param {string|Date} endDate - Sprint end date.
 * @param {Array} existingSprints - Existing sprints to compare against.
 * @param {string|null} [currentSprintId] - ID to exclude when editing.
 * @returns {Object} - Validity status and optional error message.
 */
export const validateSprintDates = (startDate, endDate, existingSprints, currentSprintId = null) => {
  const start = new Date(startDate);
  const end = new Date(endDate);
  
  // Check if end date is after start date
  if (end <= start) {
    return { valid: false, error: "End date must be after start date" };
  }
  
  // Check for overlaps with existing sprints
  if (checkSprintDateOverlap(startDate, endDate, existingSprints, currentSprintId)) {
    return { valid: false, error: "Sprint dates overlap with existing sprints" };
  }
  
  return { valid: true };
};
'''
'''--- src/services/storageService.js ---
/**
 * @file storage.js
 * @description Utility functions and constants for managing application state in localStorage.
 */

/**
 * Enum-like object defining standardized keys used in localStorage.
 * @constant
 */
export const StorageKeys = {
  TOKEN: 'token',
  USER_ID: 'userId',
  SELECTED_PROJECT: 'selectedProjectId',
  THEME: 'theme',
  LANGUAGE: 'language',
};

/**
 * General localStorage utility object for CRUD operations.
 * Provides a consistent interface for reading and writing localStorage data.
 * @namespace
 */
export const storage = {
  /**
   * Retrieves a value by key from localStorage.
   * @param {string} key - The localStorage key.
   * @returns {string|null} - The value associated with the key, or null if not found.
   */
  get: (key) => localStorage.getItem(key),

  /**
   * Stores a key-value pair in localStorage.
   * @param {string} key - The localStorage key.
   * @param {string} value - The value to store.
   */
  set: (key, value) => localStorage.setItem(key, value),

  /**
   * Removes a specific key from localStorage.
   * @param {string} key - The localStorage key to remove.
   */
  remove: (key) => localStorage.removeItem(key),

  /**
   * Clears all keys from localStorage.
   */
  clear: () => localStorage.clear(),
};

/**
 * Project-specific localStorage operations.
 * Encapsulates logic for handling the selected project ID.
 * @namespace
 */
export const projectStorage = {
  /**
   * Stores the selected project ID in localStorage.
   * @param {string} projectId - The ID of the selected project.
   */
  setSelectedProject: (projectId) => storage.set(StorageKeys.SELECTED_PROJECT, projectId),

  /**
   * Retrieves the selected project ID from localStorage.
   * @returns {string|null} - The selected project ID, or null if not set.
   */
  getSelectedProject: () => storage.get(StorageKeys.SELECTED_PROJECT),

  /**
   * Removes the selected project ID from localStorage.
   */
  clearSelectedProject: () => storage.remove(StorageKeys.SELECTED_PROJECT),
};

// Named exports for convenience in components or services
export const { 
  setSelectedProject, 
  getSelectedProject, 
  clearSelectedProject 
} = projectStorage;

'''
'''--- src/services/taskService.js ---
import axios from "axios";
import { API_BASE_URL } from '../config';
import { getAuthToken } from './projectService'; // Reuse auth helper from projectService
import { fetchUserById } from './userService';
import { useState, useCallback, useEffect } from 'react';

/**
 * @function fetchProjectTasks
 * @description Fetches all tasks for a given project.
 * @param {string} projectId - The ID of the project.
 * @returns {Promise<Array>} - A list of tasks associated with the project.
 */
export const fetchProjectTasks = async (projectId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!projectId) {
      throw new Error("‚ùå Project ID is required.");
    }

    console.log("üöÄ Fetching tasks for project:", projectId);
    
    const response = await axios.get(`${API_BASE_URL}/Scrum/Project/Tasks/${projectId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log("‚úÖ Retrieved project tasks:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching project tasks:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * @function fetchSprintTasks
 * @description Fetches all tasks for a given sprint.
 * @param {string} sprintId - The ID of the sprint.
 * @returns {Promise<Array>} - A list of tasks within the sprint.
 */
export const fetchSprintTasks = async (sprintId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!sprintId) {
      throw new Error("‚ùå Sprint ID is required.");
    }

    console.log("üöÄ Fetching tasks for sprint:", sprintId);
    
    const response = await axios.get(`${API_BASE_URL}/Scrum/Sprint/Tasks/${sprintId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log("‚úÖ Retrieved sprint tasks:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching sprint tasks:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * @function fetchProjectTasksWithAssignees
 * @description Retrieves tasks with assignee initials for UI display.
 * @param {string} projectId - The ID of the project.
 * @returns {Promise<Array>} - A list of tasks with assignee initials included.
 */

export const fetchProjectTasksWithAssignees = async (projectId) => {
  try {
    // Get tasks for the project
    const tasks = await fetchProjectTasks(projectId);
    
    // Fetch each user's initials from `fetchUserById`
    const tasksWithAssignees = await Promise.all(tasks.map(async (task) => {
      if (!task.assigneeID) {
        return { ...task, assigneeInitials: "Unassigned" };
      }

      try {
        const user = await fetchUserById(task.assigneeID);
        const initials = `${user.firstName.charAt(0)}${user.lastName.charAt(0)}`;
        return { ...task, assigneeInitials: initials };
      } catch (error) {
        console.error(`Error fetching user for task ${task.id}:`, error);
        return { ...task, assigneeInitials: "??" }; // Default initials in case of error
      }
    }));

    return tasksWithAssignees;
  } catch (error) {
    console.error("‚ùå Error fetching tasks with assignees:", error);
    throw error;
  }
};

/**
 * @function fetchTaskById
 * @description Fetches detailed information about a task.
 * @param {string} taskId - The ID of the task.
 * @returns {Promise<Object>} - The task object.
 */
export const fetchTaskById = async (taskId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!taskId) {
      throw new Error("‚ùå Task ID is required.");
    }

    console.log("üöÄ Fetching task details for:", taskId);
    
    const response = await axios.get(`${API_BASE_URL}/Scrum/Task/${taskId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log("‚úÖ Retrieved task details:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching task:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * @function createTask
 * @description Sends a request to create a new task.
 * @param {Object} taskData - The data for the new task.
 * @returns {Promise<Object>} - The newly created task object.
 */
export const createTask = async (taskData) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!taskData || !taskData.sprintID) {
      throw new Error("‚ùå Task data is missing or Sprint ID is not provided.");
    }

    console.log("üöÄ Creating new task for sprint:", taskData.sprintID);
    console.log("üì¶ Task data:", taskData);
    
    const response = await axios.post(`${API_BASE_URL}/Scrum/Task/`, taskData, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log("‚úÖ Task created successfully:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error creating task:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * @function editTask
 * @description Updates an existing task using the provided data.
 * @param {Object} task - The task object with updated data.
 * @returns {Promise<Object>} - The updated task object.
 */
export const editTask = async (task) => {
  try {
    const token = getAuthToken();
    
    if (!task || !task.ID) {
      throw new Error("‚ùå Task data is missing or Task ID is not provided.");
    }
    
    console.log("üöÄ Updating task:", task.ID);
    console.log("üì¶ Updated task data:", task);
    
    const response = await axios.put(`${API_BASE_URL}/Scrum/Task/`, task, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log("‚úÖ Task updated successfully");
    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating task:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * @function updateTaskStatus
 * @description Updates the status field of a task.
 * @param {string} taskId - The ID of the task to update.
 * @param {number} newStatus - The new status (0 = pending, 1 = in progress, 2 = complete).
 * @returns {Promise<Object>} - The updated task object.
 */
export const updateTaskStatus = async (taskId, newStatus) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!taskId) {
      throw new Error("‚ùå Task ID is required.");
    }

    console.log(`üöÄ Updating status for task ${taskId} to ${newStatus}`);
    
    const payload = {
      ID: taskId,
      Status: Number(newStatus)
    };

    const response = await axios.put(`${API_BASE_URL}/Scrum/Task/Status/`, payload, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log(`‚úÖ Task ${taskId} status updated successfully`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating task status:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * @function updateTaskAssignee
 * @description Assigns or reassigns a task to a user.
 * @param {string} taskId - The ID of the task.
 * @param {string} newAssigneeId - The ID of the new assignee.
 * @returns {Promise<Object>} - The updated task with assignee info.
 */
export const updateTaskAssignee = async (taskId, newAssigneeId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!taskId) {
      throw new Error("‚ùå Task ID is required.");
    }
    if (!newAssigneeId) {
      throw new Error("‚ùå Assignee ID is required.");
    }

    console.log(`üöÄ Updating assignee for task ${taskId} to user ${newAssigneeId}`);
    
    const payload = {
      assigneeID: newAssigneeId
    };

    const response = await axios.put(`${API_BASE_URL}/Scrum/Task/${taskId}/Assignee`, payload, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log(`‚úÖ Task ${taskId} assignee updated successfully`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error updating task assignee:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * @function deleteTask
 * @description Deletes a task based on its ID.
 * @param {string} taskId - The ID of the task to delete.
 * @returns {Promise<Object>} - The deletion result.
 */
export const deleteTask = async (taskId) => {
  try {
    // Get auth token
    const token = getAuthToken();

    if (!taskId) {
      throw new Error("‚ùå Task ID is required.");
    }

    console.log("üöÄ Deleting task:", taskId);
    
    const response = await axios.delete(`${API_BASE_URL}/Scrum/Task/${taskId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    console.log(`‚úÖ Task ${taskId} deleted successfully`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error deleting task:", error.response?.data || error.message);
    throw error;
  }
};

/**
 * @function useTask
 * @description React hook to manage the lifecycle and state of a task.
 * @param {string} taskId - The ID of the task to load.
 * @returns {Object} - Task data, loading state, error, and a refresh method.
 */
export const useTask = (taskId) => {
  const [task, setTask] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchTask = useCallback(async () => {
    if (!taskId) {
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      const data = await fetchTaskById(taskId);
      setTask(data);
      setError(null);
    } catch (err) {
      setError(err.message);
      console.error('‚ùå Error fetching task:', err);
    } finally {
      setLoading(false);
    }
  }, [taskId]);

  useEffect(() => {
    fetchTask();
  }, [fetchTask]);

  return { task, loading, error, refreshTask: fetchTask };
};

/**
 * @function getTasksByStatus
 * @description Filters a list of tasks based on status.
 * @param {Array} tasks - Array of task objects.
 * @param {number} status - Status to filter by.
 * @returns {Array} - Filtered list of tasks matching the status.
 */
export const getTasksByStatus = (tasks, status) => {
  return tasks.filter(task => task.status === status);
};
'''
'''--- src/services/userService.js ---
import axios from "axios";
import { API_BASE_URL } from "../config";
import { getAuthToken, storeAuthData } from "../services/authService";
import { ENDPOINTS } from '../config';
/**
 * @constant api
 * @description Axios instance with a base URL and auth token interceptor for authenticated requests.
 */
export const api = axios.create({
  baseURL: API_BASE_URL
});

api.interceptors.request.use(config => {
  const token = getAuthToken();
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

const API_URL = `${API_BASE_URL}/User`;

/**
 * @function login
 * @description Authenticates a user and stores the JWT token and user ID on successful login.
 * @param {Object} credentials - The user's login credentials.
 * @returns {Promise<Object>} - The response data containing user and token info.
 */
export const login = async (credentials) => {
  try {
    const response = await axios.post(`${API_URL}/ProcessLogin/`, credentials);
    const { token, userId } = response.data;

    if (token && userId) {
      storeAuthData(token, userId);
      console.log("Login successful. Token and user ID stored.");
    } else {
      console.error("Login response did not include necessary credentials.");
    }

    return response.data;
  } catch (error) {
    console.error("Error during login:", error.response?.data || error.message);
    throw error;
  }
};
/**
 * @function register
 * @description Registers a new user by sending user data to the backend.
 * @param {Object} userData - The new user's registration data.
 * @returns {Promise<Object>} - The response data from the registration API.
 */
export const register = async (userData) => {
  const response = await axios.post(API_URL, userData);
  return response.data;
};
/**
 * @function validateEmail
 * @description Validates if an email address is already in use.
 * @param {string} email - The email address to validate.
 * @returns {Promise<Object>} - The response indicating whether the email is unique.
 */
export const validateEmail = async (email) => {
  try {
    const response = await axios.post(`${API_URL}/ValidateEmail`, { email });
    return response.data;
  } catch (error) {
    console.error("Error checking email duplicate:", error.response?.data || error.message);
    throw error;
  }
};
/**
 * @function fetchUserById
 * @description Retrieves user details by user ID using an authenticated request.
 * @param {string} userId - The ID of the user to fetch.
 * @returns {Promise<Object>} - The user object retrieved from the API.
 */
export const fetchUserById = async (userId) => {
  try {
    const response = await api.get(`${ENDPOINTS.USER}/${userId}`);
    return response.data;
  } catch (error) {
    console.error('‚ùå Error fetching user:', error);
    throw error;
  }
};

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/styles/InputField.css ---
.input-field {
  display: flex;
  align-items: center;
  position: relative !important;
  width: 100% !important;
  height: 3.25rem !important;
  background: var(--white);
  border: 1px solid var(--text-tertiary) !important;
  border-radius: var(--border-radius) !important;
  padding: 0 1rem;
  box-sizing: border-box;
  margin-bottom: 20px !important;
}

.fa-icon-left {
  font-size: 1.2rem;
  color: var(--text-tertiary);
  margin-right: 0.75rem;
  opacity: 0.7;
  flex-shrink: 0;
}

/* Replace the conflicting icon styles with this unified approach */
.input-icon {
  font-size: 1.25rem; /* ~20px */
  color: var(--text-tertiary);
  margin-right: 10px;
  opacity: 0.6;
  flex-shrink: 0;
}

/* Remove the img specific selector since you're using FontAwesome now */
/* Delete or comment out the following */
/* .input-field img.input-icon {...} */

.status-icon {
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  font-size: 16px;
}

.status-icon.success {
  color: #27ae60;
}

.status-icon.error {
  color: #e74c3c;
}

/* Input field styles */
.input-field input {
  flex: 1;
  border: none;
  outline: none;
  background: transparent;
  font-size: 1rem;
  color: var(--text-primary);
  height: 100%;
  padding: 0;
}
.input-field input::placeholder {
  color: var(--text-tertiary);
}

.input-field input:focus {
  outline: none;
}

.input-field:focus-within {
  border-color: var(--accent-primary);
  box-shadow: var(--shadow-focus);
}

/* Validation icon already styled correctly */
.validation-icon {
  position: absolute !important;
  right: 0.8rem !important; /* Match the left padding of the input icon */
  top: 50% !important; /* Center vertically */
  transform: translateY(-50%) !important; /* Ensure perfect vertical alignment */
  font-size: 1.375rem !important; /* Match the size of the input icon */
  color: var(--text-tertiary) !important;
  opacity: 0.8 !important;
  pointer-events: none !important;
  z-index: 5 !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  width: 1.5rem !important; /* Add fixed width for consistent spacing */
  height: 1.5rem !important; /* Add fixed height for consistent spacing */
}

.success-icon {
  color: #27ae60; /* Green */
}

.error-icon {
  color: #e74c3c; /* Red */
}

.error-message {
  color: #e74c3c;
  font-size: var(--font-size-xs);
  margin-top: 0.25rem;
  position: absolute;
  top: 100%;
  left: 0;
}

/* Increase the bottom margin when there's an error message */
.input-field.has-error {
  margin-bottom: calc(var(--space-3) + 1rem); /* Add extra space for error message */
}

'''
'''--- src/styles/SubmitButton.css ---
.submit-container {
  display: flex !important;
  flex-direction: row !important;
  justify-content: space-between !important;
  width: 100% !important;
  margin-top: var(--space-4) !important;
  gap: var(--space-3) !important;
}

/* For side-by-side buttons (like in login/register) */
.submit-container.dual .submit {
  width: 48% !important;
  flex: 0 0 48% !important;
}

/* Standard submit button (width relative to text) */
.submit {
  display: inline-flex !important;
  justify-content: center !important;
  align-items: center !important;
  min-width: 8rem !important; /* minimum width */
  padding: 0 var(--space-4) !important; /* horizontal padding */
  height: 2.8125rem !important; /* 45px - to match login/register */
  color: var(--white) !important;
  background: var(--gold) !important;
  border-radius: 3.125rem !important; /* 50px */
  font-size: var(--font-size-sm) !important;
  font-weight: var(--font-weight-bold) !important;
  cursor: pointer !important;
  transition: all var(--transition-normal) ease !important;
  border: none !important;
  white-space: nowrap !important; /* prevents wrapping */
}

.submit:hover {
  background: var(--dark-gold) !important;
  transform: scale(1.05) !important;
}

.submit.gray {
  background: hsl(0, 0%, 92%) !important;
  color: hsl(0, 0%, 40%) !important;
}

.submit:disabled {
  opacity: 0.7 !important;
  cursor: not-allowed !important;
  transform: none !important;
}

/* Full-width version (e.g., for standalone form submissions) */
.submit.full-width {
  width: 100% !important;
}

/* Small variant */
.submit.small {
  height: 2.25rem !important; /* 36px */
  font-size: var(--font-size-xs) !important;
  padding: 0 var(--space-3) !important;
  min-width: 6rem !important;
}

/* Large variant */
.submit.large {
  height: 3.5rem !important; /* 56px */
  font-size: var(--font-size-base) !important;
  padding: 0 var(--space-5) !important;
  min-width: 10rem !important;
}

/* Button with icon */
.submit.with-icon {
  display: inline-flex !important;
  align-items: center !important;
  gap: var(--space-2) !important;
}

.submit.with-icon svg,
.submit.with-icon img {
  width: 1rem !important;
  height: 1rem !important;
}

/* These styles are for the standalone SubmitButton component only 
   and should not affect login_register.css */

.standalone-submit-container {
  display: flex;
  justify-content: space-between;
  width: 80%;
  margin: var(--space-4) auto 0;
  gap: var(--space-3);
}

.standalone-submit {
  flex: 1;
  padding: 14px 0;
  height: auto; 
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-bold);
  font-family: var(--primary-font);
  background: var(--accent-primary);
  color: var(--black);
  transition: all var(--transition-fast);
  border: none;
  cursor: pointer;
}

.standalone-submit.active {
  background: var(--gold);
  color: var(--black);
}

.standalone-submit:hover {
  transform: scale(1.05);
  background: var(--dark-gold);
  color: var(--white);
}

.standalone-submit:disabled {
  opacity: 0.7;
  cursor: not-allowed;
  transform: none;
}

'''
'''--- src/styles/account_details.css ---
/* ============================= */
/*  Account Page Layout */
/* ============================= */
.account-container {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  min-height: calc(100vh - 100px) !important; /* Adjust for navbar, like in create_task.css */
  padding: var(--space-5) !important;
  background-color: var(--accent-primary) !important; /* Keep the gold background */
  font-family: var(--primary-font) !important;
  position: relative !important;
}

/* ============================= */
/* üåü Scoped Account Details Page Styling */
/* ============================= */
.account-details-page {
  min-height: calc(100vh - 60px) !important; /* Extend to the footer */
  display: flex !important;
  flex-direction: column !important;
  justify-content: center !important;
  align-items: center !important;
  padding: var(--space-5) !important;
  background: var(--accent-primary) !important; /* Match the gold background */
}

.account-details-page .account-container {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  min-height: calc(100vh - 100px) !important; /* Adjust for navbar */
  padding: var(--space-5) !important;
  background-color: var(--accent-primary) !important; /* Gold background */
  font-family: var(--primary-font) !important;
  position: relative !important;
}

/* ============================= */
/*  Account Card (Match create_task.css card style) */
/* ============================= */
.account-card {
  width: 100% !important;
  max-width: 500px !important; /* Match create_task.css max-width */
  background: var(--bg-primary) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-lg) !important;
  font-family: var(--primary-font) !important;
  border: 1px solid var(--border-color) !important;
  overflow: hidden !important;
  padding: var(--space-5) !important;
  position: relative !important;
  text-align: center !important;
}

/* Card Container */
.account-details-page .account-card {
  width: 100% !important;
  max-width: 500px !important; /* Match create_task.css max-width */
  background: var(--bg-primary) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-lg) !important;
  font-family: var(--primary-font) !important;
  border: 1px solid var(--border-color) !important;
  overflow: hidden !important;
  padding: var(--space-5) !important;
  position: relative !important;
  text-align: center !important;
}

.account-card h1 {
  color: var(--text-primary) !important;
  font-size: var(--font-size-xl) !important;
  font-weight: var(--font-weight-bold) !important;
  margin-bottom: var(--space-4) !important;
  margin-top: var(--space-3) !important;
}

/* Title */
.account-details-page .account-card h1 {
  color: var(--text-primary) !important;
  font-size: var(--font-size-xl) !important;
  font-weight: var(--font-weight-bold) !important;
  margin-bottom: var(--space-4) !important;
  margin-top: var(--space-3) !important;
}

/* ============================= */
/*  Back Arrow (Match create_task.css back arrow) */
/* ============================= */
.back-arrow {
  position: absolute !important;
  top: var(--space-3) !important;
  left: var(--space-3) !important;
  font-size: var(--font-size-lg) !important;
  cursor: pointer !important;
  color: var(--text-secondary) !important;
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
  z-index: 10 !important;
}

/* Back Arrow */
.account-details-page .back-arrow {
  position: absolute !important;
  top: var(--space-3) !important;
  left: var(--space-3) !important;
  font-size: var(--font-size-lg) !important;
  cursor: pointer !important;
  color: var(--text-secondary) !important;
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
  z-index: 10 !important;
}

.back-arrow:hover {
  color: var(--text-primary) !important;
  transform: scale(1.2) !important;
}

.account-details-page .back-arrow:hover {
  color: var(--text-primary) !important;
  transform: scale(1.2) !important;
}

/* ============================= */
/* Profile Placeholder */
/* ============================= */
.profile-placeholder {
  width: 100px !important;
  height: 100px !important;
  background: var(--bg-secondary) !important;
  border-radius: 50% !important;
  margin: 0 auto var(--space-4) auto !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  font-size: var(--font-size-xl) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-secondary) !important;
  border: 3px solid var(--accent-primary) !important;
}

/* Profile Placeholder */
.account-details-page .profile-placeholder {
  width: 100px !important;
  height: 100px !important;
  background: var(--bg-secondary) !important;
  border-radius: 50% !important;
  margin: 0 auto var(--space-4) auto !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  font-size: var(--font-size-xl) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-secondary) !important;
  border: 3px solid var(--accent-primary) !important;
}

/* ============================= */
/*  Input Fields (Match create_task.css inputs) */
/* ============================= */
.account-card input {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important;
  margin-bottom: var(--space-4) !important;
  border: 2px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  color: var(--text-primary) !important;
  background: var(--bg-primary) !important;
  font-family: var(--primary-font) !important;
  transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
  outline: none !important;
  text-align: center !important;
}

/* Input Fields */
.account-details-page .account-card input {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important;
  margin-bottom: var(--space-4) !important;
  border: 2px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  color: var(--text-primary) !important;
  background: var(--bg-primary) !important;
  font-family: var(--primary-font) !important;
  transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
  outline: none !important;
  text-align: center !important;
}

.account-card input:read-only {
  background: var(--bg-secondary) !important;
  cursor: default !important;
}

.account-card input:focus {
  border-color: var(--accent-primary) !important;
  box-shadow: var(--shadow-focus) !important;
}

.account-details-page .account-card input:focus {
  border-color: var(--accent-primary) !important;
  box-shadow: var(--shadow-focus) !important;
}

/* ============================= */
/* Dropdown Fields */
/* ============================= */
.dropdown {
  width: 100%;
  padding: var(--space-3);
  margin-bottom: var(--space-4);
  border: 2px solid var(--border-color);
  border-radius: var(--border-radius);
  font-size: var(--font-size-base);
  background: var(--bg-primary);
  color: var(--text-primary);
}

/* ============================= */
/* Buttons (Match create_task.css buttons) */
/* ============================= */
.account-card button {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  margin-top: var(--space-3) !important;
  transition: all var(--transition-fast) ease !important;
}

/* Buttons */
.account-details-page .account-card button {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  margin-top: var(--space-3) !important;
  transition: all var(--transition-fast) ease !important;
}

/* Change Password Button */
.change-password-btn {
  background: var(--accent-primary) !important;
  color: var(--black) !important;
}

.account-details-page .change-password-btn {
  background: var(--accent-primary) !important;
  color: var(--black) !important;
}

.change-password-btn:hover {
  background: var(--dark-gold) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
  color: var(--white) !important;
}

.account-details-page .change-password-btn:hover {
  background: var(--dark-gold) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
  color: var(--white) !important;
}

/* Leave Group Button */
.leave-group-btn {
  background: var(--bg-secondary) !important;
  color: var(--text-primary) !important;
}

.leave-group-btn:hover {
  background: var(--gray) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
  color: var(--white) !important;
}

/* Logout Button */
.logout-btn {
  background: var(--dark-gray) !important;
  color: var(--white) !important;
}

.logout-btn:hover {
  background: var(--gray) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
}

/* ============================= */
/*  Responsive Design */
/* ============================= */
@media (max-width: 768px) {
  .account-container {
    padding: var(--space-3) !important;
  }
  
  .account-card {
    width: 95% !important;
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .account-details-page .account-container {
    padding: var(--space-3) !important;
  }

  .account-details-page .account-card {
    width: 95% !important;
  }
}

@media (max-width: 480px) {
  .account-card h1 {
    font-size: var(--font-size-lg) !important;
  }
  
  .account-card input {
    font-size: var(--font-size-sm) !important;
  }
  
  .account-card button {
    font-size: var(--font-size-sm) !important;
  }
}

/* ============================= */
/*  Error and Success Messages */
/* ============================= */
.error-message {
  color: hsl(0, 100%, 50%) !important;
  font-size: var(--font-size-sm) !important;
  margin-top: var (--space-2) !important;
  margin-bottom: var(--space-3) !important;
  text-align: center !important;
}

.success-message {
  color: hsl(120, 100%, 35%) !important;
  font-size: var(--font-size-sm) !important;
  margin-top: var(--space-2) !important;
  margin-bottom: var(--space-3) !important;
  text-align: center !important;
}

/* ============================= */
/* üåü Success Popup Styling (Based on Backlog Page) */
.account-details-page .success-popup-ac {
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  position: fixed !important;
  top: var(--space-5) !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background-color: hsl(120, 70%, 40%) !important; /* Green background */
  color: var(--white) !important; /* Ensure text is white for contrast */
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-medium) !important;
  text-align: center !important;
  box-shadow: var(--shadow-md) !important;
  z-index: 1000 !important;
  animation: fadeOut 3s ease-in-out forwards !important;
}

/* üåü Error Popup Styling (No Changes) */
.account-details-page .error-popup {
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  position: fixed !important;
  top: var(--space-5) !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background-color: hsl(0, 80%, 50%) !important; /* Red background */
  color: var(--white) !important; /* Ensure text is white for contrast */
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-medium) !important;
  text-align: center !important;
  box-shadow: var(--shadow-md) !important;
  z-index: 1000 !important;
  animation: fadeOut 3s ease-in-out forwards !important;
}

/* Fade-out animation */
@keyframes fadeOut {
  0% {
    opacity: 1 !important;
  }
  70% {
    opacity: 1 !important;
  }
  100% {
    opacity: 0 !important;
  }
}

/* ============================= */
/* Username editing */
/* ============================= */
.editable-field {
  cursor: pointer !important;
  border: 2px dashed var(--border-color) !important;
}

.editable-field:hover {
  border-color: var(--accent-primary) !important;
  background-color: var(--bg-secondary) !important;
}

.helper-text {
  color: var(--text-secondary) !important;
  font-size: var(--font-size-xs) !important;
  margin-top: -15px !important;
  margin-bottom: 10px !important;
  display: block !important;
}

/* Input groups */
.input-group {
  margin-bottom: var(--space-4) !important;
  position: relative !important;
  width: 100% !important;
}

/* Password change section */
.password-change-section {
  width: 100% !important;
  margin-bottom: var(--space-4) !important;
}

.password-actions {
  display: flex !important;
  justify-content: space-between !important;
  gap: var(--space-3) !important;
  margin-top: var(--space-3) !important;
}

.confirm-btn, .cancel-btn {
  flex: 1 !important;
  padding: var(--space-2) var(--space-3) !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  font-weight: var(--font-weight-medium) !important;
  transition: all var(--transition-fast) ease !important;
}

.confirm-btn {
  background-color: var(--accent-primary) !important;
  color: var(--black) !important;
}

.confirm-btn:hover {
  background-color: var(--dark-gold) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
  color: var(--white) !important;
}

.cancel-btn {
  background-color: var(--dark-gray) !important;
  color: var(--white) !important;
}

.cancel-btn:hover {
  background-color: var(--gray) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
}

/* Add these styles for leave project functionality */

/* Leave project button styling */
.leave-group-btn {
  background: var(--dark-gray) !important;
  color: var(--white) !important;
  margin-top: var(--space-3) !important;
}

.leave-group-btn:hover {
  background: hsl(0, 100%, 50%) !important; /* Red for warning */
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
}

/* Leave project confirmation section */
.leave-project-confirmation {
  margin-top: var(--space-3) !important;
  margin-bottom: var(--space-3) !important;
  border: 2px solid hsl(0, 100%, 50%) !important; /* Red border */
  padding: var(--space-3) !important;
  border-radius: var(--border-radius) !important;
  background-color: hsla(0, 100%, 95%, 0.3) !important;
}

.warning-message {
  color: hsl(0, 100%, 50%) !important;
  margin-bottom: var(--space-3) !important;
  font-weight: var(--font-weight-medium) !important;
  display: flex !important;
  align-items: center !important;
  gap: var(--space-2) !important;
  font-size: var(--font-size-sm) !important;
}

.warning-icon {
  font-size: var(--font-size-lg) !important;
}

.confirmation-actions {
  display: flex !important;
  gap: var(--space-3) !important;
}

.confirm-leave-btn {
  background: hsl(0, 100%, 50%) !important; /* Red */
  color: var(--white) !important;
  flex: 1 !important;
  padding: var(--space-2) var(--space-3) !important;
  border-radius: var(--border-radius) !important;
  border: none !important;
  cursor: pointer !important;
  font-weight: var(--font-weight-medium) !important;
  transition: all var(--transition-fast) ease !important;
}

.confirm-leave-btn:hover {
  background: hsl(0, 100%, 40%) !important; /* Darker red */
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
}

/* Disabled button styling */
.leave-group-btn.disabled {
  cursor: not-allowed !important;
  opacity: 0.6 !important;
  background: var(--gray) !important;
}

.leave-group-btn.disabled:hover {
  transform: none !important;
  box-shadow: none !important;
}

'''
'''--- src/styles/backlog.css ---
/* ==========================
   Backlog Page Sizing
========================== */

.backlog-page {
  width: 80% !important;
  min-height: 90vh !important; /* Changed to 90% of the viewport height */
  margin: var(--space-5) auto !important; /* Add top and bottom margin */
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  justify-content: flex-start !important; /* Changed from center to flex-start */
  padding-top: var(--space-5) !important; /* Add some padding at the top */
  padding-bottom: var(--space-8) !important; /* Add more padding at the bottom */
  background-color: var(--bg-secondary) !important;
}

/* Scoped alerts for backlog page */
.backlog-page .alert {
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-medium) !important;
  margin-bottom: var(--space-4) !important;
  text-align: center !important;
  box-shadow: var(--shadow-md) !important;
}

/* Success alert */
.backlog-page .alert.success {
  background-color: hsl(120, 70%, 40%) !important; /* Green */
  color: var(--white) !important;
}

/* Error alert */
.backlog-page .alert.error {
  background-color: hsl(0, 80%, 50%) !important; /* Red */
  color: var(--white) !important;
}

/* Warning alert */
.backlog-page .alert.warning {
  background-color: hsl(45, 100%, 50%) !important; /* Yellow */
  color: var(--black) !important;
}

/* Icon styling for alerts */
.backlog-page .alert .alert-icon {
  margin-right: var(--space-2) !important;
  font-size: var(--font-size-lg) !important;
}

/* ==========================
   Backlog Container
========================== */

.backlog-page .backlog-container {
  width: 100% !important;
  max-width: 1000px !important; /* Increased max width */
  padding: var(--space-6) !important; /* Increased padding */
  background: var(--bg-primary) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-lg) !important; /* Enhanced shadow */
  text-align: center !important;
  position: relative !important;
  border: 1px solid var(--border-color) !important;
  margin-bottom: var(--space-6) !important; /* Increased bottom margin */
  display: flex !important;
  flex-direction: column !important;
}

/* ==========================
   Create Sprint / Task Button (Inside Container)
========================== */

.action-button-container {
  margin-top: var(--space-4) !important;
  padding-top: var(--space-4) !important;
  border-top: 1px solid var(--border-color) !important;
  display: flex !important;
  justify-content: center !important;
}

.create-sprint-button,
.create-task-button {
  background-color: var(--accent-primary) !important;
  color: var(--black) !important; /* Changed to black for better readability on gold */
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  padding: var(--space-3) var(--space-4) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  transition: background-color var(--transition-normal) ease, transform var(--transition-fast) ease, box-shadow var(--transition-fast) ease !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

.create-sprint-button:hover,
.create-task-button:hover {
  background-color: var(--dark-gold) !important; /* Slightly darker gold */
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
  color: var(--white) !important;
}

/* ==========================
   Back Arrow (Outside Container)
========================== */

.back-arrow {
  position: absolute !important;
  top: var(--space-3) !important;
  left: var(--space-3) !important;
  font-size: var(--font-size-lg) !important;
  cursor: pointer !important;
  color: var(--text-secondary) !important; /* Changed to text-secondary for better visibility */
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
  z-index: 10 !important; /* Ensure it appears above other elements */
}

.back-arrow:hover {
  color: var(--text-primary) !important; /* Darker on hover */
  transform: scale(1.2) !important;
}

/* ==========================
   Sprint Overview Layout
========================== */

.sprint-overview-container {
  display: flex !important;
  flex-wrap: wrap !important;
  gap: var(--space-3) !important;
  justify-content: center !important;
  margin-bottom: var(--space-5) !important;
}

.sprint-card {
  width: 220px !important;
  padding: var(--space-4) !important;
  background: var(--bg-primary) !important; /* Changed to bg-primary */
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-md) !important; /* Enhanced shadow */
  text-align: center !important;
  cursor: pointer !important;
  transition: transform var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
  border: 1px solid var(--border-color) !important;
}

.sprint-card:hover {
  background: var(--bg-primary) !important;
  transform: scale(1.05) !important;
  box-shadow: var(--shadow-lg) !important; /* Enhanced shadow on hover */
}

/* Sprint Details */
.sprint-card h3 {
  font-size: var(--font-size-lg) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important; /* Ensure h3 text is readable */
  margin-bottom: var(--space-2) !important;
}

.sprint-card p {
  font-size: var(--font-size-base) !important;
  color: var(--text-secondary) !important; /* Changed to text-secondary for better readability */
  margin: var(--space-1) 0 !important;
}

/* FontAwesome Icons for Started & Completed */
.sprint-status-icon {
  font-size: var(--font-size-base) !important;
  color: var(--dark-gray) !important;
  margin-left: var(--space-1) !important;
}

.sprint-status-icon.completed {
  color: var(--success) !important; /* Green */
}

.sprint-status-icon.not-started {
  color: var(--error) !important; /* Red */
}

/* ==========================
   Sprint Task View
========================== */
.sprint-details-container {
  background: var(--bg-primary) !important;
  padding: var(--space-5) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-md) !important;
  text-align: center !important;
  margin-bottom: var(--space-5) !important;
  color: var(--text-primary) !important;
  border: 1px solid var(--border-color) !important;
  position: relative !important;
  height: 700px !important; /* Increased height to show more tasks */
  overflow: hidden !important; /* Prevent content overflow */
  display: flex !important;
  flex-direction: column !important;
}

/* Sprint Details Title */
.sprint-details-container h2 {
  font-size: var(--font-size-xl) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
  margin-bottom: var(--space-3) !important;
}

/* Sprint Details Info */
.sprint-details-container p {
  font-size: var(--font-size-base) !important;
  color: var(--text-secondary) !important;
  margin-bottom: var(--space-2) !important;
}

/* Create Sprint Button */
.create-sprint-button-container {
  display: flex !important;
  justify-content: center !important;
  margin-top: var(--space-5) !important;
}

.create-sprint-button,
.create-task-button {
  background-color: var(--accent-primary) !important;
  color: var(--black) !important; /* Changed to black for better readability on gold */
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  padding: var(--space-3) var(--space-4) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  transition: background-color var(--transition-normal) ease, transform var(--transition-fast) ease !important;
}

.create-sprint-button:hover,
.create-task-button:hover {
  background-color: var(--dark-gold) !important; /* Slightly darker gold */
  transform: scale(1.05) !important;
}

/* Edit Sprint Icon */
.edit-sprint-button {
  position: absolute !important;
  top: var(--space-2) !important;
  right: var(--space-2) !important;
  font-size: var(--font-size-base) !important;
  color: var(--text-secondary) !important; /* Changed for better visibility */
  cursor: pointer !important;
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
  z-index: 5 !important;
}

.edit-sprint-button:hover {
  color: var(--text-primary) !important;
  transform: scale(1.2) !important;
}

/* Ensure Sprint Cards Have Relative Position */
.sprint-card {
  position: relative !important; /* Needed for positioning the edit button */
}

/* Task List */
.task-list {
  flex-grow: 1 !important; /* Allow the task list to grow within the container */
  overflow-y: auto !important; /* Enable vertical scrolling for tasks */
  padding-right: var(--space-3) !important; /* Add padding for better spacing */
  margin-top: var(--space-3) !important;
  scrollbar-width: thin !important; /* For Firefox */
  scrollbar-color: var(--accent-primary) var(--bg-secondary) !important; /* Custom scrollbar colors */
}

.task-list::-webkit-scrollbar {
  width: 8px !important;
}

.task-list::-webkit-scrollbar-thumb {
  background-color: var(--accent-primary) !important;
  border-radius: var(--border-radius) !important;
}

.task-list::-webkit-scrollbar-track {
  background-color: var(--bg-secondary) !important;
}

.task-card {
  display: flex !important;
  flex-direction: column !important;
  position: relative !important;
  background: var(--bg-primary) !important;
  padding: var(--space-4) !important; /* Increased padding */
  border-radius: var(--border-radius) !important;
  border: 1px solid var(--border-color) !important;
  transition: box-shadow var(--transition-normal) ease !important;
  color: var(--text-primary) !important;
  box-shadow: var(--shadow-md) !important; /* Enhanced shadow */
  margin-bottom: var(--space-4) !important; /* Increased spacing between tasks */
  height: auto !important;
  min-height: 120px !important; /* Slightly larger minimum height */
}

/* Task Content (Description) */
.task-content {
  flex-grow: 1 !important;
  font-size: var(--font-size-base) !important;
  color: var(--text-primary) !important;
  word-break: break-word !important; /* Allow long text to wrap */
  margin-bottom: var(--space-3) !important;
  padding-right: var(--space-5) !important; /* Add space for the edit button */
}

/* Task Controls */
.task-controls {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
  gap: var(--space-3) !important;
  flex-wrap: wrap !important; /* Allow wrapping on smaller screens */
}

/* Task Status Dropdown */
.task-status {
  padding: var(--space-2) !important;
  font-weight: var(--font-weight-bold) !important;
  border-radius: var(--border-radius) !important;
  background-color: var(--bg-primary) !important;
  border: 1px solid var(--border-color) !important;
  text-align: center !important;
  transition: border-color var(--transition-normal) ease !important;
  min-width: 120px !important; /* Shrink width */
  max-width: 150px !important; /* Prevent it from growing too large */
}

/* Task Assignee Dropdown */
/* Task Assignee Dropdown */
.task-assignee-dropdown {
  padding: var(--space-2) !important;
  font-weight: var(--font-weight-medium) !important;
  border-radius: var(--border-radius) !important;
  color: var(--text-primary) !important;
  border: 1px solid var(--border-color) !important;
  background-color: var(--bg-primary) !important;
  transition: border-color var(--transition-normal) ease !important;
  min-width: 150px !important; /* Ensure consistent width */
  max-width: 200px !important; /* Prevent it from growing too large */
  height: 40px !important; /* Match the height of the date field */
  line-height: 1.5 !important; /* Adjust line height for better alignment */
  box-shadow: none !important; /* Remove any extra outline or shadow */
}

/* Remove outline on focus */
.task-assignee-dropdown:focus {
  outline: none !important;
  border-color: var(--accent-primary) !important; /* Highlight border on focus */
  box-shadow: var(--shadow-focus) !important; /* Add subtle shadow for focus */
}

/* Task Date */
.task-date {
  font-size: var(--font-size-sm) !important;
  color: var(--text-secondary) !important;
  flex-shrink: 0 !important; /* Prevent shrinking */
  white-space: nowrap !important; /* Prevent wrapping */
}

/* Task Content - Add padding for better spacing */
.task-content {
  padding: var(--space-3) !important;
  border-bottom: 1px solid var(--border-color) !important;
  text-align: left !important; /* Changed to left alignment for better readability */
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
  word-break: break-word !important; /* Allow long text to wrap properly */
}

/* Task Details - Better space distribution */
.task-details {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
  padding: var(--space-3) !important;
  color: var(--text-primary) !important;
  flex-wrap: wrap !important; /* Allow wrapping on small screens */
  gap: var(--space-2) !important; /* Add gap between wrapped items */
}

/* Task Date - Better formatting */
.task-date {
  color: var(--text-tertiary) !important;
  font-size: var(--font-size-sm) !important;
}

/* Status Colors */
.task-status.todo { background-color: var(--gray) !important; color: var(--white) !important; }
.task-status.in-progress { background-color: var(--blue) !important; color: var(--white) !important; }
.task-status.completed { background-color: var(--green) !important; color: var(--white) !important; }

/* ==========================
   Status Indicator Styling (Updated)
========================== */

/* Status Dropdown - Keep the container neutral */
.task-status {
  padding: var(--space-2) !important;
  font-weight: var(--font-weight-bold) !important;
  border-radius: var(--border-radius) !important;
  background-color: var(--bg-primary) !important; /* White background */
  border: 1px solid var(--border-color) !important;
  display: inline-flex !important;
  align-items: center !important;
  justify-content: center !important;
  min-width: 120px !important; /* Ensure consistent width */
}

/* Status Text Colors - Using DevHive global variables */
.task-status.todo { 
  color: hsl(0, 100%, 50%) !important; /* Red for "To Do" tasks */
  border-left: 3px solid hsl(0, 100%, 50%) !important; /* Red left border */
}

.task-status.in-progress { 
  color: var(--accent-primary) !important; /* DevHive gold for "In Progress" tasks */
  border-left: 3px solid var(--accent-primary) !important; /* Gold left border */
}

.task-status.completed { 
  color: hsl(120, 100%, 35%) !important; /* Green for "Completed" tasks */
  border-left: 3px solid hsl(120, 100%, 35%) !important; /* Green left border */
}

/* Status Icons - Add icons for better visual indication */
.task-status::before {
  font-family: "Font Awesome 5 Free" !important;
  margin-right: var(--space-2) !important;
  font-weight: 900 !important;
}

.task-status.todo::before { 
  content: "\f111" !important; /* Circle icon for Todo */
  color: hsl(0, 100%, 50%) !important;
}

.task-status.in-progress::before { 
  content: "\f2f1" !important; /* Spinner icon for In Progress */
  color: var(--accent-primary) !important;
}

.task-status.completed::before { 
  content: "\f00c" !important; /* Check icon for Completed */
  color: hsl(120, 100%, 35%) !important;
}

/* Hover effects for better interactivity */
.task-status:hover {
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-sm) !important;
  cursor: pointer !important;
}

/* ==========================
   Backlog Actions & Buttons
========================== */

.backlog-page .backlog-actions {
  margin-top: var(--space-5) !important;
  display: flex !important;
  justify-content: center !important;
  gap: var(--space-3) !important;
}

.backlog-page .backlog-actions button {
  padding: var(--space-3) var(--space-4) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  cursor: pointer !important;
  border-radius: var(--border-radius) !important;
  transition: var(--transition-normal) ease !important;
  border: none !important;
}

.backlog-page .button-primary {
  background: var(--accent-primary) !important;
  color: var(--black) !important; /* Changed to black for better readability on gold */
}

.backlog-page .button-primary:hover {
  background: var(--dark-gold) !important;
  transform: translateY(-2px) !important;
}

.backlog-page .button-secondary {
  background: var(--bg-secondary) !important;
  color: var(--text-primary) !important;
}

.backlog-page .button-secondary:hover {
  background: var(--gray) !important;
  color: var(--white) !important;
  transform: translateY(-2px) !important;
}

/* ==========================
   Success Pop-up
========================== */

/* Success Pop-Up */
.backlog-page .success-popup {
  position: fixed !important;
  top: var(--space-5) !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background: hsl(120, 70%, 40%) !important; /* Match success color from LoginRegister */
  color: var(--white) !important; /* Ensure text is white for contrast */
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  text-align: center !important;
  box-shadow: var(--shadow-md) !important;
  z-index: 1000 !important;
  animation: fadeOut 3s ease-in-out forwards !important;
  max-width: 400px !important; /* Limit the width for better readability */
  word-wrap: break-word !important; /* Ensure long text wraps */
}

/* Error Pop-Up */
.backlog-page .error-popup {
  position: fixed !important;
  top: var(--space-5) !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background: hsl(0, 70%, 50%) !important; /* Bright red for errors */
  color: var(--white) !important; /* Ensure text is white for contrast */
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  text-align: center !important;
  box-shadow: var(--shadow-md) !important;
  z-index: 1000 !important;
  animation: fadeOut 3s ease-in-out forwards !important;
  max-width: 400px !important; /* Limit the width for better readability */
  word-wrap: break-word !important; /* Ensure long text wraps */
}

/* Fade-Out Animation */
@keyframes fadeOut {
  0% {
    opacity: 1 !important;
  }
  70% {
    opacity: 1 !important;
  }
  100% {
    opacity: 0 !important;
  }
}

/* =============================
   Back Arrow Inside Sprint View
============================= */
.sprint-details-container .back-arrow.sprint-view {
  position: absolute !important;
  top: var(--space-3) !important;
  left: var(--space-3) !important;
  font-size: var(--font-size-lg) !important;
  cursor: pointer !important;
  color: var(--text-secondary) !important; /* Changed for better visibility */
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
  z-index: 10 !important;
}

.sprint-details-container .back-arrow.sprint-view:hover {
  color: var(--text-primary) !important;
  transform: scale(1.2) !important;
}

/* =============================
   Backlog Item
============================= */
.backlog-item {
  background: var(--bg-primary) !important; /* Changed to bg-primary */
  border-left: 4px solid var(--accent-primary) !important;
  border-radius: var(--border-radius) !important;
  padding: var(--space-3) !important;
  margin-bottom: var(--space-3) !important;
  box-shadow: var(--shadow-sm) !important;
  color: var (--text-primary) !important; /* Changed to text-primary for better readability */
  text-align: left !important;
}

/* =============================
   Backlog Header
============================= */
.backlog-header {
  background: var(--accent-primary) !important; /* Changed to accent-primary */
  color: var(--black) !important; /* Changed to black for better readability on gold */
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  margin-bottom: var(--space-4) !important;
  text-align: center !important;
}

.backlog-header h2 {
  color: var(--black) !important; /* Changed to black for better readability on gold */
  margin: 0 !important;
  font-size: var(--font-size-xl) !important;
}

/* =============================
   Backlog Filters
============================= */
.backlog-filters {
  background: var(--bg-secondary) !important; /* Changed to bg-secondary */
  padding: var(--space-3) !important;
  border-radius: var(--border-radius) !important;
  margin-bottom: var(--space-4) !important;
  color: var(--text-primary) !important; /* Changed to text-primary for better readability */
  display: flex !important;
  flex-wrap: wrap !important;
  justify-content: center !important;
  gap: var (--space-3) !important;
}

.backlog-filters h3 {
  color: var(--text-primary) !important; /* Changed to text-primary for better readability */
  margin: 0 0 var(--space-2) 0 !important;
  font-size: var(--font-size-lg) !important;
}

/* Message for no tasks or sprints */
.no-tasks-message,
.no-sprints-message {
  color: var(--text-secondary) !important;
  font-size: var(--font-size-base) !important;
  font-style: italic !important;
  margin: var(--space-5) 0 !important;
}

/* ==========================
   Global Page Background Fix
========================== */
.content {
  background-color: var(--bg-secondary) !important;
}

main {
  background-color: var(--bg-secondary) !important;
}

body {
  background-color: var(--bg-secondary) !important;
}

/* Add these styles to your existing backlog.css */

/* Sprint status indicators */
.sprint-status {
  margin-top: var(--space-2) !important;
  font-size: var(--font-size-sm) !important;
  font-weight: var(--font-weight-medium) !important;
}

.status-started {
  color: var(--accent-primary) !important;
  border: 1px solid var(--accent-primary) !important;
  border-radius: var(--border-radius) !important;
  padding: var (--space-1) var(--space-2) !important;
  display: inline-block !important;
}

.status-not-started {
  color: var (--text-tertiary) !important;
  border: 1px solid var(--text-tertiary) !important;
  border-radius: var(--border-radius) !important;
  padding: var (--space-1) var(--space-2) !important;
  display: inline-block !important;
}

/* Button icon */
.button-icon {
  margin-right: var(--space-2) !important;
}

/* Add these styles for sprint status indicators */
.sprint-status {
  margin-top: var(--space-2) !important;
  font-size: var(--font-size-sm) !important;
  font-weight: var(--font-weight-medium) !important;
}

.status-started {
  color: var(--accent-primary) !important;
  border: 1px solid var(--accent-primary) !important;
  border-radius: var(--border-radius) !important;
  padding: var(--space-1) var(--space-2) !important;
  display: inline-block !important;
}

.status-not-started {
  color: var(--text-tertiary) !important;
  border: 1px solid var(--text-tertiary) !important;
  border-radius: var(--border-radius) !important;
  padding: var(--space-1) var(--space-2) !important;
  display: inline-block !important;
}

.status-completed {
  color: var(--success-color, #28a745) !important;
  border: 1px solid var(--success-color, #28a745) !important;
  border-radius: var(--border-radius) !important;
  padding: var(--space-1) var(--space-2) !important;
  display: inline-block !important;
}

/* Sprint details section updates */
.sprint-details-container .status-info {
  display: flex !important;
  gap: var(--space-4) !important;
  justify-content: center !important;
  margin-bottom: var(--space-4) !important;
}

.sprint-details-container .status-info p {
  margin: 0 !important;
  display: flex !important;
  align-items: center !important;
  gap: var(--space-2) !important;
}

/* Button icon */
.button-icon {
  margin-right: var(--space-2) !important;
}

/* Edit Description Textarea */
.edit-description {
  width: 100% !important;
  padding: var(--space-3) !important;
  font-size: var(--font-size-base) !important;
  border: 1px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  resize: none !important;
  box-sizing: border-box !important;
  margin-bottom: var(--space-2) !important;
}

/* Character Counter */
.char-counter {
  font-size: var(--font-size-xs) !important;
  color: var(--text-tertiary) !important;
  text-align: right !important;
  display: block !important;
  margin-top: var(--space-1) !important;
}

/* Save and Cancel Buttons */
.backlog-page .save-btn,
.backlog-page .cancel-btn {
  font-size: 1.5rem !important; /* Match size with edit button */
  padding: var(--space-2) var(--space-3) !important; /* Add padding for better clickability */
  background-color: transparent !important; /* Transparent background */
  color: var(--text-primary) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  transition: transform var(--transition-fast) ease, color var(--transition-normal) ease !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  width: 50px !important; /* Ensure consistent size */
  height: 50px !important; /* Ensure consistent size */
}

.backlog-page .save-btn {
  color: hsl(145, 63%, 42%) !important;
}

.backlog-page .save-btn:hover {
  transform: scale(1.2) !important;
  color: hsl(145, 63%, 32%) !important;
}

.backlog-page .cancel-btn {
  color: hsl(0, 70%, 50%) !important;
}

.backlog-page .cancel-btn:hover {
  transform: scale(1.2) !important;
  color: hsl(0, 70%, 40%) !important;
}

/* Edit Task Icon */
.backlog-page .edit-task-icon {
  font-size: 1.5rem !important; /* Increased size for better clickability */
  cursor: pointer !important;
  color: var(--text-secondary) !important;
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
}

.backlog-page .edit-task-icon:hover {
  color: var(--text-primary) !important; /* Change color on hover */
  transform: scale(1.2) !important; /* Slightly enlarge on hover */
}

/* Save Button (Checkmark) */
.save-btn {
  font-size: 1.5rem !important; /* Match size with edit icon */
  padding: var(--space-2) var(--space-3) !important; /* Add padding for better clickability */
  background-color: var(--success) !important; /* Green background for save */
  color: var(--white) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  transition: transform var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
}

.save-btn:hover {
  transform: scale(1.2) !important; /* Slightly enlarge on hover */
  box-shadow: var(--shadow-md) !important; /* Add shadow on hover */
}

/* Cancel Button (X) */
.cancel-btn {
  font-size: 1.5rem !important; /* Match size with save button */
  padding: var(--space-2) var(--space-3) !important; /* Add padding for better clickability */
  background-color: var(--error) !important; /* Red background for cancel */
  color: var(--white) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  transition: transform var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
}

.cancel-btn:hover {
  transform: scale(1.2) !important; /* Slightly enlarge on hover */
  box-shadow: var(--shadow-md) !important; /* Add shadow on hover */
}

'''
'''--- src/styles/board.css ---
/* src/styles/components/board.css */
/* Board Component Styling */
.board-page {
  display: flex !important;
  justify-content: center !important;
  padding: var(--space-5) !important;
  min-height: 100vh !important; /* Min-height instead of fixed height */
  background-color: var(--bg-secondary) !important;
  overflow: auto !important; /* Allow scrolling when needed */
}

.board-container {
  width: 100% !important;
  max-width: 1400px !important;
  background: var(--bg-primary) !important;
  padding: var(--space-5) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-md) !important;
  display: flex !important;
  flex-direction: column !important;
  min-height: calc(100vh - 2 * var(--space-5)) !important; /* Min-height instead of height */
  overflow: visible !important; /* Allow content to determine height */
}

.board-header {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
  margin-bottom: var(--space-5) !important;
  padding-bottom: var(--space-4) !important;
  border-bottom: 1px solid var(--border-color) !important;
}

.board-title {
  font-size: var(--font-size-2xl) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
  margin: 0 !important;
}

.sprint-selector {
  display: flex !important;
  align-items: center !important;
  gap: var(--space-3) !important;
}

.sprint-selector label {
  font-size: var(--font-size-base) !important;
  color: var(--text-secondary) !important;
  font-weight: var(--font-weight-medium) !important;
}

.sprint-selector select {
  padding: var(--space-2) var(--space-3) !important;
  border: 1px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  background-color: var(--bg-primary) !important;
  color: var(--text-primary) !important;
  font-size: var(--font-size-base) !important;
  width: auto !important;
  min-width: 200px !important;
  cursor: pointer !important;
}

.sprint-selector select:focus {
  border-color: var(--accent-primary) !important;
  outline: none !important;
}

.board-columns {
  display: grid !important;
  grid-template-columns: repeat(3, 1fr) !important;
  gap: var(--space-4) !important;
  flex: 1 !important; /* Take remaining space in container */
  height: 100% !important;
  max-height: calc(100vh - 200px) !important;
  min-height: 400px !important;
  overflow: hidden !important; /* Hide overflow */
  min-height: 0 !important; /* Critical for flex items to respect parent boundaries */
}

.board-column-wrapper {
  min-height: 0 !important; /* Critical for grid items to respect parent boundaries */
  display: flex !important;
  flex-direction: column !important;
}

.board-column {
  background: var(--bg-secondary) !important;
  border-radius: var(--border-radius) !important;
  display: flex !important;
  flex-direction: column !important;
  overflow: hidden !important; /* Hide overflow at column level */
  flex: 1 !important; /* Take up all available space */
  height: 100% !important;
  max-height: 100% !important;
  min-height: 0 !important; /* Critical for flex children */
}

.board-column-header {
  flex-shrink: 0 !important; /* Prevent header from shrinking */
  background: var(--accent-primary) !important;
  color: var(--black) !important;
  padding: var(--space-3) var(--space-4) !important;
  border-top-left-radius: var(--border-radius) !important;
  border-top-right-radius: var(--border-radius) !important;
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
}

.board-column-header h3 {
  font-size: var(--font-size-lg) !important;
  font-weight: var(--font-weight-bold) !important;
  margin: 0 !important;
  color: var(--black) !important;
}

.task-count {
  background: var(--bg-primary) !important;
  color: var(--text-primary) !important;
  border-radius: 50% !important;
  height: 24px !important;
  width: 24px !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  font-size: var(--font-size-sm) !important;
  font-weight: var(--font-weight-bold) !important;
}

/* Task List */
/* Task List */
.task-list {
  padding: var(--space-3) !important;
  flex: 1 !important; /* Allow the task list to take up available space */
  height: 100% !important; /* Ensure it fills the column height */
  max-height: calc(100% - 50px) !important; /* Account for the header height */
  overflow-y: auto !important; /* Enable vertical scrolling */
  overflow-x: hidden !important; /* Hide horizontal overflow */
  background: var(--bg-secondary) !important;
  transition: background-color 0.2s ease !important;
  display: flex !important;
  flex-direction: column !important; /* Ensure tasks stack vertically */
  gap: var(--space-3) !important; /* Add spacing between tasks */
}

/* Scrollbar Styling */
.task-list::-webkit-scrollbar {
  width: 0.4rem !important;
}

.task-list::-webkit-scrollbar-track {
  background: var(--bg-secondary) !important;
  border-radius: var(--border-radius) !important;
}

.task-list::-webkit-scrollbar-thumb {
  background-color: var(--gray) !important;
  border-radius: var(--border-radius) !important;
}

.task-list::-webkit-scrollbar-thumb:hover {
  background-color: var(--dark-gray) !important;
}

/* Firefox scrollbar styling */
.task-list {
  scrollbar-width: thin !important;
  scrollbar-color: var(--gray) var(--bg-secondary) !important;
}

/* Highlight effect for drop targets */
.task-list.highlight-drop-target {
  background-color: hsla(var(--gold-hue), var(--gold-saturation), 85%, 0.3) !important;
  border: 2px dashed var(--accent-primary) !important;
}

/* Task Card */
/* Task Card */
.task-card {
  background: var(--bg-primary) !important;
  border: 1px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  padding: var(--space-3) !important;
  margin-bottom: var(--space-3) !important;
  box-shadow: var(--shadow-sm) !important;
  transition: transform var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
  cursor: grab !important;
  user-select: none !important; /* Prevents text selection during drag */
  height: auto !important; /* Allow height to adjust dynamically */
  min-height: 80px !important; /* Set a minimum height for task cards */
  flex-shrink: 0 !important; /* Prevent shrinking */
}

.task-card:last-child {
  margin-bottom: 0 !important;
}

.task-card:hover {
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
}

.task-card.dragging {
  opacity: 0.6 !important;
  border: 2px solid var(--accent-primary) !important;
  background-color: hsla(var(--gold-hue), var(--gold-saturation), 90%) !important;
}

.task-header {
  display: flex !important;
  justify-content: space-between !important;
  align-items: flex-start !important;
  margin-bottom: var(--space-2) !important;
}

.task-title {
  font-weight: var(--font-weight-medium) !important;
  color: var(--text-primary) !important;
  font-size: var(--font-size-base) !important;
  flex-grow: 1 !important;
}

.task-actions {
  color: var(--text-tertiary) !important;
  cursor: pointer !important;
  font-size: var(--font-size-sm) !important;
}

.task-actions:hover {
  color: var(--accent-primary) !important;
}

.task-content {
  font-size: var(--font-size-sm) !important;
  color: var(--text-secondary) !important;
}

.task-meta {
  display: flex !important;
  justify-content: space-between !important;
  margin-top: var(--space-3) !important;
  color: var(--text-tertiary) !important;
  font-size: var(--font-size-xs) !important;
}

.task-assignee, .task-date {
  display: flex !important;
  align-items: center !important;
  gap: var(--space-1) !important;
}

/* Task Assignee Initials */
.task-assignee-initials {
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
  margin-right: var(--space-2) !important;
}

/* Task Assignee Dropdown */
/* Container: Remove outline and center content */
.task-assignee.dropdown {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
  display: flex !important;
  align-items: center !important; /* vertical centering */
  height: 100% !important; /* inherit height from parent */
  padding: 0 !important; /* remove spacing if any */
  background: transparent !important; /* remove background if needed */
}

/* Dropdown: keep everything the same, just ensure it's vertically centered */
.task-assignee-dropdown {
  margin: 0 !important;
  height: 40px !important; /* already set, but ensures consistency */
  display: flex !important;
  align-items: center !important;
  background-color: var(--bg-primary) !important;
  border: 1px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  font-weight: var(--font-weight-medium) !important;
  padding: 0 var(--space-3) !important;
  box-shadow: none !important;
}

.task-assignee-dropdown:hover {
  border-color: var(--text-secondary) !important;
}

.empty-column-message {
  color: var(--text-tertiary) !important;
  text-align: center !important;
  padding: var(--space-4) !important;
  font-size: var(--font-size-sm) !important;
  font-style: italic !important;
}

.loading-message,
.error-message,
.info-message {
  text-align: center !important;
  padding: var(--space-6) !important;
  font-size: var(--font-size-lg) !important;
}

.loading-message {
  color: var(--text-secondary) !important;
}

.error-message {
  color: hsl(0, 100%, 50%) !important;
}

.info-message {
  color: var(--text-secondary) !important;
}

.success-message {
  position: fixed !important;
  top: var(--space-5) !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background-color: hsl(120, 100%, 35%) !important;
  color: var(--white) !important;
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-weight: var(--font-weight-bold) !important;
  box-shadow: var(--shadow-md) !important;
  animation: fadeOut 3s ease !important;
  z-index: 1000 !important;
}

/* Success Pop-Up */
.board-page .success-popup {
  position: fixed !important;
  top: var(--space-5) !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background: hsl(120, 70%, 40%) !important; /* Match success color from LoginRegister */
  color: var(--white) !important; /* Ensure text is white for contrast */
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  text-align: center !important;
  box-shadow: var(--shadow-md) !important;
  z-index: 1000 !important;
  animation: fadeOut 3s ease-in-out forwards !important;
  max-width: 400px !important; /* Limit the width for better readability */
  word-wrap: break-word !important; /* Ensure long text wraps */
}

/* Error Pop-Up */
.board-page .error-popup {
  position: fixed !important;
  top: var(--space-5) !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background: hsl(0, 70%, 50%) !important; /* Bright red for errors */
  color: var(--white) !important; /* Ensure text is white for contrast */
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  text-align: center !important;
  box-shadow: var(--shadow-md) !important;
  z-index: 1000 !important;
  animation: fadeOut 3s ease-in-out forwards !important;
  max-width: 400px !important; /* Limit the width for better readability */
  word-wrap: break-word !important; /* Ensure long text wraps */
}

/* Fade-Out Animation */
@keyframes fadeOut {
  0% {
    opacity: 1 !important;
  }
  70% {
    opacity: 1 !important;
  }
  100% {
    opacity: 0 !important;
  }
}

@media (max-width: 1024px) {
  .board-page {
    height: auto !important; 
    min-height: 100vh !important;
    overflow: auto !important;
    padding-bottom: var(--space-6) !important;
  }

  .board-container {
    height: auto !important;
    min-height: auto !important; /* Let content determine height */
    overflow: visible !important;
    margin-bottom: var(--space-6) !important;
  }

  .board-columns {
    grid-template-columns: 1fr !important;
    gap: var(--space-5) !important;
    height: auto !important;
    max-height: none !important; /* Remove the max height limit */
    overflow: visible !important;
  }
  
  .board-column {
    height: auto !important;
    overflow: hidden !important;
    min-height: 400px !important;
    margin-bottom: var(--space-5) !important;
  }

  .board-column-wrapper {
    min-height: 400px !important; /* Ensure minimum height in mobile */
    margin-bottom: var(--space-5) !important; /* Add space between wrappers */
  }

  .board-header {
    flex-direction: column !important;
    align-items: flex-start !important;
    gap: var(--space-3) !important;
  }
  
  .sprint-selector {
    width: 100% !important;
  }
  
  .sprint-selector select {
    width: 100% !important;
  }

  .task-list {
    overflow-y: auto !important;
    /* Increase the task list height in mobile view */
    min-height: 350px !important; 
    max-height: 450px !important;
  }
  
  /* Add extra margin to the bottom of the page to prevent content from being cut off */
  .board-columns:last-child {
    margin-bottom: var(--space-8) !important; 
  }
}
'''
'''--- src/styles/components/backlog.css ---
.backlog-container {
    padding: 2rem;
    background: var(--neutral-200);
    min-height: calc(100vh - 160px); /* Account for navbar and footer */
}

.backlog-header {
    background: var(--comp-blue);
    color: var(--neutral-100);
    padding: 1.5rem 2rem;
    border-radius: var(--border-radius);
    margin-bottom: 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.backlog-filters {
    background: var(--neutral-100);
    padding: 1rem;
    border-radius: var(--border-radius);
    margin-bottom: 2rem;
    display: flex;
    gap: 1rem;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.filter-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.filter-label {
    color: var(--neutral-700);
    font-weight: 600;
}

.filter-select {
    padding: 0.5rem;
    border: 1px solid var(--neutral-300);
    border-radius: var(--border-radius);
    background: var(--neutral-100);
    color: var(--neutral-800);
}

.backlog-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.backlog-item {
    background: var(--neutral-100);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: 1.5rem;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border-left: 4px solid transparent;
}

.backlog-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.backlog-item.priority-high {
    border-left-color: var(--error);
}

.backlog-item.priority-medium {
    border-left-color: var(--warning);
}

.backlog-item.priority-low {
    border-left-color: var(--info);
}

.item-status {
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    font-size: 0.875rem;
    font-weight: 600;
    text-align: center;
    min-width: 100px;
}

.status-todo {
    background: var(--neutral-200);
    color: var(--neutral-700);
}

.status-in-progress {
    background: var(--blue-light);
    color: var(--neutral-100);
}

.status-review {
    background: var(--analog-orange);
    color: var(--neutral-100);
}

.status-done {
    background: var(--success);
    color: var(--neutral-100);
}

.item-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.item-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--neutral-900);
}

.item-description {
    color: var(--neutral-600);
    font-size: 0.875rem;
}

.item-meta {
    display: flex;
    gap: 1rem;
    align-items: center;
    font-size: 0.875rem;
    color: var(--neutral-500);
}

.item-actions {
    display: flex;
    gap: 0.5rem;
}

.action-button {
    padding: 0.5rem;
    border-radius: var(--border-radius);
    border: none;
    background: transparent;
    color: var(--neutral-600);
    cursor: pointer;
    transition: color 0.2s ease, background-color 0.2s ease;
}

.action-button:hover {
    background: var(--neutral-200);
    color: var(--comp-blue);
}

.action-button.edit:hover {
    color: var(--comp-blue);
}

.action-button.delete:hover {
    color: var(--error);
}

/* Responsive Design */
@media (max-width: 768px) {
    .backlog-container {
        padding: 1rem;
    }

    .backlog-item {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .backlog-filters {
        flex-direction: column;
        align-items: stretch;
    }

    .filter-group {
        flex-direction: column;
        align-items: stretch;
    }
}

/* Empty State */
.backlog-empty {
    text-align: center;
    padding: 3rem;
    background: var(--neutral-100);
    border-radius: var(--border-radius);
    color: var(--neutral-600);
}

.backlog-empty-icon {
    font-size: 3rem;
    color: var(--neutral-400);
    margin-bottom: 1rem;
}

/* Loading State */
.backlog-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
}

.loading-spinner {
    color: var(--primary-gold);
    font-size: 2rem;
}
'''
'''--- src/styles/contacts.css ---
/* ==========================
   Contacts Page Container
========================== */
.contacts-page {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important; /* Center items vertically */
  min-height: calc(100vh - 100px) !important; /* Adjust for navbar */
  padding: var(--space-5) !important;
  background-color: var(--bg-secondary) !important;
}
.no-contacts-text {
    color: white !important;
    text-align: center !important;
    font-size: var(--font-size-base) !important;
    margin-top: var(--space-3) !important;
    align:"center"  ;
  }
  
/* ==========================
   Contacts Container
========================== */
.contact-container {
  width: 80% !important;
  max-width: 800px !important; /* Consistent with message.css */
  background: var(--bg-primary) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-lg) !important; /* Enhanced shadow for prominence */
  font-family: var(--primary-font) !important;
  border: 1px solid var(--border-color) !important;
  overflow: hidden !important; /* Prevents content from breaking the container */
  margin-bottom: var(--space-5) !important;
}

/* ==========================
   Contacts Header
========================== */
.contact-header {
  background: var(--accent-primary) !important; /* Using gold from global colors, matches message.css */
  color: var(--black) !important; /* Better contrast on gold background */
  text-align: center !important;
  padding: var(--space-4) !important;
  border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
  position: relative !important;
  z-index: 2 !important; /* Ensures header is above content */
}

.contact-header h1 {
  color: var(--black) !important; /* Better contrast on gold */
  font-size: var(--font-size-xl) !important; /* Consistent with message.css */
  font-weight: var(--font-weight-bold) !important;
  margin: 0 !important;
}

.contact-header p {
  color: var(--black) !important; /* Better contrast on gold */
  font-size: var(--font-size-base) !important;
  margin-top: var(--space-2) !important;
  margin-bottom: 0 !important;
  opacity: 0.9 !important; /* Slight opacity for visual hierarchy */
}

/* ==========================
   Contact Form
========================== */
.contact-form {
  width: 100% !important;
  padding: var(--space-5) !important;
  background: var(--bg-primary) !important; /* Changed to match container background */
  border-bottom: 1px solid var(--border-color) !important; /* Subtle separation */
}

.contact-form-title {
  font-size: var(--font-size-lg) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
  margin-bottom: var(--space-4) !important;
  text-align: center !important;
}

.contact-form label {
  display: block !important;
  font-size: var(--font-size-base) !important;
  color: var(--text-primary) !important;
  margin-bottom: var(--space-2) !important;
  font-weight: var(--font-weight-medium) !important;
}

.contact-form input,
.contact-form textarea {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important;
  margin-bottom: var(--space-4) !important;
  border: 2px solid var(--border-color) !important; /* Consistent with message.css */
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  color: var (--text-primary) !important;
  background: var(--bg-primary) !important;
  font-family: var(--primary-font) !important;
  transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
}

.contact-form input:focus,
.contact-form textarea:focus {
  border-color: var(--accent-primary) !important;
  box-shadow: var(--shadow-focus) !important;
  outline: none !important;
}

.contact-form button {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important;
  background: var(--accent-primary) !important;
  color: var(--black) !important; /* Better readability on gold */
  border: none !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  cursor: pointer !important;
  transition: all var(--transition-fast) ease !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

.contact-form button:hover {
  background: var(--dark-gold) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
  color: var(--white) !important; /* Consistent with message.css */
}

.contact-form button i {
  margin-left: var(--space-2) !important;
  font-size: var(--font-size-base) !important;
}

/* ==========================
   Contact List
========================== */
.contact-list-container {
  padding: var(--space-4) !important;
  max-height: 60vh !important; /* Consistent with message.css */
  overflow-y: auto !important;
  background-color: var(--bg-primary) !important;
  scrollbar-width: thin !important;
  scrollbar-color: var(--accent-primary) var(--bg-secondary) !important;
}

/* Customize scrollbar for Webkit browsers */
.contact-list-container::-webkit-scrollbar {
  width: 8px !important;
}

.contact-list-container::-webkit-scrollbar-track {
  background: var(--bg-secondary) !important;
  border-radius: 10px !important;
}

.contact-list-container::-webkit-scrollbar-thumb {
  background-color: var(--accent-primary) !important;
  border-radius: 10px !important;
}

.contact-list {
  padding: var(--space-4) !important;
  height: 60vh !important; /* Consistent with message.css */
  overflow-y: auto !important;
  background-color: var(--bg-primary) !important;
  scrollbar-width: thin !important;
  scrollbar-color: var(--accent-primary) var(--bg-secondary) !important;
}

/* Customize scrollbar for Webkit browsers */
.contact-list::-webkit-scrollbar {
  width: 8px !important;
}

.contact-list::-webkit-scrollbar-track {
  background: var(--bg-secondary) !important;
  border-radius: 10px !important;
}

.contact-list::-webkit-scrollbar-thumb {
  background-color: var(--accent-primary) !important;
  border-radius: 10px !important;
}

.contact-list-item {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
  padding: var(--space-3) !important;
  border-bottom: 1px solid var(--border-color) !important;
  background: var(--bg-primary) !important;
  cursor: pointer !important;
  transition: transform var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
  animation: fadeIn 0.3s ease-out !important;
  position: relative !important;
}

.contact-list-item:hover {
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-sm) !important;
  background: var(--bg-secondary) !important;
}

.contact-list-item:last-child {
  border-bottom: none !important;
}

/* ==========================
   Contact Info
========================== */
.contact-info {
  display: flex !important;
  align-items: center !important;
  gap: var(--space-3) !important;
}

.contact-avatar {
  width: 50px !important;
  height: 50px !important;
  border-radius: 50% !important;
  background: var(--accent-primary) !important; /* Gold background */
  color: var(--black) !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  font-size: var(--font-size-lg) !important;
  font-weight: var(--font-weight-bold) !important;
}

.contact-details {
  display: flex !important;
  flex-direction: column !important;
}

.contact-name {
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
  margin-bottom: var(--space-1) !important;
}

.contact-email,
.contact-role {
  font-size: var(--font-size-sm) !important;
  color: var(--text-secondary) !important;
}

/* ==========================
   Contact Actions
========================== */
.contact-actions {
  display: flex !important;
  gap: var(--space-2) !important;
}

.contact-action-button {
  background: var(--bg-secondary) !important;
  color: var(--text-primary) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  padding: var(--space-2) var(--space-3) !important;
  font-size: var(--font-size-sm) !important;
  cursor: pointer !important;
  transition: all var(--transition-normal) ease !important;
  display: flex !important;
  align-items: center !important;
  gap: var(--space-1) !important;
}

.contact-action-button:hover {
  background: var(--gray) !important;
  color: var(--white) !important;
  transform: translateY(-1px) !important;
}

.contact-action-button.message-button {
  background: var(--accent-primary) !important;
  color: var(--black) !important;
}

.contact-action-button.message-button:hover {
  background: var(--dark-gold) !important;
  color: var(--white) !important;
}

.contact-action-button i {
  font-size: var(--font-size-base) !important;
}

/* ==========================
   Search and Filters
========================== */
.contact-filters {
  padding: var(--space-3) !important;
  background: var(--bg-secondary) !important;
  border-bottom: 1px solid var(--border-color) !important;
  display: flex !important;
  flex-wrap: wrap !important;
  justify-content: space-between !important;
  gap: var(--space-3) !important;
  position: relative !important;
}

.contact-search {
  flex: 1 !important;
  min-width: 250px !important;
  position: relative !important;
}

.contact-search input {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important;
  padding-left: var(--space-6) !important; /* Space for search icon */
  border: 2px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  background: var(--bg-primary) !important;
  font-size: var(--font-size-base) !important;
  color: var(--text-primary) !important;
  transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
}

.contact-search input:focus {
  border-color: var(--accent-primary) !important;
  box-shadow: var(--shadow-focus) !important;
  outline: none !important;
}

.contact-search i {
  position: absolute !important;
  left: var(--space-3) !important;
  top: 50% !important;
  transform: translateY(-50%) !important;
  color: var(--text-secondary) !important;
}

.filter-buttons {
  display: flex !important;
  gap: var(--space-2) !important;
}

.filter-button {
  padding: var(--space-2) var(--space-3) !important;
  background: var(--bg-primary) !important;
  border: 1px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-sm) !important;
  color: var(--text-secondary) !important;
  cursor: pointer !important;
  transition: all var(--transition-normal) ease !important;
}

.filter-button:hover {
  color: var(--text-primary) !important;
  border-color: var(--accent-primary) !important;
}

.filter-button.active {
  background: var(--accent-primary) !important;
  color: var(--black) !important;
  border-color: var(--accent-primary) !important;
}

/* ==========================
   Add Contact Button
========================== */
.add-contact-container {
  padding: var(--space-3) !important;
  background: var(--bg-secondary) !important;
  border-top: 1px solid var(--border-color) !important;
  text-align: center !important;
}

.add-contact-button {
  background: var(--accent-primary) !important;
  color: var (--black) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  padding: var(--space-3) var(--space-4) !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  cursor: pointer !important;
  transition: all var(--transition-fast) ease !important;
  display: inline-flex !important;
  align-items: center !important;
  gap: var (--space-2) !important;
}

.add-contact-button:hover {
  background: var(--dark-gold) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
  color: var(--white) !important;
}

.add-contact-button i {
  font-size: var(--font-size-base) !important;
}

/* ==========================
   No Contacts Message
========================== */
.no-contacts-message {
  text-align: center !important;
  color: var(--text-secondary) !important;
  font-style: italic !important;
  padding: var(--space-6) !important;
  margin: auto !important;
}

/* ==========================
   Responsive Design
========================== */
@media (max-width: 768px) {
  .contacts-page {
    width: 95% !important;
  }
  
  .contact-filters {
    flex-direction: column !important;
  }
  
  .filter-buttons {
    width: 100% !important;
    overflow-x: auto !important;
    padding-bottom: var(--space-2) !important;
  }
  
  .contact-list-item {
    flex-direction: column !important;
    align-items: flex-start !important;
  }
  
  .contact-actions {
    margin-top: var(--space-3) !important;
    width: 100% !important;
    justify-content: flex-end !important;
  }
}

/* For smaller screens */
@media (max-width: 480px) {
  .contact-header h1 {
    font-size: var(--font-size-lg) !important;
  }
  
  .contact-header p {
    font-size: var(--font-size-sm) !important;
  }
  
  .contact-avatar {
    width: 40px !important;
    height: 40px !important;
    font-size: var(--font-size-base) !important;
  }
  
  .contact-action-button {
    font-size: var(--font-size-xs) !important;
    padding: var(--space-1) var(--space-2) !important;
  }
}

/* ==========================
   Animation Effects
========================== */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}
'''
'''--- src/styles/create_project.css ---
/* ============================= */
/*  Create Project Page Layout */
/* ============================= */
.create-project-page {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  min-height: calc(100vh - 100px) !important; /* Match Join Project navbar adjustment */
  background-color: var(--accent-primary) !important; /* Match Join Project gold background */
  font-family: var(--primary-font) !important;
  padding: var(--space-5) !important; /* Consistent padding */
}

.create-project-container {
  width: 100% !important;
  max-width: 500px !important; /* Match Join Project container width */
  background: var(--bg-primary) !important; /* White background for the card */
  border-radius: var(--border-radius) !important; /* Consistent border radius */
  box-shadow: var(--shadow-lg) !important; /* Consistent shadow */
  padding: var(--space-5) !important; /* Consistent padding */
  text-align: center !important;
  position: relative !important;
  border: 1px solid var(--border-color) !important; /* Light gray border */
  min-height: 400px !important; /* Match Join Project container height */
}

/* ============================= */
/*  Title */
/* ============================= */
.create-project-title {
  font-size: var(--font-size-xl) !important; /* Match Join Project title font size */
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important; /* Black text */
  margin-bottom: var(--space-4) !important; /* Consistent spacing */
  margin-top: var(--space-3) !important; /* Match Join Project title spacing */
}

/* ============================= */
/*  Form Inputs */
/* ============================= */
.create-project-container input,
.create-project-container textarea {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important; /* Match Join Project input padding */
  margin-bottom: var(--space-4) !important; /* Consistent spacing */
  border: 2px solid var(--border-color) !important; /* Light gray border */
  border-radius: var(--border-radius) !important; /* Consistent border radius */
  font-size: var(--font-size-base) !important;
  color: var(--text-primary) !important;
  background: var(--bg-primary) !important;
  font-family: var(--primary-font) !important;
  text-align: center !important; /* Match Join Project input alignment */
  transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
  outline: none !important;
  padding-right: 4rem !important; /* Add space for the counter inside the field */
  box-sizing: border-box !important; /* Ensure padding doesn't affect width */
}

.create-project-container textarea {
  height: 100px !important; /* Match Join Project textarea height */
  resize: none !important;
}

.create-project-container input:focus,
.create-project-container textarea:focus {
  border-color: var(--accent-primary) !important; /* Gold border on focus */
  box-shadow: var(--shadow-focus) !important; /* Consistent focus shadow */
}

/* Input Container */
.input-container {
  position: relative !important;
  margin-bottom: var(--space-4) !important;
}

/* Character Counter Inside Input Fields */
.char-counter {
  position: absolute !important;
  bottom: 0.5rem !important; /* Position at the bottom inside the field */
  right: 0.8rem !important; /* Add padding from the right */
  font-size: var(--font-size-xs) !important; /* Smaller font size */
  color: var(--text-tertiary) !important;
  pointer-events: none !important; /* Prevent interaction */
}

/* ============================= */
/*  Buttons */
/* ============================= */
.create-project-btn {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important; /* Match Join Project button padding */
  border: none !important;
  border-radius: var(--border-radius) !important; /* Consistent border radius */
  font-size: var(--font-size-base) !important; /* Match Join Project button font size */
  font-weight: var(--font-weight-bold) !important;
  background: var(--accent-primary) !important; /* Gold background */
  color: var(--white) !important; /* White text for contrast */
  cursor: pointer !important;
  transition: all var(--transition-fast) ease !important;
  margin-top: var(--space-3) !important; /* Match Join Project button spacing */
}

.create-project-btn:hover {
  background: var(--dark-gold) !important; /* Darker gold on hover */
  transform: translateY(-2px) !important; /* Subtle hover effect */
  box-shadow: var(--shadow-md) !important; /* Consistent shadow */
}

/* ============================= */
/*  Back Arrow */
/* ============================= */
.back-arrow {
  position: absolute !important;
  top: var(--space-3) !important; /* Match Join Project back arrow spacing */
  left: var(--space-3) !important; /* Match Join Project back arrow spacing */
  font-size: var(--font-size-lg) !important;
  cursor: pointer !important;
  color: var(--text-secondary) !important; /* Dark gray */
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
}

.back-arrow:hover {
  color: var(--text-primary) !important; /* Black on hover */
  transform: scale(1.2) !important; /* Subtle hover effect */
}

/* ============================= */
/*  Error Message */
/* ============================= */
.error-message {
  color: hsl(0, 100%, 50%) !important; /* Red for errors */
  font-size: var(--font-size-sm) !important;
  margin-top: var(--space-3) !important;
  margin-bottom: var(--space-4) !important;
  text-align: center !important;
}

/* ============================= */
/*  Responsive Design */
/* ============================= */
@media (max-width: 768px) {
  .create-project-container {
    padding: var(--space-3) !important; /* Adjust padding for smaller screens */
  }
}

@media (max-width: 480px) {
  .create-project-title {
    font-size: var(--font-size-lg) !important; /* Adjust font size for smaller screens */
  }

  .create-project-container input,
  .create-project-container textarea {
    font-size: var(--font-size-sm) !important; /* Adjust font size for smaller screens */
  }

  .create-project-btn {
    font-size: var(--font-size-sm) !important; /* Adjust font size for smaller screens */
  }
}

'''
'''--- src/styles/create_sprint.css ---
/* ============================= */
/* üåü Create Sprint Page Layout */
/* ============================= */
.create-sprint-page {
  min-height: calc(100vh - 60px) !important; /* Extend to the footer */
  display: flex !important;
  flex-direction: column !important;
  justify-content: center !important;
  align-items: center !important;
  padding: var(--space-5) !important;
  background: var(--accent-primary) !important; /* Match the gold background */
}

/* ============================= */
/* üîô Back Arrow (Like Account & Backlog Pages) */
/* ============================= */
.back-arrow {
  position: absolute !important;
  top: var(--space-3) !important;
  left: var(--space-3) !important;
  font-size: var(--font-size-lg) !important;
  cursor: pointer !important;
  color: var(--text-secondary) !important;
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
  z-index: 10 !important;
}
  
.back-arrow:hover {
  color: var(--text-primary) !important;
  transform: scale(1.2) !important;
}
  
/* ============================= */
/* üåü Create Sprint Container */
/* ============================= */
.create-sprint-container {
  width: 100% !important;
  max-width: 500px !important;
  margin: 0 auto !important;
}

.create-sprint-container .card {
  background: var(--bg-primary) !important;
  padding: var(--space-5) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-md) !important;
  position: relative !important;
  border: 1px solid var(--border-color) !important;
}

/* ============================= */
/* üåü Card Styling */
/* ============================= */
.card {
  width: 100% !important;
  background: var(--bg-primary) !important;
  padding: var(--space-5) !important;
  border-radius: var(--border-radius) !important;
  text-align: center !important;
}
  
.card h2 {
  color: var(--text-primary) !important;
  font-size: var(--font-size-xl) !important;
  font-weight: var(--font-weight-bold) !important;
  margin-bottom: var(--space-4) !important;
  margin-top: var(--space-3) !important;
}
  
/* ============================= */
/* üåü Input Fields */
/* ============================= */
.input-group {
  text-align: left !important;
  margin-bottom: var(--space-4) !important;
}
  
.input-group label {
  display: block !important;
  font-weight: var(--font-weight-medium) !important;
  margin-bottom: var (--space-2) !important;
  color: var(--text-primary) !important;
  font-size: var(--font-size-base) !important;
}
  
input {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important;
  margin-bottom: var(--space-4) !important;
  border: 2px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  color: var (--text-primary) !important;
  background: var(--bg-primary) !important;
  font-family: var(--primary-font) !important;
  transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
  outline: none !important;
}
  
input:focus {
  border-color: var(--accent-primary) !important;
  box-shadow: var(--shadow-focus) !important;
}

/* Calendar icon */
.calendar-icon {
  margin-right: var(--space-1) !important;
  color: var(--accent-primary) !important;
}

/* Date helper text */
.date-helper-text {
  font-size: var(--font-size-xs) !important;
  color: var(--text-tertiary) !important;
  margin-top: var(--space-1) !important;
  font-style: italic !important;
}

/* Button icon */
.button-icon {
  margin-right: var(--space-2) !important;
}
  
/* ============================= */
/* üåü Buttons */
/* ============================= */
.button-primary {
  background: var(--accent-primary) !important;
  color: var(--black) !important;
  padding: var(--space-3) var(--space-4) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  width: 100% !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  margin-top: var(--space-3) !important;
  transition: all var(--transition-fast) ease !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}
  
.button-primary:hover {
  background: var(--dark-gold) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
  color: var(--white) !important;
}

.button-primary:disabled,
.button-success:disabled,
.button-danger:disabled {
  background: var(--disabled-color, #6c757d) !important;
  cursor: not-allowed !important;
  transform: none !important;
  box-shadow: none !important;
}

/* Button Group for multiple buttons */
.button-group {
  display: grid !important;
  grid-template-columns: 1fr !important;
  gap: var(--space-3) !important;
  margin-top: var(--space-4) !important;
}

.button-success {
  background: var(--success-color, #28a745) !important;
  color: var(--white) !important;
  padding: var(--space-3) var(--space-4) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  width: 100% !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  transition: all var(--transition-fast) ease !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

.button-danger {
  background: var(--danger-color, #dc3545) !important;
  color: var(--white) !important;
  padding: var(--space-3) var(--space-4) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  width: 100% !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  transition: all var(--transition-fast) ease !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

.button-primary:hover,
.button-success:hover,
.button-danger:hover {
  filter: brightness(110%) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
}

/* ============================= */
/* ‚ùå Error Popup */
/* ============================= */
.error-popup {
  position: fixed !important;
  top: var(--space-5) !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background: var(--danger-color, #dc3545) !important;
  color: var(--white) !important;
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-weight: var(--font-weight-bold) !important;
  box-shadow: var(--shadow-md) !important;
  animation: fadeOut 3s ease-in-out forwards !important;
  z-index: 1000 !important;
}
  
@keyframes fadeOut {
  0% { opacity: 1 !important; }
  70% { opacity: 1 !important; }
  100% { opacity: 0 !important; }
}

/* ========================== */
/* üåü Sprint Status */
/* ========================== */
.sprint-status {
  display: flex !important;
  justify-content: space-between !important;
  margin-bottom: var(--space-4) !important;
  padding: var(--space-3) !important;
  background-color: var(--bg-secondary) !important;
  border-radius: var(--border-radius) !important;
  border: 1px solid var(--border-color) !important;
}

.status-indicator {
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
}

/* ========================== */
/* üåü Checkbox Styling */
/* ========================== */
.checkbox-group {
  margin-bottom: var(--space-4) !important;
  text-align: left !important;
}

.checkbox-label {
  display: flex !important;
  align-items: center !important;
  gap: var(--space-2) !important;
  cursor: pointer !important;
  font-weight: var(--font-weight-medium) !important;
  color: var(--text-primary) !important;
}

.checkbox-label input[type="checkbox"] {
  width: 18px !important;
  height: 18px !important;
  margin-right: var(--space-2) !important;
  margin-bottom: 0 !important;
  cursor: pointer !important;
}

.checkbox-icon {
  color: var(--accent-primary) !important;
  margin-right: var(--space-2) !important;
}

/* ========================== */
/* üåü Success Popup */
/* ========================== */
.success-popup {
  position: fixed !important;
  top: var(--space-5) !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background: var(--success-color, #28a745) !important;
  color: var(--white) !important;
  padding: var(--space-3) var(--space-4) !important;
  border-radius: var(--border-radius) !important;
  font-weight: var(--font-weight-bold) !important;
  box-shadow: var(--shadow-md) !important;
  animation: fadeOut 3s ease-in-out forwards !important;
  z-index: 1000 !important;
}

/* ========================== */
/* üåü Loading Message */
/* ========================== */
.loading-message {
  text-align: center !important;
  padding: var(--space-5) !important;
  font-style: italic !important;
  color: var(--text-secondary) !important;
}

/* ========================== */
/* Responsive Design */
/* ========================== */
@media (max-width: 768px) {
  .create-sprint-page {
    padding: var(--space-3) !important;
  }
  
  .create-sprint-container {
    width: 95% !important;
  }
}

@media (max-width: 480px) {
  .card h2 {
    font-size: var(--font-size-lg) !important;
  }
  
  input {
    font-size: var(--font-size-sm) !important;
  }
}

/* ========================== */
/* Global Page Background Fix */
/* ========================== */
.content {
  background-color: var(--bg-secondary) !important;
}

main {
  background-color: var(--bg-secondary) !important;
}

body {
  background-color: var(--bg-secondary) !important;
}

'''
'''--- src/styles/create_task.css ---
/* ==========================
   Create Task Page Container
========================== */
.create-task-container {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  min-height: calc(100vh - 100px) !important; /* Adjust for navbar */
  padding: var(--space-5) !important;
  background-color: var(--bg-secondary) !important;
}

/* ==========================
   Create Task Card
========================== */
.create-task-card {
  width: 100% !important;
  max-width: 500px !important;
  background: var(--bg-primary) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-lg) !important;
  font-family: var(--primary-font) !important;
  border: 1px solid var(--border-color) !important;
  overflow: hidden !important;
  padding: var(--space-5) !important;
  position: relative !important;
  text-align: center !important;
}

/* ==========================
   Create Task Header
========================== */
.create-task-card h2 {
  color: var(--text-primary) !important;
  font-size: var(--font-size-xl) !important;
  font-weight: var(--font-weight-bold) !important;
  margin-bottom: var(--space-4) !important;
  margin-top: var(--space-3) !important;
}

/* ==========================
   Input Fields
========================== */
.create-task-card label {
  display: block !important;
  font-weight: var(--font-weight-medium) !important;
  margin-bottom: var(--space-2) !important;
  margin-top: var(--space-3) !important;
  color: var(--text-primary) !important;
  font-size: var(--font-size-base) !important;
  text-align: left !important;
}

.create-task-card input,
.create-task-card select {
  width: 100% !important;
  padding: var(--space-3) var(--space-4) !important;
  margin-bottom: var(--space-2) !important;
  border: 2px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  font-size: var(--font-size-base) !important;
  color: var(--text-primary) !important;
  background: var(--bg-primary) !important;
  font-family: var(--primary-font) !important;
  transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
  outline: none !important;
}

.create-task-card input:focus,
.create-task-card select:focus {
  border-color: var(--accent-primary) !important;
  box-shadow: var(--shadow-focus) !important;
}

/* ==========================
   Create Task Button
========================== */
.create-task-btn {
  background: var(--accent-primary) !important;
  color: var(--black) !important;
  padding: var(--space-3) var(--space-4) !important;
  border: none !important;
  border-radius: var(--border-radius) !important;
  cursor: pointer !important;
  width: 100% !important;
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  margin-top: var(--space-4) !important;
  transition: all var(--transition-fast) ease !important;
}

.create-task-btn:hover {
  background: var(--dark-gold) !important;
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-md) !important;
  color: var(--white) !important;
}

/* ==========================
   Back Arrow
========================== */
.back-arrow {
  position: absolute !important;
  top: var(--space-3) !important;
  left: var(--space-3) !important;
  font-size: var(--font-size-lg) !important;
  cursor: pointer !important;
  color: var(--text-secondary) !important;
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
  z-index: 10 !important;
}

.back-arrow:hover {
  color: var(--text-primary) !important;
  transform: scale(1.2) !important;
}

/* ==========================
   Error Popup
========================== */
.error-popup {
  position: fixed !important;
  top: 20px !important;
  left: 50% !important;
  transform: translateX(-50%) !important;
  background-color: #f8d7da !important;
  color: #721c24 !important;
  border: 1px solid #f5c6cb !important;
  border-radius: 4px !important;
  padding: 12px 20px !important;
  z-index: 1000 !important;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1) !important;
  display: flex !important;
  align-items: center !important;
  max-width: 80% !important;
}

@keyframes fadeOut {
  0% { opacity: 1 !important; }
  100% { opacity: 0 !important; }
}

.error-icon {
  margin-right: 10px;
  color: #dc3545;
}

.form-group {
  margin-bottom: 16px;
  width: 100%;
}

.form-group label {
  display: block;
  margin-bottom: 6px;
  font-weight: 500;
}

.input-error {
  border: 1px solid #dc3545 !important;
  background-color: #fff8f8;
}

.helper-text {
  font-size: 0.85em;
  color: #666;
  margin-top: 4px;
}

.select-loading {
  padding: 8px;
  background-color: #f8f9fa;
  border: 1px solid #ddd;
  border-radius: 4px;
  color: #6c757d;
}

button:disabled {
  background-color: #e9ecef;
  color: #6c757d;
  cursor: not-allowed;
}

/* ==========================
   Responsive Design
========================== */
@media (max-width: 768px) {
  .create-task-container {
    padding: var(--space-3) !important;
  }
  
  .create-task-card {
    width: 95% !important;
  }
}

@media (max-width: 480px) {
  .create-task-card h2 {
    font-size: var(--font-size-lg) !important;
  }
  
  .create-task-card input,
  .create-task-card select {
    font-size: var(--font-size-sm) !important;
  }
}

'''
'''--- src/styles/footer.css ---
/* ==========================
   Footer Layout
========================== */
body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  margin: 0;
}

.container {
  flex: 1;
  padding-bottom: 60px;
  min-height: calc(100vh - 60px);
  box-sizing: border-box;
  transition: all var(--transition-normal) ease-in-out;
}

.content-wrapper {
  min-height: calc(100vh - 60px); /* Account for footer height */
  padding-bottom: 60px; /* Space for footer */
}

/* ==========================
   Footer Styling
========================== */
.footer {
  background-color: var(--black);
  color: var(--white);
  padding: 10px 20px;
  text-align: center;
  font-size: 0.9rem;
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 60px; /* Fixed height footer */
  z-index: 900; /* Below navbar z-index for proper layering */
  display: flex;
  justify-content: center;
  align-items: center;
}

.footer-content {
  display: flex;
  justify-content: center;
  align-items: center;
  color: var(--white);
}

.footer p {
  margin: 0;
  font-size: 1rem;
  color: var(--white);
}

/* ==========================
   Responsive Footer
========================== */
@media (max-width: 600px) {
  .footer {
    padding: 8px 15px;
    font-size: 0.8rem;
  }
  
  .container {
    padding-bottom: 50px;
    min-height: calc(100vh - 50px);
  }
}

/* ==========================
   Footer Links
========================== */
.footer a {
  color: var(--accent-primary);
  text-decoration: none;
  transition: color var(--transition-normal) ease;
}

.footer a:hover {
  color: var(--white);
  text-decoration: underline;
}

/* ==========================
   Footer Sections
========================== */
.footer-section {
  margin: 0 15px;
}

/* ==========================
   Copyright Text
========================== */
.copyright {
  font-size: 0.85rem;
  opacity: 0.8;
}

/* ==========================
   Navbar Base Styles
========================== */
.navbar {
    position: fixed;
    background-color: var(--black) !important;
    color: var(--white) !important;
    transition: width var(--transition-speed) ease, height var(--transition-speed) ease;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    z-index: 1000;
}

/* ==========================
   Sidebar Mode (Large Screens)
========================== */
@media (min-width: 601px) {
    .navbar {
        width: 5rem;
        height: 100vh;
        left: 0;
        top: 0;
    }

    /* Expand on Hover */
    .navbar:hover {
        width: 16rem;
    }

    .navbar:hover .link-text {
        display: inline;
    }

    /* Adjust Content Padding */
    body.has-sidebar main {
        margin-left: 5rem;
    }

    body.has-sidebar .navbar:hover ~ main {
        margin-left: 16rem;
    }
}

/* ==========================
   Topbar Mode (Small Screens)
========================== */
@media (max-width: 600px) {
    .navbar {
        width: 100%;
        height: 80px;
        top: 0;
        left: 0;
        position: fixed;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
        z-index: 1000;
        background-color: var(--black) !important;
    }

    .navbar-content {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-evenly;
        width: 100%;
        height: 100%;
    }

    .logo-container {
        display: none;
    }

    .navbar-nav {
        display: flex;
        flex-direction: row !important;
        align-items: center;
        justify-content: space-evenly;
        width: 100%;
        height: 100%;
        padding: 0;
    }
}

/* ==========================
   Navigation Items
========================== */
.navbar-nav {
    list-style: none;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100%;
    width: 100%;
    padding: 0;
    margin: 0;
}

.nav-item {
    width: 100%;
    flex-grow: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
}

/* Push last item (Account) to the bottom */
.nav-item:last-child {
    margin-top: auto;
}

/* Default White Color */
.nav-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 5rem;
    font-family: var(--secondary-font);
    text-decoration: none;
    color: var(--white) !important; /* White text */
    transition: background 0.3s ease, color 0.3s ease;
}

/* Gold Hover Effect */
.nav-link:hover {
    background: var(--dark-gray) !important;
    color: var(--gold) !important;
}

/* Ensure Icons Turn Gold on Hover */
.nav-icon {
    font-size: 1.5rem;
    min-width: 2rem;
    transition: color 0.3s ease;
}

.nav-link:hover .nav-icon {
    color: var(--gold) !important;
}

/* Hide Text When Collapsed */
.link-text {
    display: none;
    margin-left: 1rem;
    font-size: 1rem;
    transition: opacity 0.3s ease-in-out;
}

.navbar:hover .link-text {
    display: inline;
    opacity: 1;
}

/* ==========================
   Logo Styling
========================== */
.logo-container {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    padding: 1rem;
    cursor: pointer;
    font-family: var(--primary-font);
    transition: color var(--transition-speed) ease;
}

/* Make the SVG logo white by default */
.logo {
    width: 3rem;
    height: auto;
    filter: brightness(0) saturate(100%) invert(100%) !important; /* White */
    transition: transform var(--transition-speed) ease, 
                filter 0.3s ease !important; /* Smooth transition */
}

/* Rotate logo on navbar hover */
.navbar:hover .logo {
    transform: rotate(-180deg);
}

/* Ensure Logo turns Gold on Hover */
.logo-container:hover .logo {
    filter: brightness(0) saturate(100%) invert(64%) sepia(72%) 
            saturate(532%) hue-rotate(1deg) brightness(101%) contrast(103%) !important;
}

/* On Hover, Turn Gold */
.logo-container:hover .logo-text {
    color: var(--gold) !important; /* Temporarily Gold */
}

/* Ensure logo returns to white after hover */
.navbar:not(:hover) .logo-text {
    color: var(--white) !important; /* Returns to White */
}

/* Default White DevHive Text */
.logo-text {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--white); /* White by default */
    text-transform: uppercase;
    margin-left: 1rem;
    letter-spacing: 0.1rem;
    display: none;
    transition: color 0.3s ease !important; /* Smooth transition */
}

.navbar:hover .logo-text {
    display: inline;
    color: var(--gold) !important; /* Ensure it turns gold */
}

'''
'''--- src/styles/forgot_password.css ---
/* src/styles/forgot_password.css */

/* Forgot Password Page Wrapper */
.forgot-password-page {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: linear-gradient(to bottom right, #f5c542, #ff9f1c);
  font-family: var(--primary-font);
  padding: var(--space-5);
}

/* Background */
/* Background */
/* Background should span the entire screen */
.forgot-password-page .background {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  justify-content: center !important;
  min-height: 100vh !important;
  width: 100% !important;
  background: linear-gradient(to bottom right, var(--gold), var(--dark-gold)) !important;
  font-family: var(--primary-font) !important;
  padding: var(--space-5) !important;
}

/* Logo Container */
.forgot-password-page .logo-container {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: var(--space-6);
}

/* DevHive Logo */
.forgot-password-page .devhive-logo {
  width: 6.25rem;
  height: 6.25rem;
  margin-right: var(--space-2);
  fill: var(--gold);
  stroke: var(--black);
  stroke-width: 2px;
  stroke-linejoin: round;
  stroke-linecap: round;
  vector-effect: non-scaling-stroke;
}

/* Logo Text */
.forgot-password-page .logo-text {
  color: var(--black);
  font-size: var(--font-size-3xl);
  font-weight: var(--font-weight-bold);
  font-family: var(--primary-font);
}

/* Container */
.forgot-password-page .container {
  background: var(--white);
  width: 100%;
  max-width: 400px;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
  position: relative; /* For back arrow positioning */
}

/* Back Arrow */
.forgot-password-page .back-arrow {
  position: absolute;
  top: var(--space-3);
  left: var(--space-3);
  font-size: var(--font-size-lg);
  cursor: pointer;
  color: var(--text-secondary);
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease;
  z-index: 10;
}

.forgot-password-page .back-arrow:hover {
  color: var(--text-primary);
  transform: scale(1.2);
}

/* Reset Button */
.forgot-password-page .reset-button {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  width: 100% !important;
  height: 2.8125rem !important; /* Match height from login_register.css */
  color: var(--white) !important;
  background: var(--gold) !important;
  border-radius: 3.125rem !important; /* Match border-radius from login_register.css */
  font-size: var(--font-size-sm) !important;
  font-weight: var(--font-weight-bold) !important;
  cursor: pointer !important;
  transition: all var(--transition-normal) ease !important;
}

/* Hover Effect */
.forgot-password-page .reset-button:hover {
  background: var(--dark-gold) !important;
  transform: scale(1.05) !important;
}

/* Disabled State */
.forgot-password-page .reset-button:disabled {
  background: hsl(0, 0%, 92%) !important; /* Light gray */
  color: hsl(0, 0%, 40%) !important; /* Darker gray */
  cursor: not-allowed !important;
  transform: none !important;
}

.background {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: linear-gradient(to bottom right, #f5c542, #ff9f1c);
  font-family: var(--primary-font);
  padding: var(--space-5); /* Add padding to match the login page */
}
  /* Logo Container */
  .logo-container {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    margin-bottom: var(--space-6) !important; /* Matches the login page */
  }
  /* DevHive Logo */
  .devhive-logo {
    width: 6.25rem !important; /* Match the size from login_register.css */
    height: 6.25rem !important; /* Match the size from login_register.css */
    margin-right: var(--space-2) !important;
    fill: var(--gold) !important;
    stroke: var(--black) !important;
    stroke-width: 2px !important;
    stroke-linejoin: round !important;
    stroke-linecap: round !important;
    vector-effect: non-scaling-stroke !important;
  }
  
  /* Logo Text */
  .logo-text {
    color: var(--black) !important; /* Match the text color */
    font-size: var(--font-size-3xl) !important; /* Match the font size */
    font-weight: var(--font-weight-bold) !important;
    font-family: var(--primary-font) !important;
  }
  
  .container {
    background: var(--white);
    width: 100%;
    max-width: 400px;
    border-radius: 10px;
    padding: 30px;
    box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
  }
  
  .header {
    text-align: center;
    margin-bottom: 25px;
  }
  
  .header .text {
    color: var(--black);
    font-size: 24px;
    font-weight: 600;
  }
  
  .header .underline {
    width: 60px;
    height: 4px;
    background: var(--gold);
    margin: 10px auto 0;
    border-radius: 10px;
  }
  
  .reset-instructions {
    color: var(--dark-gray);
    text-align: center;
    margin-bottom: 20px;
    line-height: 1.5;
  }
  
  .inputs {
    margin-bottom: 20px !important;
    position: relative !important;
    width: 100% !important;
  }
  
  /* Forgot Password page styling */
  /* Remove or comment out the .input-field styles since we won't need them anymore */
  
  .input-icon {
    position: absolute !important;
    left: 0.8rem !important;
    top: 40% !important;
    transform: translateY(-50%) !important;
    font-size: 1.5rem !important;
    color: var(--text-tertiary) !important; /* Match placeholder color */
    opacity: 0.8 !important;
    pointer-events: none !important;
    z-index: 1 !important;
    display: flex;
    align-items: center;
  }
  
  .inputs input {
    width: 100% !important;
    height: 3.25rem !important;
    border: 1px solid var(--text-tertiary) !important; /* Match icon color */
    border-radius: var(--border-radius) !important;
    outline: none !important;
    font-size: 16px !important;
    background: transparent !important;
    padding: 0 0.8rem 0 3rem !important;
    color: var(--white) !important; /* Change text color to white */
    box-sizing: border-box !important;
    text-align: left !important;
  }

  .inputs input::placeholder {
    color: var(--text-tertiary) !important; /* Match icon color */
    opacity: 1 !important;
  }
  
  input:focus {
    border-color: var(--gold) !important;
    box-shadow: var(--shadow-focus) !important;
  }
  
  .submit-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  /* Reset and Back Buttons */
  .reset-button,
  .back-button {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    width: 100% !important;
    height: 2.8125rem !important; /* Match height from login_register.css */
    color: var(--white) !important;
    background: var(--gold) !important;
    border-radius: 3.125rem !important; /* Match border-radius from login_register.css */
    font-size: var(--font-size-sm) !important;
    font-weight: var(--font-weight-bold) !important;
    cursor: pointer !important;
    transition: all var(--transition-normal) ease !important;
  }

  /* Hover Effect */
  .reset-button:hover,
  .back-button:hover {
    background: var(--dark-gold) !important;
    transform: scale(1.05) !important;
  }

  /* Disabled State */
  .reset-button:disabled {
    background: hsl(0, 0%, 92%) !important; /* Light gray */
    color: hsl(0, 0%, 40%) !important; /* Darker gray */
    cursor: not-allowed !important;
    transform: none !important;
  }

  /* Back Button Specific Styling */
  .back-button {
    background: var(--light-gray) !important;
    color: var(--dark-gray) !important;
  }

  .back-button:hover {
    background: var(--gray) !important;
    color: var(--white) !important;
  }
  
  .error {
    color: #e74c3c;
    font-size: 14px;
    margin-bottom: 15px;
    text-align: center;
  }
  
  .success-message {
    text-align: center;
    padding: 20px 0;
  }
  
  .success-message p {
    color: var(--dark-gray);
    margin-bottom: 15px;
    line-height: 1.5;
  }
  
  .success-message p:first-child {
    color: #27ae60;
    font-weight: 600;
    font-size: 18px;
  }

  .back-arrow {
    position: absolute;
    top: var(--space-3); /* Adjust as needed */
    left: var(--space-3); /* Adjust as needed */
    font-size: var(--font-size-lg); /* Match the size of the icon */
    cursor: pointer;
    color: var(--text-secondary); /* Use a secondary text color */
    transition: transform var(--transition-normal) ease, color var(--transition-normal) ease;
    z-index: 10; /* Ensure it appears above other elements */
  }
  
  .back-arrow:hover {
    color: var(--text-primary); /* Change color on hover */
    transform: scale(1.2); /* Slightly enlarge the icon on hover */
  }
'''
'''--- src/styles/global.css ---
/* Import Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&family=Judson:wght@400;700&display=swap');

:root {
    /* Primary Colors using HSL */
    --gold-hue: 45 !important;
    --gold-saturation: 100% !important;
    
    --gold: hsl(var(--gold-hue), var(--gold-saturation), 58%) !important;
    --dark-gold: hsl(var(--gold-hue), var(--gold-saturation), 50%) !important;
    --light-gold: hsl(var(--gold-hue), var(--gold-saturation), 70%) !important;

    /* Complementary Colors */
    --blue-hue: 217 !important;
    --blue-saturation: 100% !important;
    
    --complementary-blue: hsl(var(--blue-hue), var(--blue-saturation), 58%) !important;
    --dark-blue: hsl(var(--blue-hue), var(--blue-saturation), 45%) !important;
    --light-blue: hsl(var(--blue-hue), 80%, 75%) !important;

    /* Neutral Colors with consistent lightness steps */
    --black: hsl(0, 0%, 13%) !important;          /* 13% lightness */
    --dark-gray: hsl(0, 0%, 27%) !important;      /* 27% lightness */
    --gray: hsl(0, 0%, 53%) !important;           /* 53% lightness */
    --light-gray: hsl(0, 0%, 93%) !important;     /* 93% lightness */
    --white: hsl(0, 0%, 100%) !important;         /* 100% lightness */
    
    /* Theme colors derived from base colors */
    --bg-primary: var(--white) !important;
    --bg-secondary: var(--light-gray) !important;
    --text-primary: var(--black) !important;
    --text-secondary: var(--dark-gray) !important;
    --text-tertiary: var(--gray) !important;
    --border-color: var(--light-gray) !important;
    
    /* Accent colors */
    --accent-primary: var(--gold) !important;
    --accent-secondary: var(--complementary-blue) !important;

    /* Typography */
    --primary-font: 'Montserrat', sans-serif !important;
    --secondary-font: 'Judson', serif !important;

    /* Typography Scale */
    --font-size-xs: 0.75rem !important;    /* 12px */
    --font-size-sm: 0.875rem !important;   /* 14px */
    --font-size-base: 1rem !important;     /* 16px */
    --font-size-lg: 1.125rem !important;   /* 18px */
    --font-size-xl: 1.25rem !important;    /* 20px */
    --font-size-2xl: 1.5rem !important;    /* 24px */
    --font-size-3xl: 1.875rem !important;  /* 30px */
    
    /* Line heights */
    --line-height-tight: 1.2 !important;
    --line-height-normal: 1.5 !important;
    --line-height-loose: 1.8 !important;
    
    /* Font weights */
    --font-weight-normal: 400 !important;
    --font-weight-medium: 600 !important;
    --font-weight-bold: 700 !important;
    
    /* Spacing system */
    --space-1: 0.25rem !important;  /* 4px */
    --space-2: 0.5rem !important;   /* 8px */
    --space-3: 0.75rem !important;  /* 12px */
    --space-4: 1rem !important;     /* 16px */
    --space-5: 1.5rem !important;   /* 24px */
    --space-6: 2rem !important;     /* 32px */
    --space-7: 3rem !important;     /* 48px */
    --space-8: 4rem !important;     /* 64px */

    /* Sizes */
    --border-radius: 10px !important;
    --border-radius-sm: 6px !important;
    --border-radius-lg: 16px !important;
    --border-radius-full: 9999px !important;
    --button-padding: 12px 24px !important;

    /* Transition Speed */
    --transition-fast: 200ms;
    --transition-normal: 300ms;
    --transition-slow: 500ms;
    
    /* Navbar variables */
    --navbar-bg: var(--black);
    --navbar-hover: var(--dark-gray);
    --navbar-text: var(--white);
    --navbar-accent: var(--gold);
    --navbar-height-mobile: 80px !important;
    --navbar-width-collapsed: 80px !important;
    --navbar-width-expanded: 200px !important;
    
    /* Elevation (shadows) */
    --shadow-sm: 0 1px 2px hsla(0, 0%, 0%, 0.05) !important;
    --shadow-md: 0 4px 6px hsla(0, 0%, 0%, 0.1) !important;
    --shadow-lg: 0 10px 15px hsla(0, 0%, 0%, 0.1) !important;
    --shadow-focus: 0 0 0 3px hsla(var(--gold-hue), var(--gold-saturation), 50%, 0.3) !important;
}

/* Global Reset */
* {
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
}

/* Body Styling */
html, body {
    background: var(--bg-secondary) !important;
    color: var(--text-primary) !important;
    font-family: var(--primary-font) !important;
    font-size: var(--font-size-base) !important;
    line-height: var(--line-height-normal) !important;
    min-height: 100vh !important;
    width: 100% !important;
}

.app-container {
    display: flex !important;
    width: 100vw !important;
    height: 100vh !important;
    overflow: hidden !important;
    min-height: 100vh !important;
}

.app-container .content {
    flex-grow: 1 !important;
    width: 100% !important;
    min-height: 100% !important;
    overflow-y: auto !important;
    transition: padding var(--transition-slow) ease !important;
}

main {
    display: flex !important;
    flex-direction: column !important;
    justify-content: flex-start !important;
    min-height: 100vh !important;
    width: 100% !important; /* Ensure full width */
    padding: 0 !important; /* Reset padding */
    margin: 0 !important; /* Reset margin */
    transition: margin var(--transition-normal) ease !important; /* Simplify transition */
}

/* Base container styles */
.container, main, .content-container {
    box-sizing: border-box !important;
    transition: margin var(--transition-normal) ease, 
                width var(--transition-normal) ease !important;
}

/* Dynamic Layout Adjustments */
body.has-sidebar main {
    margin-left: var(--navbar-width-collapsed) !important; /* Use only margin */
    width: calc(100% - var(--navbar-width-collapsed)) !important;
    padding-left: 0 !important; /* Explicitly reset padding */
    transition: margin var(--transition-normal) ease, width var(--transition-normal) ease !important;
}

body.has-sidebar .navbar:hover ~ main {
    margin-left: var(--navbar-width-expanded) !important; /* Use only margin */
    width: calc(100% - var(--navbar-width-expanded)) !important;
    padding-left: 0 !important; /* Explicitly reset padding */
}

body.has-topbar main {
    padding-top: 5rem !important;
}

body.has-topbar .content {
    margin-top: 5rem !important;
}

/* Responsive adjustments happen in media queries */
@media (max-width: 600px) {
    body.has-sidebar main {
        margin-left: 0 !important;
        margin-top: var(--navbar-height-mobile) !important;
        padding-left: 0 !important; /* Explicitly reset padding */
        padding-top: 0 !important; /* Explicitly reset padding */
        width: 100% !important;
    }
    
    body.has-sidebar .navbar:hover ~ main {
        margin-left: 0 !important; /* Override desktop hover effect */
        padding-left: 0 !important; /* Override desktop hover effect */
        width: 100% !important;
    }
}

/* Updated global scrollbar styling to match project board columns */

/* Webkit browsers (Chrome, Safari, newer Edge) */
::-webkit-scrollbar {
  width: 0.4rem !important;
  height: 0.4rem !important; /* For horizontal scrollbars */
}

::-webkit-scrollbar-track {
  background: var(--bg-secondary) !important;
  border-radius: var(--border-radius) !important;
}

::-webkit-scrollbar-thumb {
  background-color: var(--gray) !important;
  border-radius: var(--border-radius) !important;
}

::-webkit-scrollbar-thumb:hover {
  background-color: var(--dark-gray) !important;
}

/* Firefox */
html, body, div, main, section, aside, article {
  scrollbar-width: thin !important;
  scrollbar-color: var(--gray) var(--bg-secondary) !important;
}

/* Ensure scrollable containers have proper styling */
.app-container .content,
main,
.content-container,
.scrollable-container {
  scrollbar-width: thin !important;
  scrollbar-color: var(--gray) var(--bg-secondary) !important;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
    font-family: var(--primary-font) !important;
    color: var(--text-primary) !important;
    line-height: var(--line-height-tight) !important;
}

h1 {
    font-size: var(--font-size-3xl) !important;
    font-weight: var(--font-weight-bold) !important;
    margin-bottom: var(--space-5) !important;
}

h2 {
    font-size: var(--font-size-2xl) !important;
    font-weight: var(--font-weight-bold) !important;
    margin-bottom: var(--space-4) !important;
}

h3 {
    font-size: var(--font-size-xl) !important;
    font-weight: var(--font-weight-bold) !important;
    margin-bottom: var(--space-3) !important;
}

h4 {
    font-size: var(--font-size-lg) !important;
    font-weight: var(--font-weight-medium) !important;
    margin-bottom: var(--space-3) !important;
}

p {
    font-family: var(--secondary-font) !important;
    font-size: var(--font-size-base) !important;
    line-height: var(--line-height-normal) !important;
    margin-bottom: var(--space-4) !important;
    color: var(--text-secondary) !important;
}

/* Small text */
.text-small {
    font-size: var(--font-size-sm) !important;
    line-height: var(--line-height-normal) !important;
}

/* Caption text */
.caption {
    font-size: var(--font-size-xs) !important;
    line-height: var(--line-height-tight) !important;
    color: var(--text-tertiary) !important;
}

/* Buttons with improved hierarchy */
.button {
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    padding: var(--space-3) var(--space-5) !important;
    border-radius: var(--border-radius) !important;
    font-weight: var(--font-weight-medium) !important;
    font-size: var(--font-size-sm) !important;
    line-height: 1 !important;
    text-align: center !important;
    cursor: pointer !important;
    transition: all var(--transition-fast) ease !important;
    text-decoration: none !important;
}

.button-primary {
    background: var(--accent-primary) !important;
    color: var(--black) !important;
    border: 1px solid transparent !important;
}

.button-primary:hover {
    background: var(--dark-gold) !important;
    transform: translateY(-1px) !important;
    box-shadow: var(--shadow-md) !important;
}

.button-secondary {
    background: var(--accent-secondary) !important;
    color: var(--white) !important;
    border: 1px solid transparent !important;
}

.button-secondary:hover {
    background: var(--dark-blue) !important;
    transform: translateY(-1px) !important;
    box-shadow: var(--shadow-md) !important;
}

.button-outline {
    background: transparent !important;
    color: var(--accent-primary) !important;
    border: 1px solid var(--accent-primary) !important;
}

.button-outline:hover {
    background: hsla(var(--gold-hue), var(--gold-saturation), 58%, 0.1) !important;
}

.button-small {
    padding: var(--space-2) var(--space-4) !important;
    font-size: var(--font-size-xs) !important;
}

.button-large {
    padding: var(--space-4) var(--space-6) !important;
    font-size: var(--font-size-base) !important;
}

/* Button with icon */
.button-icon {
    display: inline-flex !important;
    align-items: center !important;
    gap: var(--space-2) !important;
}

.button-icon svg {
    width: 16px !important;
    height: 16px !important;
}

/* Forms with improved contrast */
input, textarea, select {
    width: 100% !important;
    padding: var(--space-3) !important;
    border: 1px solid var(--border-color) !important;
    border-radius: var(--border-radius) !important;
    font-family: var(--primary-font) !important;
    font-size: var(--font-size-base) !important;
    color: var(--text-primary) !important;
    background: var(--bg-primary) !important;
    transition: border-color var(--transition-normal), box-shadow var(--transition-normal) !important;
    margin-bottom: var(--space-3) !important;
}

input:focus, textarea:focus, select:focus {
    border-color: var(--accent-primary) !important;
    box-shadow: var(--shadow-focus) !important;
    outline: none !important;
}

input::placeholder, textarea::placeholder {
    color: var(--text-tertiary) !important;
}

.form-container {
    background: var(--bg-primary) !important;
    padding: var(--space-5) !important;
    border-radius: var(--border-radius) !important;
    box-shadow: var(--shadow-md) !important;
    max-width: 600px !important;
    margin: 0 auto !important;
}

.form-title {
    font-size: var(--font-size-2xl) !important;
    font-weight: var(--font-weight-bold) !important;
    color: var(--text-primary) !important;
    margin-bottom: var(--space-5) !important;
    text-align: center !important;
}

.form-group {
    margin-bottom: var(--space-4) !important;
}

.form-label {
    display: block !important;
    font-size: var(--font-size-sm) !important;
    font-weight: var(--font-weight-medium) !important;
    color: var(--text-secondary) !important;
    margin-bottom: var(--space-2) !important;
}

.form-error {
    font-size: var(--font-size-xs) !important;
    color: hsl(0, 100%, 50%) !important;
    margin-top: var(--space-1) !important;
}

.form-success {
    font-size: var(--font-size-xs) !important;
    color: hsl(120, 100%, 35%) !important;
    margin-top: var(--space-1) !important;
}

.form-button {
    width: 100% !important;
    padding: var(--space-3) var(--space-5) !important;
    border-radius: var(--border-radius) !important;
    font-weight: var(--font-weight-medium) !important;
    text-align: center !important;
    cursor: pointer !important;
    transition: all var(--transition-fast) ease !important;
}

.form-button-primary {
    background: var(--accent-primary) !important;
    color: var(--black) !important;
    border: 1px solid transparent !important;
}

.form-button-primary:hover {
    background: var(--dark-gold) !important;
    transform: translateY(-1px) !important;
    box-shadow: var(--shadow-md) !important;
}

.form-button-secondary {
    background: var(--bg-secondary) !important;
    color: var(--text-primary) !important;
    border: 1px solid var(--border-color) !important;
}

.form-button-secondary:hover {
    background: var(--gray) !important;
    color: var(--white) !important;
}

/* Cards with better spacing */
.card {
    background: var(--bg-primary) !important;
    padding: var(--space-5) !important;
    border-radius: var(--border-radius) !important;
    box-shadow: var(--shadow-md) !important;
    margin-bottom: var(--space-5) !important;
}

.card-title {
    font-size: var(--font-size-xl) !important;
    font-weight: var(--font-weight-bold) !important;
    margin-bottom: var(--space-3) !important;
    color: var(--text-primary) !important;
}

.card-subtitle {
    font-size: var(--font-size-base) !important;
    font-weight: var(--font-weight-medium) !important;
    margin-bottom: var(--space-4) !important;
    color: var(--text-secondary) !important;
}

.card-content {
    color: var(--text-secondary) !important;
    margin-bottom: var(--space-4) !important;
}

/* Footer */
.footer {
    width: 100% !important;
    background: var(--navbar-bg) !important;
    color: var(--navbar-text) !important;
    text-align: center !important;
    padding: var(--space-4) !important;
    margin-top: auto !important;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    :root {
        --bg-primary: hsl(0, 0%, 13%) !important;
        --bg-secondary: hsl(0, 0%, 18%) !important;
        --text-primary: hsl(0, 0%, 100%) !important;
        --text-secondary: hsl(0, 0%, 80%) !important;
        --text-tertiary: hsl(0, 0%, 65%) !important;
        --border-color: hsl(0, 0%, 24%) !important;
    }
}

'''
'''--- src/styles/invite_members.css ---
/* ======================= */
/* Invite Members Styling */
/* ======================= */

.invite-members .invite-container {
  position: relative !important;
  width: 100% !important;
  max-width: 800px !important;
  margin: var(--space-5) auto !important;
  padding: var(--space-5) !important;
  border: 1px solid var(--light-gray) !important;
  background-color: var(--bg-primary) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-md) !important;
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  gap: var(--space-4) !important;
  transition: all var(--transition-normal) ease !important;
  min-height: calc(100vh - 100px) !important;
}

.invite-members h2 {
  font-size: var(--font-size-2xl) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
  margin-bottom: var(--space-4) !important;
  text-align: center !important;
}

.invite-members p {
  font-size: var(--font-size-base) !important;
  color: var(--text-secondary) !important;
  margin-bottom: var(--space-4) !important;
  text-align: center !important;
}

.invite-members .invite-code {
  width: 100% !important;
  padding: var(--space-3) !important;
  font-size: var(--font-size-base) !important;
  text-align: center !important;
  border: 2px solid var(--border-color) !important;
  border-radius: var(--border-radius) !important;
  background-color: var(--bg-secondary) !important;
  color: var(--text-primary) !important;
  margin-bottom: var(--space-4) !important;
  transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
}

.invite-members .invite-code:focus {
  border-color: var(--accent-primary) !important;
  box-shadow: var(--shadow-focus) !important;
  outline: none !important;
}

.invite-members .copy-button {
  width: 200px !important;
  background-color: var(--accent-primary) !important;
  color: var(--white) !important;
  border: none !important;
  padding: var(--space-3) !important;
  font-size: var(--font-size-base) !important;
  cursor: pointer !important;
  text-align: center !important;
  border-radius: var(--border-radius) !important;
  transition: background-color var(--transition-normal) !important;
  box-shadow: var(--shadow-sm) !important;
}

.invite-members .copy-button:hover {
  background-color: var(--dark-gold) !important;
  box-shadow: var(--shadow-md) !important;
}

.invite-members .copy-message {
  margin-top: var(--space-3) !important;
  font-size: var(--font-size-sm) !important;
  color: hsl(145, 63%, 42%) !important;
  animation: fadeOut 3s ease-in-out forwards !important;
}

/* Fade-Out Animation */
@keyframes fadeOut {
  0% {
    opacity: 1 !important;
  }
  70% {
    opacity: 1 !important;
  }
  100% {
    opacity: 0 !important;
  }
}

.invite-members .back-button {
  position: absolute !important;
  top: var(--space-3) !important;
  left: var(--space-3) !important;
  font-size: var(--font-size-lg) !important;
  cursor: pointer !important;
  color: var(--text-secondary) !important;
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
}

.invite-members .back-button:hover {
  color: var(--text-primary) !important;
  transform: scale(1.2) !important;
}

/* Back Arrow */
.invite-members .back-arrow {
  position: absolute !important;
  top: var(--space-3) !important;
  left: var(--space-3) !important;
  font-size: var(--font-size-lg) !important;
  cursor: pointer !important;
  color: var(--text-secondary) !important;
  transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
  z-index: 10 !important;
}

.invite-members .back-arrow:hover {
  color: var(--text-primary) !important;
  transform: scale(1.2) !important;
}

.invite-members .logo {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  margin-bottom: var(--space-4) !important;
}

.invite-members .logo img {
  width: 80px !important;
  height: auto !important;
}

/* Responsive Design */
@media (max-width: 768px) {
  .invite-members .invite-container {
    padding: var(--space-3) !important;
  }

  .invite-members .invite-code {
    font-size: var(--font-size-sm) !important;
  }

  .invite-members .copy-button {
    font-size: var(--font-size-sm) !important;
  }
}

@media (max-width: 480px) {
  .invite-members h2 {
    font-size: var(--font-size-lg) !important;
  }

  .invite-members .invite-code {
    font-size: var(--font-size-sm) !important;
  }
}
'''
'''--- src/styles/join_project.css ---
/* Page Background */
.join-project-page {
    min-height: calc(100vh - 60px) !important; /* Extend to the footer */
    display: flex !important;
    flex-direction: column !important;
    justify-content: center !important;
    align-items: center !important;
    padding: var(--space-5) !important;
    background: var(--accent-primary) !important; /* Match the gold background */
}

.join-project-page .join-project-container {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    min-height: calc(100vh - 100px) !important; /* Adjust for navbar */
    padding: var(--space-5) !important;
    background-color: var(--accent-primary) !important; /* Gold background */
    font-family: var(--primary-font) !important;
    position: relative !important;
}

/* Card Container */
.join-project-page .join-project-card {
    width: 100% !important;
    max-width: 500px !important; /* Match account details card width */
    background: var(--bg-primary) !important; /* White background for the card */
    border-radius: var(--border-radius) !important;
    box-shadow: var(--shadow-lg) !important;
    font-family: var(--primary-font) !important;
    border: 1px solid var(--border-color) !important;
    overflow: hidden !important;
    padding: var(--space-5) !important;
    position: relative !important;
    text-align: center !important;
}

/* Back Arrow */
.join-project-page .back-arrow {
    position: absolute !important;
    top: var(--space-3) !important;
    left: var(--space-3) !important;
    font-size: var(--font-size-lg) !important;
    cursor: pointer !important;
    color: var(--text-secondary) !important;
    transition: transform var(--transition-normal) ease, color var(--transition-normal) ease !important;
    z-index: 10 !important;
}

.join-project-page .back-arrow:hover {
    color: var(--text-primary) !important;
    transform: scale(1.2) !important;
}

/* Title */
.join-project-page .join-project-title {
    font-size: var(--font-size-xl) !important;
    font-weight: var(--font-weight-bold) !important;
    color: var(--text-primary) !important;
    margin-bottom: var(--space-4) !important;
    margin-top: var(--space-3) !important;
}

/* Subtitle */
.join-project-page .join-project-subtitle {
    font-size: var(--font-size-lg) !important;
    font-weight: var(--font-weight-medium) !important;
    color: var(--text-secondary) !important;
    margin-bottom: var(--space-3) !important;
}

/* Input Field */
.join-project-page .project-code-input {
    width: 100% !important;
    padding: var(--space-3) var(--space-4) !important;
    margin-bottom: var(--space-4) !important;
    border: 2px solid var(--border-color) !important;
    border-radius: var(--border-radius) !important;
    font-size: var(--font-size-base) !important;
    color: var(--text-primary) !important;
    background: var(--bg-primary) !important;
    font-family: var(--primary-font) !important;
    text-align: center !important;
    transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
    outline: none !important;
}

.join-project-page .project-code-input:focus {
    border-color: var(--accent-primary) !important;
    box-shadow: var(--shadow-focus) !important;
}

/* Buttons */
.join-project-page .join-btn {
    width: 100% !important;
    padding: var(--space-3) var(--space-4) !important;
    border: none !important;
    border-radius: var(--border-radius) !important;
    font-size: var(--font-size-base) !important;
    font-weight: var(--font-weight-bold) !important;
    color: var(--white) !important;
    background: var(--accent-primary) !important;
    cursor: pointer !important;
    transition: all var(--transition-fast) ease !important;
    margin-top: var(--space-3) !important;
}

.join-project-page .join-btn:hover {
    background: var(--dark-gold) !important;
    transform: translateY(-2px) !important;
    box-shadow: var(--shadow-md) !important;
}

/* Status Messages */
.join-project-page .status {
    font-size: var(--font-size-sm) !important;
    color: var(--text-secondary) !important;
    margin-top: var(--space-3) !important;
    text-align: center !important;
}

.join-project-page .error {
    font-size: var(--font-size-sm) !important;
    color: hsl(0, 100%, 50%) !important;
    margin-top: var(--space-3) !important;
    text-align: center !important;
}

/* Responsive Design */
@media (max-width: 768px) {
    .join-project-page .join-project-container {
        padding: var(--space-3) !important;
    }

    .join-project-page .join-project-card {
        width: 95% !important;
    }

    .join-project-page .project-code-input {
        font-size: var(--font-size-sm) !important;
    }

    .join-project-page .join-btn {
        font-size: var(--font-size-sm) !important;
    }
}

'''
'''--- src/styles/login_register copy.css ---
.auth-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: #fff3cd;
    border-radius: 15px;
    padding: 20px;
    width: 400px;
    margin: 50px auto;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  h1 {
    font-size: 1.8rem;
    margin-bottom: 20px;
  }
  
  .auth-form {
    display: flex;
    flex-direction: column;
    width: 100%;
  }
  
  .auth-form input {
    margin-bottom: 15px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
  }
  
  .button-group {
    display: flex;
    justify-content: center; 
    gap: 10px; 
    margin-top: 15px; 
  }
  
  button {
    background-color: #ffc107;
    color: #000;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 1rem;
  }
  
  button:hover {
    background-color: #e0a800;
  }
  
  
  .forgot-password {
    margin-top: 15px;
    text-align: center;
    font-size: 0.9rem;
    color: #007bff;
    text-decoration: none;
  }
  
  .forgot-password:hover {
    text-decoration: underline;
  }
  
  .error {
    color: red;
    margin-bottom: 15px;
    font-size: 0.9rem;
  }
  
  .success {
    color: green;
    margin-bottom: 15px;
    font-size: 0.9rem;
  }
  
'''
'''--- src/styles/login_register.css ---
/* Login/Register page specific styling */
.login-register-page .background {
  display: flex !important;
  flex-direction: column !important; 
  justify-content: center !important;
  align-items: center !important;
  min-height: 100vh !important; 
  background: linear-gradient(to bottom right, var(--gold), var(--dark-gold)) !important; 
  padding: var(--space-5) !important; 
  font-family: var(--primary-font) !important;
}

.logo-container {
  display: flex !important; 
  align-items: center !important; 
  justify-content: center !important; 
  margin-bottom: var(--space-6) !important; 
}

.devhive-logo {
  width: 6.25rem !important;  /* Increased from 4.375rem to 6.25rem (100px) */
  height: 6.25rem !important; /* Increased from 4.375rem to 6.25rem (100px) */
  margin-right: var(--space-2) !important;
  fill: var(--gold) !important;
  stroke: var(--black) !important;
  stroke-width: 2px !important;
  stroke-linejoin: round !important;
  stroke-linecap: round !important;
  vector-effect: non-scaling-stroke !important;
}

.logo-container:hover .devhive-logo {
  fill: var(--dark-gold) !important;
  transition: fill var(--transition-normal) ease !important;
}

.logo-text {
  color: var(--text-primary) !important; 
  font-size: var(--font-size-3xl) !important; 
  font-weight: var(--font-weight-bold) !important; 
  font-family: var(--primary-font) !important;
}

.logo-container:hover .logo-text {
  color: var(--dark-gold) !important;
}

.container {
  display: flex !important;
  flex-direction: column !important;
  width: 80% !important;
  max-width: 50rem !important;
  background: var(--bg-primary) !important;
  border-radius: var(--border-radius) !important;
  padding: var(--space-6) !important;
  box-shadow: var(--shadow-md) !important;
  padding-bottom: var(--space-8) !important; 
}

.header {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  gap: var(--space-2) !important;
  width: 100% !important;
  margin-bottom: var(--space-5) !important;
}

.text {
  color: var(--gold) !important;
  font-size: var(--font-size-2xl) !important;
  font-weight: var(--font-weight-bold) !important;
}

.underline {
  width: 3.125rem !important;
  height: 0.25rem !important;
  background: var(--gold) !important;
  border-radius: var(--border-radius) !important;
}

.inputs {
  display: flex !important;
  flex-direction: column !important;
  gap: var(--space-4) !important;
  width: 90% !important; /* Added width control to inputs container */
  margin: 0 auto !important; /* Center the inputs container */
  align-items: stretch !important; /* Changed from center to stretch */
}

.inputs input {
  color: var(--text-primary) !important;
}

.inputs input::placeholder {
  color: var(--text-tertiary) !important;
}

.input-field {
  position: relative !important;
  width: 100% !important;
  height: 3.25rem !important;
  border: 1px solid var(--text-tertiary) !important;
  border-radius: var(--border-radius) !important;
  margin-bottom: 20px !important;
}

.input-field input {
  width: 100% !important;
  height: 100% !important;
  border: none !important;
  outline: none !important;
  background: transparent !important;
  padding: 0 0.8rem 0 3rem !important;
  color: var(--text-primary) !important;
  font-size: 16px !important;
}

.input-icon {
  position: absolute !important;
  left: 0.8rem !important;
  top: 14px !important;
  font-size: 1.375rem !important;
  color: var(--text-tertiary) !important;
  opacity: 0.8 !important;
  pointer-events: none !important;
  z-index: 1 !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

.input-field:focus-within {
  border-color: var(--gold) !important;
  box-shadow: var(--shadow-focus) !important;
}

/* Remove the duplicate .input-icon styles and use only img.input-icon */

/* Add explicit styles for validation icons */
.validation-icon {
  position: absolute !important;
  right: 0.8rem !important; /* Match the left padding of the input icon */
  top: 14px !important; /* Match the top positioning of the input icon */
  font-size: 1.375rem !important; /* Match the size of the input icon */
  color: var(--text-tertiary) !important;
  opacity: 0.8 !important;
  pointer-events: none !important;
  z-index: 5 !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

.success-icon {
  color: green !important;
}

.error-icon {
  color: red !important;
}

.error-message {
  color: red !important;
  font-size: var(--font-size-xs) !important;
  margin-top: var(--space-1) !important;
}

.error-icon {
  color: red !important;
  margin-left: var(--space-1) !important;
}

.success-icon {
  color: green !important;
  margin-left: var(--space-1) !important;
}

.forgot-password {
  text-align: left !important;
  margin-top: var(--space-2) !important;
  font-size: var(--font-size-sm) !important;
  color: var(--text-tertiary) !important;
}

.forgot-password span {
  color: var(--accent-primary) !important;
  cursor: pointer !important;
}

.submit-container {
  display: flex !important;
  flex-direction: row !important;
  justify-content: space-between !important;
  width: 100% !important;
  margin-top: var(--space-4) !important;
}

.login-register-page .submit {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  width: 48% !important;
  flex: 0 0 48% !important;
  height: 2.8125rem !important;
  color: var(--white) !important;
  background: var(--gold) !important;
  border-radius: 3.125rem !important;
  font-size: var(--font-size-sm) !important;
  font-weight: var(--font-weight-bold) !important;
  cursor: pointer !important;
  transition: all var(--transition-normal) ease !important;
}

.submit:hover {
  background: var(--dark-gold) !important;
  transform: scale(1.05) !important;
}

.submit.gray {
  background: hsl(0, 0%, 92%) !important;
  color: hsl(0, 0%, 40%) !important;
}

.validation-warning {
  color: hsl(0, 100%, 50%) !important;
  font-size: var(--font-size-xs) !important;
  text-align: center !important;
  margin-top: var(--space-2) !important;
}

.input-error {
  border: 1px solid red !important;
}

.login-register-page .error {
  color: hsl(0, 80%, 50%) !important;
  font-size: var(--font-size-sm) !important;
  margin-top: var(--space-2) !important;
  text-align: center !important;
}

.login-register-page .success {
  color: hsl(120, 70%, 40%) !important; /* Green color for success */
  font-size: var(--font-size-sm) !important;
  margin-top: var(--space-2) !important;
  text-align: center !important;
  background: hsl(120, 70%, 90%) !important; /* Light green background */
  border: 1px solid hsl(120, 70%, 40%) !important; /* Green border */
  border-radius: var(--border-radius) !important;
  padding: var(--space-2) var(--space-3) !important;
  box-shadow: var(--shadow-md) !important;
}

.login-register-page .loading-spinner {
  margin-top: var(--space-3) !important;
  text-align: center !important;
  color: var(--gold) !important;
}

'''
'''--- src/styles/message.css ---
/* Chat container */
.chat-container {
    display: flex !important;
    flex-direction: column !important;
    width: 80% !important;
    max-width: 800px !important; /* Increased from 600px for better readability */
    margin: var(--space-6) auto !important; /* Centered with more spacing */
    background: var(--bg-primary) !important;
    border-radius: var(--border-radius) !important;
    box-shadow: var(--shadow-lg) !important; /* Enhanced shadow for prominence */
    font-family: var(--primary-font) !important;
    border: 1px solid var(--border-color) !important;
    overflow: hidden !important; /* Prevents content from breaking the container */
}

/* Chat header */
.chat-header {
    background: var(--accent-primary) !important; /* Using gold from global colors */
    color: var(--black) !important; /* Better contrast on gold background */
    text-align: center !important;
    padding: var(--space-4) !important;
    border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
    font-weight: var(--font-weight-bold) !important;
    font-size: var(--font-size-xl) !important;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
    position: relative !important;
    z-index: 2 !important; /* Ensures header is above messages */
}

/* Chat header icon */
.chat-header i {
    margin-right: var(--space-2) !important;
    color: var(--black) !important; /* Ensure icon is clearly visible */
}

/* Messages container */
.messages-container {
    display: flex !important;
    flex-direction: column !important;
    gap: var(--space-3) !important;
    padding: var(--space-4) !important;
    height: 60vh !important;
    overflow-y: auto !important;
    background-color: var(--bg-primary) !important;
    position: relative !important;
    scrollbar-width: thin !important;
    scrollbar-color: var(--accent-primary) var(--bg-secondary) !important;
}

/* Align messages in professional chat format */
.message-wrapper {
    display: flex !important;
    width: 100% !important;
    margin-bottom: var(--space-3) !important;
}

/* Receiver messages (Left-aligned) */
.received-wrapper {
    justify-content: flex-start !important;
}

/* Sender messages (Right-aligned) */
.sent-wrapper {
    justify-content: flex-end !important;
}

/* Message box styling */
.message {
    max-width: 75% !important;
    padding: var(--space-3) !important;
    border-radius: var(--border-radius) !important;
    word-wrap: break-word !important;
    font-size: var(--font-size-base) !important;
    position: relative !important;
    box-shadow: var(--shadow-sm) !important;
    animation: fadeIn 0.3s ease-out !important;
}

/* Receiver message styling */
.received {
    background-color: var(--bg-secondary) !important;
    color: var(--text-primary) !important;
    border-radius: var(--border-radius) var(--border-radius) var(--border-radius) 0 !important;
    border: 1px solid var(--border-color) !important;
    align-self: flex-start !important;
}

/* Sender message styling - FIXED TEXT COLOR */
.sent {
    background-color: var(--accent-primary) !important; /* Gold background */
    color: #000000 !important; /* Pure black for maximum contrast */
    border-radius: var(--border-radius) var(--border-radius) 0 var(--border-radius) !important;
    border: 1px solid var(--accent-primary) !important;
    align-self: flex-end !important;
    font-weight: var(--font-weight-bold) !important; /* Bolder text */
}

/* Make message text even stronger */
.sent .message-text {
    color: #000000 !important; /* Ensure text is black */
    font-weight: var(--font-weight-bold) !important; /* Bold text for better readability */
}

/* Enhance the contrast for any links in the messages */
.sent a {
    color: #000066 !important; /* Dark blue for links on gold background */
    text-decoration: underline !important;
    font-weight: var(--font-weight-bold) !important;
}

/* Fix contrast for text in message status */
.sent .message-status {
    color: #000000 !important; /* Pure black for status text */
    font-weight: var(--font-weight-medium) !important;
}

/* Make sure the message time is readable */
.sent .message-time {
    color: #000000 !important; /* Pure black for timestamp */
    font-weight: var(--font-weight-medium) !important;
}

/* Message text */
.message-text {
    margin: 0 0 var(--space-2) 0 !important;
    line-height: var(--line-height-normal) !important;
    font-family: var(--primary-font) !important;
}

/* Timestamp - FIXED COLOR */
.message-time {
    font-size: var(--font-size-xs) !important;
    color: var(--white) !important; /* White for sent messages */
    display: block !important;
    margin-top: var(--space-1) !important;
    text-align: right !important;
    font-weight: var(--font-weight-medium) !important; /* Medium weight for better visibility */
}

/* Fix timestamp color for sent messages */
.sent .message-time {
    color: #000000 !important; /* Pure black for timestamp */
    font-weight: var(--font-weight-medium) !important;
}

/* Fix timestamp color for received messages */
.received .message-time {
    color: var(--text-secondary) !important; /* Fixed typo in the original CSS */
}

/* Message status indicators */
.message.pending {
    opacity: 0.7 !important;
}

.message.failed {
    border: 1px solid var(--error-color, #dc3545) !important;
}

.message-meta {
    display: flex !important;
    justify-content: space-between !important;
    align-items: center !important;
    margin-top: var(--space-1) !important;
}

.message-status {
    font-size: var(--font-size-xs) !important;
    font-style: italic !important;
}

.message-status.failed {
    color: var(--error-color, #dc3545) !important;
    cursor: pointer !important;
}

/* Error message */
.error-message {
    background-color: var(--error-bg, #f8d7da) !important;
    color: var(--error-color, #dc3545) !important;
    padding: var(--space-2) var(--space-3) !important;
    margin: var(--space-2) !important;
    border-radius: var(--border-radius) !important;
    text-align: center !important;
}

/* Button state */
.btn.sending {
    opacity: 0.8 !important;
    cursor: not-allowed !important;
}

/* Status indicators in sent messages */
.sent .message-status {
    color: #000000 !important; /* Pure black for status text */
    font-weight: var(--font-weight-medium) !important;
}

/* Message meta content for sent messages */
.sent .message-meta {
    color: var(--black) !important; /* Ensure all meta content is black */
}

/* Fix for pending and failed status visibility on sent messages */
.sent.pending, .sent.failed {
    background-color: var(--accent-primary) !important; /* Keep consistent color */
}

.sent.failed .message-status.failed {
    color: var(--black) !important; /* Make failed status visible on gold */
    text-decoration: underline !important; /* Add underline for better visibility */
    font-weight: var(--font-weight-bold) !important; /* Make it bolder */
}

/* Input field */
.message-input {
    display: flex !important;
    padding: var(--space-3) !important;
    background: var(--bg-secondary) !important;
    border-radius: 0 0 var(--border-radius) var(--border-radius) !important;
    border-top: 1px solid var(--border-color) !important;
    gap: var(--space-3) !important;
}

.message-input input {
    flex: 1 !important;
    padding: var(--space-3) var(--space-4) !important;
    background: var(--bg-primary) !important;
    border: 2px solid var(--border-color) !important;
    border-radius: var(--border-radius) !important;
    font-family: var(--primary-font) !important;
    font-size: var(--font-size-base) !important;
    color: var(--text-primary) !important;
    transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
}

.message-input input:focus {
    border-color: var(--accent-primary) !important;
    box-shadow: var(--shadow-focus) !important;
    outline: none !important;
}

.message-input input::placeholder {
    color: var(--text-tertiary) !important;
}

.message-input button {
    background: var(--accent-primary) !important;
    color: var(--black) !important; /* Better readability on gold */
    border: none !important;
    border-radius: var(--border-radius) !important;
    font-weight: var(--font-weight-bold) !important;
    cursor: pointer !important;
    transition: all var(--transition-fast) ease !important;
    padding: var(--space-3) var(--space-5) !important;
    min-width: 100px !important; /* Fixed width for better visibility */
    white-space: nowrap !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
}

/* Updated send button with FontAwesome icon */
.message-input button i {
    margin-left: var(--space-2) !important;
    font-size: var(--font-size-base) !important;
}

.message-input button:hover {
    background: var(--dark-gold) !important;
    transform: translateY(-2px) !important;
    box-shadow: var(--shadow-md) !important;
    color: var(--white) !important; /* White text on hover for contrast */
}

/* Removed arrow content, will use FontAwesome in the JSX instead */
/* .message-input button::after {
    content: "‚Üó" !important;
    margin-left: var(--space-2) !important;
    font-size: var(--font-size-lg) !important;
} */

/* Chat Page Container */
.message-page {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    min-height: calc(100vh - 100px) !important; /* Adjust for navbar */
    padding: var(--space-5) !important;
    background-color: var(--bg-secondary) !important;
}

/* Customize scrollbar for Webkit browsers */
.messages-container::-webkit-scrollbar {
    width: 8px !important;
}

.messages-container::-webkit-scrollbar-track {
    background: var(--bg-secondary) !important;
    border-radius: 10px !important;
}

.messages-container::-webkit-scrollbar-thumb {
    background-color: var(--accent-primary) !important;
    border-radius: 10px !important;
}

/* Empty state for no messages */
.no-messages {
    text-align: center !important;
    color: var(--text-secondary) !important;
    font-style: italic !important;
    padding: var(--space-6) !important;
    margin: auto !important;
}

/* Responsive Design */
@media (max-width: 768px) {
    .chat-container {
        width: 95% !important;
        margin: var(--space-3) auto !important;
    }
    
    .message {
        max-width: 85% !important;
    }
    
    .message-input button {
        min-width: 80px !important;
        padding: var(--space-3) !important;
    }
    
    .messages-container {
        height: 50vh !important;
    }
}

/* For very small screens */
@media (max-width: 480px) {
    .chat-header {
        font-size: var(--font-size-lg) !important;
        padding: var(--space-3) !important;
    }
    
    .message-input {
        flex-direction: column !important;
        gap: var(--space-2) !important;
    }
    
    .message-input button {
        width: 100% !important;
    }
}

/* Animation Effects */
/* Subtle fade-in for new messages */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Typing indicator animation */
.typing-indicator {
    display: flex !important;
    align-items: center !important;
    margin: var(--space-2) 0 !important;
}

.typing-indicator span {
    height: 8px !important;
    width: 8px !important;
    border-radius: 50% !important;
    background-color: var(--accent-primary) !important;
    margin: 0 2px !important;
    display: inline-block !important;
    animation: bounce 1.3s linear infinite !important;
}

.typing-indicator span:nth-child(2) {
    animation-delay: 0.2s !important;
}

.typing-indicator span:nth-child(3) {
    animation-delay: 0.4s !important;
}

@keyframes bounce {
    0%, 60%, 100% { transform: translateY(0); }
    30% { transform: translateY(-5px); }
}

'''
'''--- src/styles/navbar.css ---
/* ==========================
   Navbar Base Styles
========================== */
.navbar {
    position: fixed !important;
    background-color: var(--navbar-bg) !important;
    transition: width var(--transition-normal) ease !important;
    z-index: 1000 !important;
    box-shadow: var(--shadow-md) !important;
}

.navbar .sidebar-mode {
    width: var(--navbar-width-collapsed) !important;
    height: 100vh !important;
    left: 0 !important;
    top: 0 !important;
    flex-direction: column !important;
}

.navbar .sidebar-mode:hover {
    width: var(--navbar-width-expanded) !important;
}

.navbar .topbar-mode {
    width: 100% !important;
    height: var(--navbar-height-mobile) !important;
    top: 0 !important;
    left: 0 !important;
    flex-direction: row !important;
}

.navbar .navbar-content {
    width: 100% !important;
    height: 100% !important;
    display: flex !important;
    flex-direction: inherit !important;
}

.navbar .navbar-nav {
    list-style: none !important;
    padding: 0 !important;
    margin: 0 !important;
    width: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    align-items: center !important;
}

.navbar .nav-item {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    width: 100% !important;
}

.navbar .nav-link {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    padding: var(--space-3) !important;
    text-decoration: none !important;
    color: var(--navbar-text) !important;
    width: 100% !important;
    transition: all var(--transition-fast) ease-in-out !important;
}

.navbar .logo-container {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    cursor: pointer !important;
}

.navbar .logo {
    width: 40px !important;
    height: 40px !important;
    transition: transform var(--transition-normal) ease !important;
}

.navbar .logo-text {
    display: none !important;
    margin-left: var(--space-3) !important;
    font-weight: var(--font-weight-bold) !important;
    color: var(--text-primary) !important;
}

.navbar .sidebar-mode:hover .logo-text {
    display: inline !important;
}

.navbar .sidebar-mode:hover .logo {
    transform: rotate(180deg) !important;
}

/* Content layout adjustment for sidebar */
body .container, 
body main, 
body .content-container {
    width: 100% !important;
    transition: margin var(--transition-normal) ease !important;
}

/* When sidebar is present (desktop) */
body.has-sidebar .container, 
body.has-sidebar main, 
body.has-sidebar .content-container {
    margin-left: var(--navbar-width-collapsed) !important;
    width: calc(100% - var(--navbar-width-collapsed)) !important;
}

/* When sidebar is hovered (desktop) */
body.has-sidebar .sidebar-mode:hover ~ .container,
body.has-sidebar .sidebar-mode:hover ~ main,
body.has-sidebar .sidebar-mode:hover ~ .content-container {
    margin-left: var(--navbar-width-expanded) !important;
    width: calc(100% - var(--navbar-width-expanded)) !important;
}

/* When topbar is present (mobile) */
body.has-sidebar .topbar-mode ~ .container,
body.has-sidebar .topbar-mode ~ main,
body.has-sidebar .topbar-mode ~ .content-container {
    margin-left: 0 !important;
    margin-top: var(--navbar-height-mobile) !important;
    width: 100% !important;
}

/* Media queries for responsive layout */
@media (max-width: 600px) {
    /* Force content to adjust for topbar */
    body.has-sidebar .container, 
    body.has-sidebar main, 
    body.has-sidebar .content-container {
        margin-left: 0 !important;
        margin-top: var(--navbar-height-mobile) !important;
        width: 100% !important;
    }
    
    /* Force navbar to stay as topbar */
    .navbar {
        width: 100% !important;
        height: var(--navbar-height-mobile) !important;
        flex-direction: row !important;
    }
    
    /* Disable hover effect in mobile mode */
    .navbar:hover {
        width: 100% !important;
    }

    /* Hide link text in mobile */
    .link-text {
        display: none !important;
    }
    
    /* Fix navbar content layout in mobile */
    .navbar .navbar-content {
        flex-direction: row !important;
        align-items: center !important;
        width: 100% !important;
    }
    
    /* Logo container in mobile - increased spacing */
    .navbar .logo-container {
        margin-right: var(--space-5) !important;
        flex-shrink: 0 !important;
        height: 100% !important;
        padding: 0 !important;
    }
    
    /* Adjust navbar nav to horizontal layout */
    .navbar .navbar-nav {
        flex-direction: row !important;
        justify-content: space-around !important;
        padding: 0 !important;
        margin: 0 !important;
    }

    /* Add specific style for mobile nav items */
    .navbar .nav-item {
        height: 100% !important;
    }
    
    .navbar .nav-link {
        height: 100% !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
    }
    
    /* Fix any specific icon alignment issues */
    .navbar .nav-icon {
        margin: 0 !important;
    }
    
    /* Ensure the navbar has proper height */
    .navbar, .navbar .navbar-content {
        height: var(--navbar-height-mobile) !important;
    }
}

/* Ensure navbar content fills available space */
.navbar-content {
    width: 100% !important;
    height: 100% !important;
    display: flex !important;
    flex-direction: inherit !important; /* Inherits from parent navbar */
}

/* Navbar nav layout */
.navbar-nav {
    list-style: none !important;
    padding: 0 !important;
    margin: 0 !important;
    width: 100% !important;
    display: flex !important;
    flex-direction: column !important; /* Default to column for sidebar */
    align-items: center !important;
}

/* Basic nav item styling */
.nav-item {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    width: 100% !important;
}

/* Nav link styling - ensure vertical centering */
.nav-link {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    padding: var(--space-3) !important;
    text-decoration: none !important;
    color: var(--navbar-text) !important;
    width: 100% !important;
    transition: all var(--transition-fast) ease-in-out !important;
}

/* Special styles for topbar mode */
.topbar-mode .navbar-nav {
    height: 100% !important; /* Take full height */
    align-items: center !important; /* Center items vertically */
}

.topbar-mode .nav-item {
    height: 100% !important; /* Take full height */
    display: flex !important;
    align-items: center !important; /* Center items vertically */
    justify-content: center !important;
}

.topbar-mode .nav-link {
    height: 100% !important; /* Take full height */
    display: flex !important;
    align-items: center !important; /* Center items vertically */
    justify-content: center !important;
    padding: 0 var(--space-3) !important; /* Adjust horizontal padding */
}

.topbar-mode .nav-icon {
    margin: 0 !important; /* Remove any default margins */
    font-size: calc(var(--navbar-height-mobile) * 0.5) !important; /* 50% of navbar height */
    height: 80% !important; /* 80% of container height */
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
}

/* Ensure the navbar content is also properly centered */
.topbar-mode .navbar-content {
    align-items: center !important; /* Center items vertically */
    height: 100% !important;
}

/* Center the SVG in the logo container for topbar mode */
.topbar-mode .logo-container {
    display: flex !important;
    align-items: center !important; /* Center vertically */
    justify-content: center !important; /* Center horizontally */
    height: 100% !important; /* Match the height of the topbar */
    padding: 0 !important; /* Remove any padding */
    margin: 0 !important; /* Remove any margin */
    box-sizing: border-box !important; /* Ensure padding and borders are included in height */
}

.topbar-mode .logo {
    width: calc(var(--navbar-height-mobile) * 0.8) !important; /* Scale the logo to fit the topbar */
    height: calc(var(--navbar-height-mobile) * 0.8) !important; /* Maintain aspect ratio */
    object-fit: contain; /* Ensure the SVG scales properly */
    margin: 0 !important; /* Remove any margin */
    display: block !important; /* Ensure it behaves as a block element */
}

/* Fix mobile logo and nav layout */

/* Logo styling for both modes */
.logo-container {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    cursor: pointer !important;
}

/* Desktop logo styling - only apply in sidebar mode */
.sidebar-mode .logo-container {
    padding: var(--space-3) !important; /* Apply padding only in sidebar mode */
    margin-bottom: var(--space-4) !important;
    width: 100% !important;
}

/* Mobile logo container - make it more square */
.mobile-logo {
    padding: 0 !important; /* Explicitly zero padding */
    margin: 0 !important;
    margin-left: var(--space-3) !important; /* Left spacing */
    margin-right: var(--space-3) !important; /* Right spacing */
    height: 100% !important;
    display: flex !important;
    align-items: center !important; /* Center vertically */
    justify-content: center !important;
    aspect-ratio: 1 !important; /* Make it square */
    width: auto !important; /* Let height determine width */
    box-sizing: border-box !important;
}

/* Logo sizing for both modes */
.logo {
    width: 40px !important;
    height: 40px !important;
    transition: transform var(--transition-normal) ease !important;
}

/* Topbar mode logo sizing */
.topbar-mode .logo {
    width: calc(var(--navbar-height-mobile) * 0.8) !important;
    height: calc(var(--navbar-height-mobile) * 0.8) !important;
    display: block !important;
}

/* Logo image */
.logo {
    width: 40px !important;
    height: 40px !important;
    transition: transform var(--transition-normal) ease !important;
}

/* Logo text (only visible on desktop hover) */
.logo-text {
    display: none !important;
    margin-left: var(--space-3) !important;
    font-weight: var(--font-weight-bold) !important;
    color: var(--text-primary) !important;
}

/* Show text on sidebar hover */
.sidebar-mode:hover .logo-text {
    display: inline !important;
}

/* Rotate logo on sidebar hover */
.sidebar-mode:hover .logo {
    transform: rotate(180deg) !important;
}

'''
'''--- src/styles/project_board.css ---

'''
'''--- src/styles/project_details.css ---
/* ======================= */
/* Scoped Project Details Styling */
/* ======================= */

.project-details {
  position: relative !important;
  width: 100% !important;
  max-width: 800px !important;
  margin: var(--space-5) auto !important;
  padding: var(--space-5) !important;
  border: 1px solid var(--light-gray) !important;
  background-color: var(--bg-primary) !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-md) !important;
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  gap: var(--space-4) !important;
  transition: all var(--transition-normal) ease !important;
  min-height: calc(100vh - 100px) !important;
}

.project-details h1 {
  font-size: var(--font-size-2xl) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
  margin-bottom: var(--space-4) !important;
  text-align: center !important;
}

.project-details h2 {
  font-size: var(--font-size-xl) !important;
  font-weight: var(--font-weight-bold) !important;
  color: var(--text-primary) !important;
  margin: var(--space-5) 0 var(--space-3) 0 !important;
}

/* Add padding to the right of the project title input field */
.project-details .edit-title {
  padding-right: 6rem !important; /* Add enough space for the buttons inside the field */
  box-sizing: border-box !important; /* Ensure padding doesn't affect the width */
}

/* Scoped Edit, Save & Cancel Buttons */
.project-details .edit-buttons {
  position: absolute !important;
  top: var(--space-5) !important;
  right: var(--space-5) !important;
  display: flex !important;
  gap: var(--space-3) !important;
}

.project-details .edit-project-btn {
  color: var(--white) !important;
  background: none !important;
  border: none !important;
  font-size: 1.5rem !important;
  cursor: pointer !important;
  transition: transform var(--transition-fast) ease, color var(--transition-normal) ease !important;
}

.project-details .edit-project-btn:hover {
  transform: scale(1.1) !important;
  color: var(--gold) !important;
}

.project-details .save-btn {
  color: hsl(145, 63%, 42%) !important;
  background: none !important;
  border: none !important;
  font-size: 1.5rem !important;
  cursor: pointer !important;
  transition: transform var(--transition-fast) ease, color var(--transition-normal) ease !important;
  z-index: 1;
}

.project-details .save-btn:hover {
  transform: scale(1.2) !important;
  color: hsl(145, 63%, 32%) !important;
}

.project-details .cancel-btn {
  color: hsl(0, 70%, 50%) !important;
  background: none !important;
  border: none !important;
  font-size: 1.5rem !important;
  cursor: pointer !important;
  transition: transform var(--transition-fast) ease, color var(--transition-normal) ease !important;
}

.project-details .cancel-btn:hover {
  transform: scale(1.2) !important;
  background: none !important;
  color: hsl(0, 70%, 40%) !important;
}

/* Scoped Invite Button */
.project-details .invite-btn {
  width: 200px !important;
  background-color: var(--accent-primary) !important;
  color: var(--white) !important;
  border: none !important;
  padding: var(--space-3) !important;
  font-size: var(--font-size-base) !important;
  cursor: pointer !important;
  text-align: center !important;
  border-radius: var(--border-radius) !important;
  transition: background-color var(--transition-normal) !important;
  box-shadow: var(--shadow-sm) !important;
}

.project-details .invite-btn:hover {
  background-color: var(--dark-gold) !important;
  box-shadow: var(--shadow-md) !important;
}

/* Scoped Members Section */
.project-details .members-section {
  width: 100% !important;
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
}

.project-details .members-section h3 {
  font-size: var(--font-size-xl) !important;
  color: var(--text-primary) !important;
  margin-bottom: var(--space-4) !important;
}

.project-details .members-section ul {
  width: 100% !important;
  max-width: 600px !important;
  padding: 0 !important;
  margin: 0 auto !important;
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  list-style-type: none !important;
}

/* Scoped Member List Styling */
.project-details .member-item {
  position: relative !important;
  width: 100% !important;
  max-width: 600px !important;
  height: 3.25rem !important;
  border: 1px solid var(--text-tertiary) !important;
  border-radius: var(--border-radius) !important;
  margin-bottom: var(--space-3) !important;
  background-color: var(--bg-secondary) !important;
  display: flex !important;
  align-items: center !important;
  justify-content: space-between !important;
  padding: 0 1rem !important;
  transition: border-color var(--transition-normal) ease, box-shadow var(--transition-normal) ease !important;
}

.project-details .member-item:hover {
  border-color: var(--gold) !important;
  box-shadow: var(--shadow-focus) !important;
}

.project-details .member-item.owner {
  border-color: hsl(48, 100%, 50%) !important;
  font-weight: var(--font-weight-bold) !important;
}

.project-details .member-info {
  display: flex !important;
  align-items: center !important;
  gap: var(--space-3) !important;
}

.project-details .member-name {
  font-size: var(--font-size-base) !important;
  color: var(--text-primary) !important;
}

.project-details .crown {
  font-size: 1.25rem !important;
  color: hsl(48, 100%, 50%) !important;
  margin-right: var(--space-2) !important;
  vertical-align: middle !important;
}

/* Scoped Kick Member Styling */
.project-details .kick-member {
  font-size: var(--font-size-lg) !important;
  color: hsl(0, 70%, 50%) !important;
  cursor: pointer !important;
  transition: transform var(--transition-fast) ease, color var(--transition-normal) ease !important;
}

.project-details .kick-member:hover {
  transform: scale(1.2) !important;
  color: hsl(0, 70%, 40%) !important;
}

/* ======================= */
/* Modal Overlay & Popup */
/* ======================= */

.modal-overlay {
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  width: 100vw !important;
  height: 100vh !important;
  background: rgba(0, 0, 0, 0.5) !important;
  display: none !important;
  justify-content: center !important;
  align-items: center !important;
  backdrop-filter: blur(8px) !important;
  z-index: 10000 !important;
  visibility: hidden !important;
  opacity: 0 !important;
  pointer-events: none !important;
}

/* Only show overlay when modal is open */
.modal-overlay.active {
  display: flex !important;
  visibility: visible !important;
  opacity: 1 !important;
  pointer-events: auto !important;
}

/* Modal Box */
.modal {
  position: relative !important;
  background: var(--bg-primary) !important;
  padding: var(--space-5) !important;
  width: 400px !important;
  border-radius: var(--border-radius) !important;
  box-shadow: var(--shadow-lg) !important;
  text-align: center !important;
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  justify-content: center !important;
  z-index: 10001 !important;
  border: 2px solid var(--text-primary) !important;
}

/* Modal Title */
.modal h3 {
  margin-bottom: var(--space-4) !important;
  font-size: var(--font-size-xl) !important;
  color: var(--text-primary) !important;
}

/* Modal Text */
.modal p {
  font-size: var(--font-size-base) !important;
  color: var(--text-secondary) !important;
  margin-bottom: var(--space-5) !important;
}

/* Modal Actions */
.modal-actions {
  display: flex !important;
  justify-content: space-between !important;
  width: 100% !important;
  padding-top: var(--space-3) !important;
}

/* Buttons with Icons */
.confirm-btn, .cancel-btn {
  width: 50px !important; /* Ensure both buttons have the same width */
  height: 50px !important; /* Ensure both buttons have the same height */
  background: none !important; /* No background for both */
  border: none !important; /* No border for both */
  font-size: var(--font-size-xl) !important; /* Same font size for icons */
  cursor: pointer !important; /* Pointer cursor for both */
  transition: transform var(--transition-fast) ease, color var(--transition-normal) ease !important;
  display: flex !important; /* Flexbox for centering */
  align-items: center !important; /* Center vertically */
  justify-content: center !important; /* Center horizontally */
  padding: 0 !important; /* Remove any padding */
  color: var(--text-primary) !important; /* Default color for both */
}

/* Checkmark (Confirm) is Green */
.confirm-btn {
  color: hsl(145, 63%, 42%) !important; /* Green color */
}

/* Expand on hover */
.confirm-btn:hover {
  transform: scale(1.2) !important; /* Same hover effect */
  color: hsl(145, 63%, 32%) !important; /* Darker green on hover */
}

/* X (Cancel) is Red */
.cancel-btn {
  color: hsl(0, 70%, 50%) !important; /* Red color */
}

/* Expand on hover */
.cancel-btn:hover {
  transform: scale(1.2) !important; /* Same hover effect */
  color: hsl(0, 70%, 40%) !important; /* Darker red on hover */
}

/* ======================= */
/* Input Container */
/* ======================= */

.input-container {
  position: relative !important;
  margin-bottom: var(--space-4) !important;
  width: 100% !important; /* Ensure the container takes full width */
  max-width: 600px !important; /* Revert to the original smaller width */
}

/* Character Counter Inside Input Fields */
.char-counter {
  position: absolute !important;
  bottom: 0.5rem !important; /* Position at the bottom inside the field */
  right: 0.8rem !important; /* Add padding from the right */
  font-size: var(--font-size-xs) !important; /* Smaller font size */
  color: var(--text-tertiary) !important;
  pointer-events: none !important; /* Prevent interaction */
}

/* Input Field Adjustments */
.project-details .edit-title,
.project-details .edit-description {
  padding-right: 4rem !important; /* Add space for the counter inside the field */
  box-sizing: border-box !important; /* Ensure padding doesn't affect width */
}

'''
'''--- src/styles/projects.css ---
/* Projects Page Container */
.projects-page .projects-container {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  justify-content: center !important;
  min-height: 100vh !important;
  background: linear-gradient(to bottom right, var(--gold), var(--dark-gold)) !important;
  padding: var(--space-5) !important;
  font-family: var(--primary-font) !important;
}

/* Header Section */
.projects-page .header {
  text-align: center !important;
  margin-bottom: var(--space-6) !important;
}

.projects-page .header h1 {
  color: var(--white) !important; /* Changed from var(--text-primary) for better contrast */
  font-size: var(--font-size-3xl) !important;
  font-weight: var(--font-weight-bold) !important;
  text-shadow: 0px 2px 4px rgba(0, 0, 0, 0.5) !important; /* Made shadow darker */
}

.projects-page .header p {
  color: var(--black) !important; /* Changed to black for better readability */
  font-size: var(--font-size-xl) !important; /* Increased size for better legibility */
  opacity: 0.9 !important; /* Slight opacity for visual hierarchy */
}

/* Project List using CSS Grid for Responsiveness */
.projects-page .projects-list {
  display: grid !important;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)) !important;
  gap: var(--space-5) !important;
  width: 100% !important;
  max-width: 1000px !important;
  animation: fadeIn 0.6s ease-in-out !important;
}

.projects-page .projects-container .projects-list p {
  color: var(--white) !important; /* Set text color to white */
  font-size: var(--font-size-lg) !important; /* Optional: Adjust font size for better visibility */
  text-align: center !important; /* Optional: Center align the text */
}

/* Individual Project Card */
.projects-page .project-card {
  background: var(--bg-primary) !important;
  border: 2px solid var(--accent-primary) !important;
  border-radius: var(--border-radius) !important;
  padding: var(--space-5) !important;
  box-shadow: var(--shadow-md) !important;
  transition: all var(--transition-normal) ease-in-out !important;
  position: relative !important;
}

.projects-page .project-card h3 {
  color: var(--text-primary) !important;
  font-size: var(--font-size-xl) !important;
  margin-bottom: var(--space-3) !important;
}

.projects-page .project-card p {
  color: var(--text-secondary) !important;
  font-size: var(--font-size-base) !important;
}

.projects-page .project-card:hover {
  transform: translateY(-5px) scale(1.02) !important;
  box-shadow: var(--shadow-lg) !important;
}

/* Loading Indicator */
.projects-page .loading {
  font-size: var(--font-size-lg) !important;
  color: var(--white) !important;
}

/* Action Buttons */
.projects-page .actions {
  display: flex !important;
  gap: var(--space-4) !important;
  margin-top: var(--space-6) !important;
}

.projects-page .action-btn {
  width: 180px !important;
  height: 50px !important;
  border: none !important;
  border-radius: var(--border-radius) !important; /* Standard rounded corners */
  font-size: var(--font-size-base) !important;
  font-weight: var(--font-weight-bold) !important;
  cursor: pointer !important;
  transition: all var(--transition-fast) ease-in-out !important;
  background: var(--bg-primary) !important; /* Solid background color */
  color: var(--text-primary) !important; /* Text color matching the theme */
  box-shadow: var(--shadow-md) !important; /* Subtle shadow for depth */
}

/* Hover Effect for Buttons */
.projects-page .action-btn:hover {
  background: var(--bg-secondary) !important; /* Slightly darker background on hover */
  transform: translateY(-2px) !important; /* Slight elevation on hover */
  box-shadow: var(--shadow-lg) !important; /* Larger shadow on hover */
}

/* Create Button */
.create-btn {
  background: linear-gradient(to bottom, var(--gold), var(--dark-gold)) !important; /* Gold gradient */
  color: var(--black) !important; /* Black text for contrast */
}

.create-btn:hover {
  background: linear-gradient(to bottom, var(--dark-gold), var(--gold)) !important; /* Reverse gradient on hover */
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-lg) !important;
}

/* Join Button */
.join-btn {
  background: linear-gradient(to bottom, var(--black), var(--dark-gray)) !important; /* Black gradient */
  color: var(--white) !important; /* White text for contrast */
}

.join-btn:hover {
  background: linear-gradient(to bottom, var(--dark-gray), var(--gray)) !important; /* Lighter gradient on hover */
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-lg) !important;
}

/* Account Details Button */
.account-btn {
  background: linear-gradient(to bottom, var(--gray), var(--dark-gray)) !important; /* Gray gradient */
  color: var(--white) !important; /* White text for contrast */
}

.account-btn:hover {
  background: linear-gradient(to bottom, var(--dark-gray), var(--black)) !important; /* Darker gradient on hover */
  transform: translateY(-2px) !important;
  box-shadow: var(--shadow-lg) !important;
}

/* Responsive Design for Buttons */
@media (max-width: 600px) {
  .projects-page .action-btn {
    width: 100% !important; /* Full width on smaller screens */
    height: 45px !important;
    font-size: var(--font-size-sm) !important;
  }
}

/* Responsive Design for Projects Section */
@media (max-width: 600px) {
  .projects-page .projects-container {
    padding: var(--space-4) !important;
  }

  .projects-page .header h1 {
    font-size: var(--font-size-2xl) !important;
  }

  .projects-page .projects-list {
    grid-template-columns: 1fr !important;
  }
}

/* Fade-in Animation */
@keyframes fadeIn {
  from {
    opacity: 0 !important;
    transform: translateY(10px) !important;
  }
  to {
    opacity: 1 !important;
    transform: translateY(0) !important;
  }
}

/* Accessibility Improvements */
.projects-page .project-card:focus {
  outline: 2px solid var(--accent-primary) !important;
}

/* ======================== */
/* Project Card Actions (Edit & Delete Buttons) */
/* ======================== */
.projects-page .project-actions {
  display: flex !important;
  justify-content: space-between !important;
  position: absolute !important;
  bottom: var(--space-3) !important;
  left: var(--space-3) !important;
  width: 95% !important;
  pointer-events: none !important;
}

/* Trash (üóëÔ∏è) - Bottom Left (Hidden by Default) */
.projects-page .delete-btn {
  background: none !important;
  border: none !important;
  font-size: var(--font-size-lg) !important;
  color: var(--error) !important; /* Using global error color */
  cursor: pointer !important;
  transition: transform var(--transition-fast) ease, color var(--transition-normal) ease !important;
  display: none !important;
  pointer-events: auto !important;
}

/* Show delete button in edit mode */
.projects-page .project-card.editing .delete-btn {
  display: block !important;
}

/* Delete Button Hover Effect */
.projects-page .delete-btn:hover {
  transform: scale(1.2) !important;
  color: var(--dark-error) !important; /* Using global dark error color */
}

/* Edit Button (‚úèÔ∏è) - Bottom Right */
.projects-page .edit-btn {
  background: none !important;
  border: none !important;
  font-size: var(--font-size-lg) !important;
  color: var(--text-primary) !important;
  cursor: pointer !important;
  transition: transform var(--transition-fast) ease, color var(--transition-normal) ease !important;
  margin-left: auto !important;
  pointer-events: auto !important;
}

/* Edit Button Hover Effect */
.projects-page .edit-btn:hover {
  transform: scale(1.2) !important;
  color: var(--text-secondary) !important;
}

/* ======================== */
/* Prevent Click-Through */
/* ======================== */
.project-actions button {
  pointer-events: auto !important;
}

/* ======================== */
/* Modal Overlay & Popup */
/* ======================== */
.modal-overlay {
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  width: 100vw !important;
  height: 100vh !important;
  background: rgba(0, 0, 0, 0.5) !important;
  display: none !important;
  justify-content: center !important;
  align-items: center !important;
  backdrop-filter: blur(8px) !important;
  z-index: 10000 !important;
  visibility: hidden !important;
  opacity: 0 !important;
  pointer-events: none !important;
}

/* Show overlay when modal is active */
.modal-overlay.active {
  display: flex !important;
  visibility: visible !important;
  opacity: 1 !important;
  pointer-events: auto !important;
}

/* Modal Box */
.modal {
  background: var(--bg-primary) !important;
  padding: var(--space-5) !important;
  width: 400px !important;
  border-radius: var(--border-radius) !important;
  text-align: center !important;
  box-shadow: var(--shadow-lg) !important;
}

/* Modal Title */
.modal h3 {
  margin-bottom: var(--space-4) !important;
  font-size: var(--font-size-xl) !important;
  color: var(--text-primary) !important;
}

/* Modal Text */
.modal p {
  font-size: var(--font-size-base) !important;
  color: var (--text-secondary) !important;
  margin-bottom: var(--space-5) !important;
}

/* Modal Buttons */
.confirm-btn, .cancel-btn {
  font-size: var(--font-size-xl) !important;
  border: none !important;
  cursor: pointer !important;
  width: 50px !important;
  height: 50px !important;
  background: none !important;
  transition: transform var(--transition-fast) ease, color var(--transition-normal) ease !important;
}

.confirm-btn { 
  color: var(--success) !important; /* Using global success color */
}

.confirm-btn:hover { 
  transform: scale(1.2) !important; 
  color: var(--dark-success) !important; /* Using global dark success color */
}

.cancel-btn { 
  color: var(--error) !important; /* Using global error color */
}

.cancel-btn:hover { 
  transform: scale(1.2) !important; 
  color: var(--dark-error) !important; /* Using global dark error color */
}

/* FontAwesome icons - Ensuring visibility */
.project-card .fa,
.project-card .fas,
.project-card .far,
.modal .fa,
.modal .fas,
.modal .far {
  display: inline-block !important;
  visibility: visible !important;
}

'''
'''--- src/utils/apiClient.js ---
import axios from 'axios';
import { API_BASE_URL } from '../config';
import { getAuthToken } from '../services/authService'; // Changed path

// Create axios instance with default config
export const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Add auth token to all requests
api.interceptors.request.use(config => {
  const token = getAuthToken();
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
}, error => Promise.reject(error));

// Helper for creating authenticated request config (keeping backward compatibility)
export const createAuthenticatedRequest = () => {
  const token = getAuthToken();
  return {
    headers: {
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json'
    }
  };
};

// Standardized error handling
export const handleApiError = (error, operation = 'API operation') => {
  // Handle auth errors
  if (error.response?.status === 401) {
    console.error(`Authentication error during ${operation}`);
    // You might want to redirect to login here
  }
  
  const message = error.response?.data?.message || error.message || `Error during ${operation}`;
  console.error(`‚ùå ${message}`, error);
  throw error;
};

// Add response interceptor to normalize all errors to strings
api.interceptors.response.use(
  response => response,
  error => {
    const data = error?.response?.data;
    const message = 
      (data && (data.title || data.detail || data.error || data.message)) ||
      (typeof data === "string" ? data : null) ||
      error.message || 
      "Request failed";
    
    // Create a new error with the normalized message
    const normalizedError = new Error(message);
    normalizedError.status = error.response?.status;
    normalizedError.originalError = error;
    
    return Promise.reject(normalizedError);
  }
);
'''